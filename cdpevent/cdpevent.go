// Code generated by cdpgen; DO NOT EDIT!

package cdpevent

import (
	"encoding/json"

	"github.com/mafredri/cdp/cdptype"
	"github.com/mafredri/cdp/rpcc"
)

// AnimationCreatedClient receives AnimationCreated events.
type AnimationCreatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*AnimationCreatedReply, error)
	rpcc.Stream
}

// AnimationCreatedReply event for each animation that has been created.
type AnimationCreatedReply struct {
	ID string `json:"id"` // Id of the animation that was created.
}

// AnimationStartedClient receives AnimationStarted events.
type AnimationStartedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*AnimationStartedReply, error)
	rpcc.Stream
}

// AnimationStartedReply event for animation that has been started.
type AnimationStartedReply struct {
	Animation cdptype.Animation `json:"animation"` // Animation that was started.
}

// AnimationCanceledClient receives AnimationCanceled events.
type AnimationCanceledClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*AnimationCanceledReply, error)
	rpcc.Stream
}

// AnimationCanceledReply event for when an animation has been canceled.
type AnimationCanceledReply struct {
	ID string `json:"id"` // Id of the animation that was canceled.
}

// ApplicationCacheStatusUpdatedClient receives ApplicationCacheStatusUpdated events.
type ApplicationCacheStatusUpdatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*ApplicationCacheStatusUpdatedReply, error)
	rpcc.Stream
}

// ApplicationCacheStatusUpdatedReply
type ApplicationCacheStatusUpdatedReply struct {
	FrameID     cdptype.PageFrameID `json:"frameId"`     // Identifier of the frame containing document whose application cache updated status.
	ManifestURL string              `json:"manifestURL"` // Manifest URL.
	Status      int                 `json:"status"`      // Updated application cache status.
}

// ApplicationCacheNetworkStateUpdatedClient receives NetworkStateUpdated events.
type ApplicationCacheNetworkStateUpdatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*ApplicationCacheNetworkStateUpdatedReply, error)
	rpcc.Stream
}

// ApplicationCacheNetworkStateUpdatedReply
type ApplicationCacheNetworkStateUpdatedReply struct {
	IsNowOnline bool `json:"isNowOnline"` //
}

// CSSMediaQueryResultChangedClient receives MediaQueryResultChanged events.
type CSSMediaQueryResultChangedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*CSSMediaQueryResultChangedReply, error)
	rpcc.Stream
}

// CSSMediaQueryResultChangedReply fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features.
type CSSMediaQueryResultChangedReply struct{}

// CSSFontsUpdatedClient receives FontsUpdated events.
type CSSFontsUpdatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*CSSFontsUpdatedReply, error)
	rpcc.Stream
}

// CSSFontsUpdatedReply fires whenever a web font gets loaded.
type CSSFontsUpdatedReply struct{}

// CSSStyleSheetChangedClient receives StyleSheetChanged events.
type CSSStyleSheetChangedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*CSSStyleSheetChangedReply, error)
	rpcc.Stream
}

// CSSStyleSheetChangedReply fired whenever a stylesheet is changed as a result of the client operation.
type CSSStyleSheetChangedReply struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
}

// CSSStyleSheetAddedClient receives StyleSheetAdded events.
type CSSStyleSheetAddedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*CSSStyleSheetAddedReply, error)
	rpcc.Stream
}

// CSSStyleSheetAddedReply fired whenever an active document stylesheet is added.
type CSSStyleSheetAddedReply struct {
	Header cdptype.CSSStyleSheetHeader `json:"header"` // Added stylesheet metainfo.
}

// CSSStyleSheetRemovedClient receives StyleSheetRemoved events.
type CSSStyleSheetRemovedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*CSSStyleSheetRemovedReply, error)
	rpcc.Stream
}

// CSSStyleSheetRemovedReply fired whenever an active document stylesheet is removed.
type CSSStyleSheetRemovedReply struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` // Identifier of the removed stylesheet.
}

// ConsoleMessageAddedClient receives MessageAdded events.
type ConsoleMessageAddedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*ConsoleMessageAddedReply, error)
	rpcc.Stream
}

// ConsoleMessageAddedReply issued when new console message is added.
type ConsoleMessageAddedReply struct {
	Message cdptype.ConsoleMessage `json:"message"` // Console message that has been added.
}

// DOMDocumentUpdatedClient receives DocumentUpdated events.
type DOMDocumentUpdatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMDocumentUpdatedReply, error)
	rpcc.Stream
}

// DOMDocumentUpdatedReply fired when Document has been totally updated. Node ids are no longer valid.
type DOMDocumentUpdatedReply struct{}

// DOMSetChildNodesClient receives SetChildNodes events.
type DOMSetChildNodesClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMSetChildNodesReply, error)
	rpcc.Stream
}

// DOMSetChildNodesReply fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids.
type DOMSetChildNodesReply struct {
	ParentID cdptype.DOMNodeID `json:"parentId"` // Parent node id to populate with children.
	Nodes    []cdptype.DOMNode `json:"nodes"`    // Child nodes array.
}

// DOMAttributeModifiedClient receives AttributeModified events.
type DOMAttributeModifiedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMAttributeModifiedReply, error)
	rpcc.Stream
}

// DOMAttributeModifiedReply fired when Element's attribute is modified.
type DOMAttributeModifiedReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node that has changed.
	Name   string            `json:"name"`   // Attribute name.
	Value  string            `json:"value"`  // Attribute value.
}

// DOMAttributeRemovedClient receives AttributeRemoved events.
type DOMAttributeRemovedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMAttributeRemovedReply, error)
	rpcc.Stream
}

// DOMAttributeRemovedReply fired when Element's attribute is removed.
type DOMAttributeRemovedReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node that has changed.
	Name   string            `json:"name"`   // A ttribute name.
}

// DOMInlineStyleInvalidatedClient receives InlineStyleInvalidated events.
type DOMInlineStyleInvalidatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMInlineStyleInvalidatedReply, error)
	rpcc.Stream
}

// DOMInlineStyleInvalidatedReply fired when Element's inline style is modified via a CSS property modification.
type DOMInlineStyleInvalidatedReply struct {
	NodeIDs []cdptype.DOMNodeID `json:"nodeIds"` // Ids of the nodes for which the inline styles have been invalidated.
}

// DOMCharacterDataModifiedClient receives CharacterDataModified events.
type DOMCharacterDataModifiedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMCharacterDataModifiedReply, error)
	rpcc.Stream
}

// DOMCharacterDataModifiedReply mirrors DOMCharacterDataModified event.
type DOMCharacterDataModifiedReply struct {
	NodeID        cdptype.DOMNodeID `json:"nodeId"`        // Id of the node that has changed.
	CharacterData string            `json:"characterData"` // New text value.
}

// DOMChildNodeCountUpdatedClient receives ChildNodeCountUpdated events.
type DOMChildNodeCountUpdatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMChildNodeCountUpdatedReply, error)
	rpcc.Stream
}

// DOMChildNodeCountUpdatedReply fired when Container's child node count has changed.
type DOMChildNodeCountUpdatedReply struct {
	NodeID         cdptype.DOMNodeID `json:"nodeId"`         // Id of the node that has changed.
	ChildNodeCount int               `json:"childNodeCount"` // New node count.
}

// DOMChildNodeInsertedClient receives ChildNodeInserted events.
type DOMChildNodeInsertedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMChildNodeInsertedReply, error)
	rpcc.Stream
}

// DOMChildNodeInsertedReply mirrors DOMNodeInserted event.
type DOMChildNodeInsertedReply struct {
	ParentNodeID   cdptype.DOMNodeID `json:"parentNodeId"`   // Id of the node that has changed.
	PreviousNodeID cdptype.DOMNodeID `json:"previousNodeId"` // If of the previous siblint.
	Node           cdptype.DOMNode   `json:"node"`           // Inserted node data.
}

// DOMChildNodeRemovedClient receives ChildNodeRemoved events.
type DOMChildNodeRemovedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMChildNodeRemovedReply, error)
	rpcc.Stream
}

// DOMChildNodeRemovedReply mirrors DOMNodeRemoved event.
type DOMChildNodeRemovedReply struct {
	ParentNodeID cdptype.DOMNodeID `json:"parentNodeId"` // Parent id.
	NodeID       cdptype.DOMNodeID `json:"nodeId"`       // Id of the node that has been removed.
}

// DOMShadowRootPushedClient receives ShadowRootPushed events.
type DOMShadowRootPushedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMShadowRootPushedReply, error)
	rpcc.Stream
}

// DOMShadowRootPushedReply called when shadow root is pushed into the element.
type DOMShadowRootPushedReply struct {
	HostID cdptype.DOMNodeID `json:"hostId"` // Host element id.
	Root   cdptype.DOMNode   `json:"root"`   // Shadow root.
}

// DOMShadowRootPoppedClient receives ShadowRootPopped events.
type DOMShadowRootPoppedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMShadowRootPoppedReply, error)
	rpcc.Stream
}

// DOMShadowRootPoppedReply called when shadow root is popped from the element.
type DOMShadowRootPoppedReply struct {
	HostID cdptype.DOMNodeID `json:"hostId"` // Host element id.
	RootID cdptype.DOMNodeID `json:"rootId"` // Shadow root id.
}

// DOMPseudoElementAddedClient receives PseudoElementAdded events.
type DOMPseudoElementAddedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMPseudoElementAddedReply, error)
	rpcc.Stream
}

// DOMPseudoElementAddedReply called when a pseudo element is added to an element.
type DOMPseudoElementAddedReply struct {
	ParentID      cdptype.DOMNodeID `json:"parentId"`      // Pseudo element's parent element id.
	PseudoElement cdptype.DOMNode   `json:"pseudoElement"` // The added pseudo element.
}

// DOMPseudoElementRemovedClient receives PseudoElementRemoved events.
type DOMPseudoElementRemovedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMPseudoElementRemovedReply, error)
	rpcc.Stream
}

// DOMPseudoElementRemovedReply called when a pseudo element is removed from an element.
type DOMPseudoElementRemovedReply struct {
	ParentID        cdptype.DOMNodeID `json:"parentId"`        // Pseudo element's parent element id.
	PseudoElementID cdptype.DOMNodeID `json:"pseudoElementId"` // The removed pseudo element id.
}

// DOMDistributedNodesUpdatedClient receives DistributedNodesUpdated events.
type DOMDistributedNodesUpdatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMDistributedNodesUpdatedReply, error)
	rpcc.Stream
}

// DOMDistributedNodesUpdatedReply called when distribution is changed.
type DOMDistributedNodesUpdatedReply struct {
	InsertionPointID cdptype.DOMNodeID        `json:"insertionPointId"` // Insertion point where distributed nodes were updated.
	DistributedNodes []cdptype.DOMBackendNode `json:"distributedNodes"` // Distributed nodes for given insertion point.
}

// DOMStorageItemsClearedClient receives DOMStorageItemsCleared events.
type DOMStorageItemsClearedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMStorageItemsClearedReply, error)
	rpcc.Stream
}

// DOMStorageItemsClearedReply
type DOMStorageItemsClearedReply struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
}

// DOMStorageItemRemovedClient receives DOMStorageItemRemoved events.
type DOMStorageItemRemovedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMStorageItemRemovedReply, error)
	rpcc.Stream
}

// DOMStorageItemRemovedReply
type DOMStorageItemRemovedReply struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
	Key       string                      `json:"key"`       //
}

// DOMStorageItemAddedClient receives DOMStorageItemAdded events.
type DOMStorageItemAddedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMStorageItemAddedReply, error)
	rpcc.Stream
}

// DOMStorageItemAddedReply
type DOMStorageItemAddedReply struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
	Key       string                      `json:"key"`       //
	NewValue  string                      `json:"newValue"`  //
}

// DOMStorageItemUpdatedClient receives DOMStorageItemUpdated events.
type DOMStorageItemUpdatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DOMStorageItemUpdatedReply, error)
	rpcc.Stream
}

// DOMStorageItemUpdatedReply
type DOMStorageItemUpdatedReply struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
	Key       string                      `json:"key"`       //
	OldValue  string                      `json:"oldValue"`  //
	NewValue  string                      `json:"newValue"`  //
}

// DatabaseAddDatabaseClient receives AddDatabase events.
type DatabaseAddDatabaseClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DatabaseAddDatabaseReply, error)
	rpcc.Stream
}

// DatabaseAddDatabaseReply
type DatabaseAddDatabaseReply struct {
	Database cdptype.Database `json:"database"` //
}

// DebuggerScriptParsedClient receives ScriptParsed events.
type DebuggerScriptParsedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DebuggerScriptParsedReply, error)
	rpcc.Stream
}

// DebuggerScriptParsedReply fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.
type DebuggerScriptParsedReply struct {
	ScriptID                cdptype.RuntimeScriptID           `json:"scriptId"`                          // Identifier of the script parsed.
	URL                     string                            `json:"url"`                               // URL or name of the script parsed (if any).
	StartLine               int                               `json:"startLine"`                         // Line offset of the script within the resource with given URL (for script tags).
	StartColumn             int                               `json:"startColumn"`                       // Column offset of the script within the resource with given URL.
	EndLine                 int                               `json:"endLine"`                           // Last line of the script.
	EndColumn               int                               `json:"endColumn"`                         // Length of the last line of the script.
	ExecutionContextID      cdptype.RuntimeExecutionContextID `json:"executionContextId"`                // Specifies script creation context.
	Hash                    string                            `json:"hash"`                              // Content hash of the script.
	ExecutionContextAuxData json.RawMessage                   `json:"executionContextAuxData,omitempty"` // Embedder-specific auxiliary data.
	IsLiveEdit              *bool                             `json:"isLiveEdit,omitempty"`              // True, if this script is generated as a result of the live edit operation.
	SourceMapURL            *string                           `json:"sourceMapURL,omitempty"`            // URL of source map associated with script (if any).
	HasSourceURL            *bool                             `json:"hasSourceURL,omitempty"`            // True, if this script has sourceURL.
	IsModule                *bool                             `json:"isModule,omitempty"`                // True, if this script is ES6 module.
	Length                  *int                              `json:"length,omitempty"`                  // This script length.
	StackTrace              *cdptype.RuntimeStackTrace        `json:"stackTrace,omitempty"`              // JavaScript top stack frame of where the script parsed event was triggered if available.
}

// DebuggerScriptFailedToParseClient receives ScriptFailedToParse events.
type DebuggerScriptFailedToParseClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DebuggerScriptFailedToParseReply, error)
	rpcc.Stream
}

// DebuggerScriptFailedToParseReply fired when virtual machine fails to parse the script.
type DebuggerScriptFailedToParseReply struct {
	ScriptID                cdptype.RuntimeScriptID           `json:"scriptId"`                          // Identifier of the script parsed.
	URL                     string                            `json:"url"`                               // URL or name of the script parsed (if any).
	StartLine               int                               `json:"startLine"`                         // Line offset of the script within the resource with given URL (for script tags).
	StartColumn             int                               `json:"startColumn"`                       // Column offset of the script within the resource with given URL.
	EndLine                 int                               `json:"endLine"`                           // Last line of the script.
	EndColumn               int                               `json:"endColumn"`                         // Length of the last line of the script.
	ExecutionContextID      cdptype.RuntimeExecutionContextID `json:"executionContextId"`                // Specifies script creation context.
	Hash                    string                            `json:"hash"`                              // Content hash of the script.
	ExecutionContextAuxData json.RawMessage                   `json:"executionContextAuxData,omitempty"` // Embedder-specific auxiliary data.
	SourceMapURL            *string                           `json:"sourceMapURL,omitempty"`            // URL of source map associated with script (if any).
	HasSourceURL            *bool                             `json:"hasSourceURL,omitempty"`            // True, if this script has sourceURL.
	IsModule                *bool                             `json:"isModule,omitempty"`                // True, if this script is ES6 module.
	Length                  *int                              `json:"length,omitempty"`                  // This script length.
	StackTrace              *cdptype.RuntimeStackTrace        `json:"stackTrace,omitempty"`              // JavaScript top stack frame of where the script parsed event was triggered if available.
}

// DebuggerBreakpointResolvedClient receives BreakpointResolved events.
type DebuggerBreakpointResolvedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DebuggerBreakpointResolvedReply, error)
	rpcc.Stream
}

// DebuggerBreakpointResolvedReply fired when breakpoint is resolved to an actual script and location.
type DebuggerBreakpointResolvedReply struct {
	BreakpointID cdptype.DebuggerBreakpointID `json:"breakpointId"` // Breakpoint unique identifier.
	Location     cdptype.DebuggerLocation     `json:"location"`     // Actual breakpoint location.
}

// DebuggerPausedClient receives Paused events.
type DebuggerPausedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DebuggerPausedReply, error)
	rpcc.Stream
}

// DebuggerPausedReply fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
type DebuggerPausedReply struct {
	CallFrames      []cdptype.DebuggerCallFrame `json:"callFrames"`                // Call stack the virtual machine stopped on.
	Reason          string                      `json:"reason"`                    // Pause reason.
	Data            json.RawMessage             `json:"data,omitempty"`            // Object containing break-specific auxiliary properties.
	HitBreakpoints  []string                    `json:"hitBreakpoints,omitempty"`  // Hit breakpoints IDs
	AsyncStackTrace *cdptype.RuntimeStackTrace  `json:"asyncStackTrace,omitempty"` // Async stack trace, if any.
}

// DebuggerResumedClient receives Resumed events.
type DebuggerResumedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DebuggerResumedReply, error)
	rpcc.Stream
}

// DebuggerResumedReply fired when the virtual machine resumed execution.
type DebuggerResumedReply struct{}

// EmulationVirtualTimeBudgetExpiredClient receives VirtualTimeBudgetExpired events.
type EmulationVirtualTimeBudgetExpiredClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*EmulationVirtualTimeBudgetExpiredReply, error)
	rpcc.Stream
}

// EmulationVirtualTimeBudgetExpiredReply notification sent after the virual time budget for the current VirtualTimePolicy has run out.
type EmulationVirtualTimeBudgetExpiredReply struct{}

// HeapProfilerAddHeapSnapshotChunkClient receives AddHeapSnapshotChunk events.
type HeapProfilerAddHeapSnapshotChunkClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*HeapProfilerAddHeapSnapshotChunkReply, error)
	rpcc.Stream
}

// HeapProfilerAddHeapSnapshotChunkReply
type HeapProfilerAddHeapSnapshotChunkReply struct {
	Chunk string `json:"chunk"` //
}

// HeapProfilerResetProfilesClient receives ResetProfiles events.
type HeapProfilerResetProfilesClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*HeapProfilerResetProfilesReply, error)
	rpcc.Stream
}

// HeapProfilerResetProfilesReply
type HeapProfilerResetProfilesReply struct{}

// HeapProfilerReportHeapSnapshotProgressClient receives ReportHeapSnapshotProgress events.
type HeapProfilerReportHeapSnapshotProgressClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*HeapProfilerReportHeapSnapshotProgressReply, error)
	rpcc.Stream
}

// HeapProfilerReportHeapSnapshotProgressReply
type HeapProfilerReportHeapSnapshotProgressReply struct {
	Done     int   `json:"done"`               //
	Total    int   `json:"total"`              //
	Finished *bool `json:"finished,omitempty"` //
}

// HeapProfilerLastSeenObjectIDClient receives LastSeenObjectID events.
type HeapProfilerLastSeenObjectIDClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*HeapProfilerLastSeenObjectIDReply, error)
	rpcc.Stream
}

// HeapProfilerLastSeenObjectIDReply if heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
type HeapProfilerLastSeenObjectIDReply struct {
	LastSeenObjectID int               `json:"lastSeenObjectId"` //
	Timestamp        cdptype.Timestamp `json:"timestamp"`        //
}

// HeapProfilerHeapStatsUpdateClient receives HeapStatsUpdate events.
type HeapProfilerHeapStatsUpdateClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*HeapProfilerHeapStatsUpdateReply, error)
	rpcc.Stream
}

// HeapProfilerHeapStatsUpdateReply if heap objects tracking has been started then backend may send update for one or more fragments
type HeapProfilerHeapStatsUpdateReply struct {
	StatsUpdate []int `json:"statsUpdate"` // An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment.
}

// InspectorDetachedClient receives Detached events.
type InspectorDetachedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*InspectorDetachedReply, error)
	rpcc.Stream
}

// InspectorDetachedReply fired when remote debugging connection is about to be terminated. Contains detach reason.
type InspectorDetachedReply struct {
	Reason string `json:"reason"` // The reason why connection has been terminated.
}

// InspectorTargetCrashedClient receives TargetCrashed events.
type InspectorTargetCrashedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*InspectorTargetCrashedReply, error)
	rpcc.Stream
}

// InspectorTargetCrashedReply fired when debugging target has crashed
type InspectorTargetCrashedReply struct{}

// LayerTreeDidChangeClient receives LayerTreeDidChange events.
type LayerTreeDidChangeClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*LayerTreeDidChangeReply, error)
	rpcc.Stream
}

// LayerTreeDidChangeReply
type LayerTreeDidChangeReply struct {
	Layers []cdptype.LayerTreeLayer `json:"layers,omitempty"` // Layer tree, absent if not in the comspositing mode.
}

// LayerTreeLayerPaintedClient receives LayerPainted events.
type LayerTreeLayerPaintedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*LayerTreeLayerPaintedReply, error)
	rpcc.Stream
}

// LayerTreeLayerPaintedReply
type LayerTreeLayerPaintedReply struct {
	LayerID cdptype.LayerTreeLayerID `json:"layerId"` // The id of the painted layer.
	Clip    cdptype.DOMRect          `json:"clip"`    // Clip rectangle.
}

// LogEntryAddedClient receives EntryAdded events.
type LogEntryAddedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*LogEntryAddedReply, error)
	rpcc.Stream
}

// LogEntryAddedReply issued when new message was logged.
type LogEntryAddedReply struct {
	Entry cdptype.LogEntry `json:"entry"` // The entry.
}

// NetworkResourceChangedPriorityClient receives ResourceChangedPriority events.
type NetworkResourceChangedPriorityClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkResourceChangedPriorityReply, error)
	rpcc.Stream
}

// NetworkResourceChangedPriorityReply fired when resource loading priority is changed
type NetworkResourceChangedPriorityReply struct {
	RequestID   cdptype.NetworkRequestID        `json:"requestId"`   // Request identifier.
	NewPriority cdptype.NetworkResourcePriority `json:"newPriority"` // New priority
	Timestamp   cdptype.NetworkTimestamp        `json:"timestamp"`   // Timestamp.
}

// NetworkRequestWillBeSentClient receives RequestWillBeSent events.
type NetworkRequestWillBeSentClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkRequestWillBeSentReply, error)
	rpcc.Stream
}

// NetworkRequestWillBeSentReply fired when page is about to send HTTP request.
type NetworkRequestWillBeSentReply struct {
	RequestID        cdptype.NetworkRequestID `json:"requestId"`                  // Request identifier.
	FrameID          cdptype.PageFrameID      `json:"frameId"`                    // Frame identifier.
	LoaderID         cdptype.NetworkLoaderID  `json:"loaderId"`                   // Loader identifier.
	DocumentURL      string                   `json:"documentURL"`                // URL of the document this request is loaded for.
	Request          cdptype.NetworkRequest   `json:"request"`                    // Request data.
	Timestamp        cdptype.NetworkTimestamp `json:"timestamp"`                  // Timestamp.
	WallTime         cdptype.NetworkTimestamp `json:"wallTime"`                   // UTC Timestamp.
	Initiator        cdptype.NetworkInitiator `json:"initiator"`                  // Request initiator.
	RedirectResponse *cdptype.NetworkResponse `json:"redirectResponse,omitempty"` // Redirect response data.
	Type             cdptype.PageResourceType `json:"type,omitempty"`             // Type of this resource.
}

// NetworkRequestServedFromCacheClient receives RequestServedFromCache events.
type NetworkRequestServedFromCacheClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkRequestServedFromCacheReply, error)
	rpcc.Stream
}

// NetworkRequestServedFromCacheReply fired if request ended up loading from cache.
type NetworkRequestServedFromCacheReply struct {
	RequestID cdptype.NetworkRequestID `json:"requestId"` // Request identifier.
}

// NetworkResponseReceivedClient receives ResponseReceived events.
type NetworkResponseReceivedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkResponseReceivedReply, error)
	rpcc.Stream
}

// NetworkResponseReceivedReply fired when HTTP response is available.
type NetworkResponseReceivedReply struct {
	RequestID cdptype.NetworkRequestID `json:"requestId"` // Request identifier.
	FrameID   cdptype.PageFrameID      `json:"frameId"`   // Frame identifier.
	LoaderID  cdptype.NetworkLoaderID  `json:"loaderId"`  // Loader identifier.
	Timestamp cdptype.NetworkTimestamp `json:"timestamp"` // Timestamp.
	Type      cdptype.PageResourceType `json:"type"`      // Resource type.
	Response  cdptype.NetworkResponse  `json:"response"`  // Response data.
}

// NetworkDataReceivedClient receives DataReceived events.
type NetworkDataReceivedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkDataReceivedReply, error)
	rpcc.Stream
}

// NetworkDataReceivedReply fired when data chunk was received over the network.
type NetworkDataReceivedReply struct {
	RequestID         cdptype.NetworkRequestID `json:"requestId"`         // Request identifier.
	Timestamp         cdptype.NetworkTimestamp `json:"timestamp"`         // Timestamp.
	DataLength        int                      `json:"dataLength"`        // Data chunk length.
	EncodedDataLength int                      `json:"encodedDataLength"` // Actual bytes received (might be less than dataLength for compressed encodings).
}

// NetworkLoadingFinishedClient receives LoadingFinished events.
type NetworkLoadingFinishedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkLoadingFinishedReply, error)
	rpcc.Stream
}

// NetworkLoadingFinishedReply fired when HTTP request has finished loading.
type NetworkLoadingFinishedReply struct {
	RequestID         cdptype.NetworkRequestID `json:"requestId"`         // Request identifier.
	Timestamp         cdptype.NetworkTimestamp `json:"timestamp"`         // Timestamp.
	EncodedDataLength float64                  `json:"encodedDataLength"` // Total number of bytes received for this request.
}

// NetworkLoadingFailedClient receives LoadingFailed events.
type NetworkLoadingFailedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkLoadingFailedReply, error)
	rpcc.Stream
}

// NetworkLoadingFailedReply fired when HTTP request has failed to load.
type NetworkLoadingFailedReply struct {
	RequestID     cdptype.NetworkRequestID     `json:"requestId"`               // Request identifier.
	Timestamp     cdptype.NetworkTimestamp     `json:"timestamp"`               // Timestamp.
	Type          cdptype.PageResourceType     `json:"type"`                    // Resource type.
	ErrorText     string                       `json:"errorText"`               // User friendly error message.
	Canceled      *bool                        `json:"canceled,omitempty"`      // True if loading was canceled.
	BlockedReason cdptype.NetworkBlockedReason `json:"blockedReason,omitempty"` // The reason why loading was blocked, if any.
}

// NetworkWebSocketWillSendHandshakeRequestClient receives WebSocketWillSendHandshakeRequest events.
type NetworkWebSocketWillSendHandshakeRequestClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkWebSocketWillSendHandshakeRequestReply, error)
	rpcc.Stream
}

// NetworkWebSocketWillSendHandshakeRequestReply fired when WebSocket is about to initiate handshake.
type NetworkWebSocketWillSendHandshakeRequestReply struct {
	RequestID cdptype.NetworkRequestID        `json:"requestId"` // Request identifier.
	Timestamp cdptype.NetworkTimestamp        `json:"timestamp"` // Timestamp.
	WallTime  cdptype.NetworkTimestamp        `json:"wallTime"`  // UTC Timestamp.
	Request   cdptype.NetworkWebSocketRequest `json:"request"`   // WebSocket request data.
}

// NetworkWebSocketHandshakeResponseReceivedClient receives WebSocketHandshakeResponseReceived events.
type NetworkWebSocketHandshakeResponseReceivedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkWebSocketHandshakeResponseReceivedReply, error)
	rpcc.Stream
}

// NetworkWebSocketHandshakeResponseReceivedReply fired when WebSocket handshake response becomes available.
type NetworkWebSocketHandshakeResponseReceivedReply struct {
	RequestID cdptype.NetworkRequestID         `json:"requestId"` // Request identifier.
	Timestamp cdptype.NetworkTimestamp         `json:"timestamp"` // Timestamp.
	Response  cdptype.NetworkWebSocketResponse `json:"response"`  // WebSocket response data.
}

// NetworkWebSocketCreatedClient receives WebSocketCreated events.
type NetworkWebSocketCreatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkWebSocketCreatedReply, error)
	rpcc.Stream
}

// NetworkWebSocketCreatedReply fired upon WebSocket creation.
type NetworkWebSocketCreatedReply struct {
	RequestID cdptype.NetworkRequestID  `json:"requestId"`           // Request identifier.
	URL       string                    `json:"url"`                 // WebSocket request URL.
	Initiator *cdptype.NetworkInitiator `json:"initiator,omitempty"` // Request initiator.
}

// NetworkWebSocketClosedClient receives WebSocketClosed events.
type NetworkWebSocketClosedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkWebSocketClosedReply, error)
	rpcc.Stream
}

// NetworkWebSocketClosedReply fired when WebSocket is closed.
type NetworkWebSocketClosedReply struct {
	RequestID cdptype.NetworkRequestID `json:"requestId"` // Request identifier.
	Timestamp cdptype.NetworkTimestamp `json:"timestamp"` // Timestamp.
}

// NetworkWebSocketFrameReceivedClient receives WebSocketFrameReceived events.
type NetworkWebSocketFrameReceivedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkWebSocketFrameReceivedReply, error)
	rpcc.Stream
}

// NetworkWebSocketFrameReceivedReply fired when WebSocket frame is received.
type NetworkWebSocketFrameReceivedReply struct {
	RequestID cdptype.NetworkRequestID      `json:"requestId"` // Request identifier.
	Timestamp cdptype.NetworkTimestamp      `json:"timestamp"` // Timestamp.
	Response  cdptype.NetworkWebSocketFrame `json:"response"`  // WebSocket response data.
}

// NetworkWebSocketFrameErrorClient receives WebSocketFrameError events.
type NetworkWebSocketFrameErrorClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkWebSocketFrameErrorReply, error)
	rpcc.Stream
}

// NetworkWebSocketFrameErrorReply fired when WebSocket frame error occurs.
type NetworkWebSocketFrameErrorReply struct {
	RequestID    cdptype.NetworkRequestID `json:"requestId"`    // Request identifier.
	Timestamp    cdptype.NetworkTimestamp `json:"timestamp"`    // Timestamp.
	ErrorMessage string                   `json:"errorMessage"` // WebSocket frame error message.
}

// NetworkWebSocketFrameSentClient receives WebSocketFrameSent events.
type NetworkWebSocketFrameSentClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkWebSocketFrameSentReply, error)
	rpcc.Stream
}

// NetworkWebSocketFrameSentReply fired when WebSocket frame is sent.
type NetworkWebSocketFrameSentReply struct {
	RequestID cdptype.NetworkRequestID      `json:"requestId"` // Request identifier.
	Timestamp cdptype.NetworkTimestamp      `json:"timestamp"` // Timestamp.
	Response  cdptype.NetworkWebSocketFrame `json:"response"`  // WebSocket response data.
}

// NetworkEventSourceMessageReceivedClient receives EventSourceMessageReceived events.
type NetworkEventSourceMessageReceivedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkEventSourceMessageReceivedReply, error)
	rpcc.Stream
}

// NetworkEventSourceMessageReceivedReply fired when EventSource message is received.
type NetworkEventSourceMessageReceivedReply struct {
	RequestID cdptype.NetworkRequestID `json:"requestId"` // Request identifier.
	Timestamp cdptype.NetworkTimestamp `json:"timestamp"` // Timestamp.
	EventName string                   `json:"eventName"` // Message type.
	EventID   string                   `json:"eventId"`   // Message identifier.
	Data      string                   `json:"data"`      // Message content.
}

// NetworkRequestInterceptedClient receives RequestIntercepted events.
type NetworkRequestInterceptedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*NetworkRequestInterceptedReply, error)
	rpcc.Stream
}

// NetworkRequestInterceptedReply details of an intercepted HTTP request, which must be either allowed, blocked, modified or mocked.
type NetworkRequestInterceptedReply struct {
	InterceptionID     cdptype.NetworkInterceptionID `json:"interceptionId"`               // Each request the page makes will have a unique id, however if any redirects are encountered while processing that fetch, they will be reported with the same id as the original fetch. Likewise if HTTP authentication is needed then the same fetch id will be used.
	Request            cdptype.NetworkRequest        `json:"request"`                      //
	ResourceType       cdptype.PageResourceType      `json:"resourceType"`                 // How the requested resource will be used.
	RedirectHeaders    cdptype.NetworkHeaders        `json:"redirectHeaders,omitempty"`    // HTTP response headers, only sent if a redirect was intercepted.
	RedirectStatusCode *int                          `json:"redirectStatusCode,omitempty"` // HTTP response code, only sent if a redirect was intercepted.
	RedirectURL        *string                       `json:"redirectUrl,omitempty"`        // Redirect location, only sent if a redirect was intercepted.
	AuthChallenge      *cdptype.NetworkAuthChallenge `json:"authChallenge,omitempty"`      // Details of the Authorization Challenge encountered. If this is set then continueInterceptedRequest must contain an authChallengeResponse.
}

// OverlayNodeHighlightRequestedClient receives NodeHighlightRequested events.
type OverlayNodeHighlightRequestedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*OverlayNodeHighlightRequestedReply, error)
	rpcc.Stream
}

// OverlayNodeHighlightRequestedReply fired when the node should be highlighted. This happens after call to setInspectMode.
type OverlayNodeHighlightRequestedReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` //
}

// OverlayInspectNodeRequestedClient receives InspectNodeRequested events.
type OverlayInspectNodeRequestedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*OverlayInspectNodeRequestedReply, error)
	rpcc.Stream
}

// OverlayInspectNodeRequestedReply fired when the node should be inspected. This happens after call to setInspectMode or when user manually inspects an element.
type OverlayInspectNodeRequestedReply struct {
	BackendNodeID cdptype.DOMBackendNodeID `json:"backendNodeId"` // Id of the node to inspect.
}

// PageDOMContentEventFiredClient receives DOMContentEventFired events.
type PageDOMContentEventFiredClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageDOMContentEventFiredReply, error)
	rpcc.Stream
}

// PageDOMContentEventFiredReply
type PageDOMContentEventFiredReply struct {
	Timestamp cdptype.Timestamp `json:"timestamp"` //
}

// PageLoadEventFiredClient receives LoadEventFired events.
type PageLoadEventFiredClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageLoadEventFiredReply, error)
	rpcc.Stream
}

// PageLoadEventFiredReply
type PageLoadEventFiredReply struct {
	Timestamp cdptype.Timestamp `json:"timestamp"` //
}

// PageFrameAttachedClient receives FrameAttached events.
type PageFrameAttachedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageFrameAttachedReply, error)
	rpcc.Stream
}

// PageFrameAttachedReply fired when frame has been attached to its parent.
type PageFrameAttachedReply struct {
	FrameID       cdptype.PageFrameID        `json:"frameId"`         // Id of the frame that has been attached.
	ParentFrameID cdptype.PageFrameID        `json:"parentFrameId"`   // Parent frame identifier.
	Stack         *cdptype.RuntimeStackTrace `json:"stack,omitempty"` // JavaScript stack trace of when frame was attached, only set if frame initiated from script.
}

// PageFrameNavigatedClient receives FrameNavigated events.
type PageFrameNavigatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageFrameNavigatedReply, error)
	rpcc.Stream
}

// PageFrameNavigatedReply fired once navigation of the frame has completed. Frame is now associated with the new loader.
type PageFrameNavigatedReply struct {
	Frame cdptype.PageFrame `json:"frame"` // Frame object.
}

// PageFrameDetachedClient receives FrameDetached events.
type PageFrameDetachedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageFrameDetachedReply, error)
	rpcc.Stream
}

// PageFrameDetachedReply fired when frame has been detached from its parent.
type PageFrameDetachedReply struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Id of the frame that has been detached.
}

// PageFrameStartedLoadingClient receives FrameStartedLoading events.
type PageFrameStartedLoadingClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageFrameStartedLoadingReply, error)
	rpcc.Stream
}

// PageFrameStartedLoadingReply fired when frame has started loading.
type PageFrameStartedLoadingReply struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Id of the frame that has started loading.
}

// PageFrameStoppedLoadingClient receives FrameStoppedLoading events.
type PageFrameStoppedLoadingClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageFrameStoppedLoadingReply, error)
	rpcc.Stream
}

// PageFrameStoppedLoadingReply fired when frame has stopped loading.
type PageFrameStoppedLoadingReply struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Id of the frame that has stopped loading.
}

// PageFrameScheduledNavigationClient receives FrameScheduledNavigation events.
type PageFrameScheduledNavigationClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageFrameScheduledNavigationReply, error)
	rpcc.Stream
}

// PageFrameScheduledNavigationReply fired when frame schedules a potential navigation.
type PageFrameScheduledNavigationReply struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Id of the frame that has scheduled a navigation.
	Delay   float64             `json:"delay"`   // Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start.
}

// PageFrameClearedScheduledNavigationClient receives FrameClearedScheduledNavigation events.
type PageFrameClearedScheduledNavigationClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageFrameClearedScheduledNavigationReply, error)
	rpcc.Stream
}

// PageFrameClearedScheduledNavigationReply fired when frame no longer has a scheduled navigation.
type PageFrameClearedScheduledNavigationReply struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Id of the frame that has cleared its scheduled navigation.
}

// PageFrameResizedClient receives FrameResized events.
type PageFrameResizedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageFrameResizedReply, error)
	rpcc.Stream
}

// PageFrameResizedReply
type PageFrameResizedReply struct{}

// PageJavascriptDialogOpeningClient receives JavascriptDialogOpening events.
type PageJavascriptDialogOpeningClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageJavascriptDialogOpeningReply, error)
	rpcc.Stream
}

// PageJavascriptDialogOpeningReply fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.
type PageJavascriptDialogOpeningReply struct {
	Message string                 `json:"message"` // Message that will be displayed by the dialog.
	Type    cdptype.PageDialogType `json:"type"`    // Dialog type.
}

// PageJavascriptDialogClosedClient receives JavascriptDialogClosed events.
type PageJavascriptDialogClosedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageJavascriptDialogClosedReply, error)
	rpcc.Stream
}

// PageJavascriptDialogClosedReply fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed.
type PageJavascriptDialogClosedReply struct {
	Result bool `json:"result"` // Whether dialog was confirmed.
}

// PageScreencastFrameClient receives ScreencastFrame events.
type PageScreencastFrameClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageScreencastFrameReply, error)
	rpcc.Stream
}

// PageScreencastFrameReply compressed image data requested by the startScreencast.
type PageScreencastFrameReply struct {
	Data      string                              `json:"data"`      // Base64-encoded compressed image.
	Metadata  cdptype.PageScreencastFrameMetadata `json:"metadata"`  // Screencast frame metadata.
	SessionID int                                 `json:"sessionId"` // Frame number.
}

// PageScreencastVisibilityChangedClient receives ScreencastVisibilityChanged events.
type PageScreencastVisibilityChangedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageScreencastVisibilityChangedReply, error)
	rpcc.Stream
}

// PageScreencastVisibilityChangedReply fired when the page with currently enabled screencast was shown or hidden .
type PageScreencastVisibilityChangedReply struct {
	Visible bool `json:"visible"` // True if the page is visible.
}

// PageInterstitialShownClient receives InterstitialShown events.
type PageInterstitialShownClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageInterstitialShownReply, error)
	rpcc.Stream
}

// PageInterstitialShownReply fired when interstitial page was shown
type PageInterstitialShownReply struct{}

// PageInterstitialHiddenClient receives InterstitialHidden events.
type PageInterstitialHiddenClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageInterstitialHiddenReply, error)
	rpcc.Stream
}

// PageInterstitialHiddenReply fired when interstitial page was hidden
type PageInterstitialHiddenReply struct{}

// PageNavigationRequestedClient receives NavigationRequested events.
type PageNavigationRequestedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*PageNavigationRequestedReply, error)
	rpcc.Stream
}

// PageNavigationRequestedReply fired when a navigation is started if navigation throttles are enabled.  The navigation will be deferred until processNavigation is called.
type PageNavigationRequestedReply struct {
	IsInMainFrame bool   `json:"isInMainFrame"` // Whether the navigation is taking place in the main frame or in a subframe.
	IsRedirect    bool   `json:"isRedirect"`    // Whether the navigation has encountered a server redirect or not.
	NavigationID  int    `json:"navigationId"`  //
	URL           string `json:"url"`           // URL of requested navigation.
}

// ProfilerConsoleProfileStartedClient receives ConsoleProfileStarted events.
type ProfilerConsoleProfileStartedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*ProfilerConsoleProfileStartedReply, error)
	rpcc.Stream
}

// ProfilerConsoleProfileStartedReply sent when new profile recording is started using console.profile() call.
type ProfilerConsoleProfileStartedReply struct {
	ID       string                   `json:"id"`              //
	Location cdptype.DebuggerLocation `json:"location"`        // Location of console.profile().
	Title    *string                  `json:"title,omitempty"` // Profile title passed as an argument to console.profile().
}

// ProfilerConsoleProfileFinishedClient receives ConsoleProfileFinished events.
type ProfilerConsoleProfileFinishedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*ProfilerConsoleProfileFinishedReply, error)
	rpcc.Stream
}

// ProfilerConsoleProfileFinishedReply
type ProfilerConsoleProfileFinishedReply struct {
	ID       string                   `json:"id"`              //
	Location cdptype.DebuggerLocation `json:"location"`        // Location of console.profileEnd().
	Profile  cdptype.ProfilerProfile  `json:"profile"`         //
	Title    *string                  `json:"title,omitempty"` // Profile title passed as an argument to console.profile().
}

// RuntimeExecutionContextCreatedClient receives ExecutionContextCreated events.
type RuntimeExecutionContextCreatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*RuntimeExecutionContextCreatedReply, error)
	rpcc.Stream
}

// RuntimeExecutionContextCreatedReply issued when new execution context is created.
type RuntimeExecutionContextCreatedReply struct {
	Context cdptype.RuntimeExecutionContextDescription `json:"context"` // A newly created execution context.
}

// RuntimeExecutionContextDestroyedClient receives ExecutionContextDestroyed events.
type RuntimeExecutionContextDestroyedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*RuntimeExecutionContextDestroyedReply, error)
	rpcc.Stream
}

// RuntimeExecutionContextDestroyedReply issued when execution context is destroyed.
type RuntimeExecutionContextDestroyedReply struct {
	ExecutionContextID cdptype.RuntimeExecutionContextID `json:"executionContextId"` // Id of the destroyed context
}

// RuntimeExecutionContextsClearedClient receives ExecutionContextsCleared events.
type RuntimeExecutionContextsClearedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*RuntimeExecutionContextsClearedReply, error)
	rpcc.Stream
}

// RuntimeExecutionContextsClearedReply issued when all executionContexts were cleared in browser
type RuntimeExecutionContextsClearedReply struct{}

// RuntimeExceptionThrownClient receives ExceptionThrown events.
type RuntimeExceptionThrownClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*RuntimeExceptionThrownReply, error)
	rpcc.Stream
}

// RuntimeExceptionThrownReply issued when exception was thrown and unhandled.
type RuntimeExceptionThrownReply struct {
	Timestamp        cdptype.RuntimeTimestamp        `json:"timestamp"`        // Timestamp of the exception.
	ExceptionDetails cdptype.RuntimeExceptionDetails `json:"exceptionDetails"` //
}

// RuntimeExceptionRevokedClient receives ExceptionRevoked events.
type RuntimeExceptionRevokedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*RuntimeExceptionRevokedReply, error)
	rpcc.Stream
}

// RuntimeExceptionRevokedReply issued when unhandled exception was revoked.
type RuntimeExceptionRevokedReply struct {
	Reason      string `json:"reason"`      // Reason describing why exception was revoked.
	ExceptionID int    `json:"exceptionId"` // The id of revoked exception, as reported in exceptionUnhandled.
}

// RuntimeConsoleAPICalledClient receives ConsoleAPICalled events.
type RuntimeConsoleAPICalledClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*RuntimeConsoleAPICalledReply, error)
	rpcc.Stream
}

// RuntimeConsoleAPICalledReply issued when console API was called.
type RuntimeConsoleAPICalledReply struct {
	Type               string                            `json:"type"`                 // Type of the call.
	Args               []cdptype.RuntimeRemoteObject     `json:"args"`                 // Call arguments.
	ExecutionContextID cdptype.RuntimeExecutionContextID `json:"executionContextId"`   // Identifier of the context where the call was made.
	Timestamp          cdptype.RuntimeTimestamp          `json:"timestamp"`            // Call timestamp.
	StackTrace         *cdptype.RuntimeStackTrace        `json:"stackTrace,omitempty"` // Stack trace captured when the call was made.
	Context            *string                           `json:"context,omitempty"`    // Console context descriptor for calls on non-default console context (not console.*): 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call on named context.
}

// RuntimeInspectRequestedClient receives InspectRequested events.
type RuntimeInspectRequestedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*RuntimeInspectRequestedReply, error)
	rpcc.Stream
}

// RuntimeInspectRequestedReply issued when object should be inspected (for example, as a result of inspect() command line API call).
type RuntimeInspectRequestedReply struct {
	Object cdptype.RuntimeRemoteObject `json:"object"` //
	Hints  json.RawMessage             `json:"hints"`  //
}

// SecurityStateChangedClient receives SecurityStateChanged events.
type SecurityStateChangedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*SecurityStateChangedReply, error)
	rpcc.Stream
}

// SecurityStateChangedReply the security state of the page changed.
type SecurityStateChangedReply struct {
	SecurityState         cdptype.SecurityState                 `json:"securityState"`         // Security state.
	SchemeIsCryptographic bool                                  `json:"schemeIsCryptographic"` // True if the page was loaded over cryptographic transport such as HTTPS.
	Explanations          []cdptype.SecurityStateExplanation    `json:"explanations"`          // List of explanations for the security state. If the overall security state is `insecure` or `warning`, at least one corresponding explanation should be included.
	InsecureContentStatus cdptype.SecurityInsecureContentStatus `json:"insecureContentStatus"` // Information about insecure content on the page.
	Summary               *string                               `json:"summary,omitempty"`     // Overrides user-visible description of the state.
}

// SecurityCertificateErrorClient receives CertificateError events.
type SecurityCertificateErrorClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*SecurityCertificateErrorReply, error)
	rpcc.Stream
}

// SecurityCertificateErrorReply there is a certificate error. If overriding certificate errors is enabled, then it should be handled with the handleCertificateError command. Note: this event does not fire if the certificate error has been allowed internally.
type SecurityCertificateErrorReply struct {
	EventID    int    `json:"eventId"`    // The ID of the event.
	ErrorType  string `json:"errorType"`  // The type of the error.
	RequestURL string `json:"requestURL"` // The url that was requested.
}

// ServiceWorkerWorkerRegistrationUpdatedClient receives WorkerRegistrationUpdated events.
type ServiceWorkerWorkerRegistrationUpdatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*ServiceWorkerWorkerRegistrationUpdatedReply, error)
	rpcc.Stream
}

// ServiceWorkerWorkerRegistrationUpdatedReply
type ServiceWorkerWorkerRegistrationUpdatedReply struct {
	Registrations []cdptype.ServiceWorkerRegistration `json:"registrations"` //
}

// ServiceWorkerWorkerVersionUpdatedClient receives WorkerVersionUpdated events.
type ServiceWorkerWorkerVersionUpdatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*ServiceWorkerWorkerVersionUpdatedReply, error)
	rpcc.Stream
}

// ServiceWorkerWorkerVersionUpdatedReply
type ServiceWorkerWorkerVersionUpdatedReply struct {
	Versions []cdptype.ServiceWorkerVersion `json:"versions"` //
}

// ServiceWorkerWorkerErrorReportedClient receives WorkerErrorReported events.
type ServiceWorkerWorkerErrorReportedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*ServiceWorkerWorkerErrorReportedReply, error)
	rpcc.Stream
}

// ServiceWorkerWorkerErrorReportedReply
type ServiceWorkerWorkerErrorReportedReply struct {
	ErrorMessage cdptype.ServiceWorkerErrorMessage `json:"errorMessage"` //
}

// TargetCreatedClient receives TargetCreated events.
type TargetCreatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*TargetCreatedReply, error)
	rpcc.Stream
}

// TargetCreatedReply issued when a possible inspection target is created.
type TargetCreatedReply struct {
	TargetInfo cdptype.TargetInfo `json:"targetInfo"` //
}

// TargetInfoChangedClient receives TargetInfoChanged events.
type TargetInfoChangedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*TargetInfoChangedReply, error)
	rpcc.Stream
}

// TargetInfoChangedReply issued when some information about a target has changed. This only happens between targetCreated and targetDestroyed.
type TargetInfoChangedReply struct {
	TargetInfo cdptype.TargetInfo `json:"targetInfo"` //
}

// TargetDestroyedClient receives TargetDestroyed events.
type TargetDestroyedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*TargetDestroyedReply, error)
	rpcc.Stream
}

// TargetDestroyedReply issued when a target is destroyed.
type TargetDestroyedReply struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// TargetAttachedToTargetClient receives AttachedToTarget events.
type TargetAttachedToTargetClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*TargetAttachedToTargetReply, error)
	rpcc.Stream
}

// TargetAttachedToTargetReply issued when attached to target because of auto-attach or attachToTarget command.
type TargetAttachedToTargetReply struct {
	TargetInfo         cdptype.TargetInfo `json:"targetInfo"`         //
	WaitingForDebugger bool               `json:"waitingForDebugger"` //
}

// TargetDetachedFromTargetClient receives DetachedFromTarget events.
type TargetDetachedFromTargetClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*TargetDetachedFromTargetReply, error)
	rpcc.Stream
}

// TargetDetachedFromTargetReply issued when detached from target for any reason (including detachFromTarget command).
type TargetDetachedFromTargetReply struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// TargetReceivedMessageFromTargetClient receives ReceivedMessageFromTarget events.
type TargetReceivedMessageFromTargetClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*TargetReceivedMessageFromTargetReply, error)
	rpcc.Stream
}

// TargetReceivedMessageFromTargetReply notifies about new protocol message from attached target.
type TargetReceivedMessageFromTargetReply struct {
	TargetID cdptype.TargetID `json:"targetId"` //
	Message  string           `json:"message"`  //
}

// TetheringAcceptedClient receives Accepted events.
type TetheringAcceptedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*TetheringAcceptedReply, error)
	rpcc.Stream
}

// TetheringAcceptedReply informs that port was successfully bound and got a specified connection id.
type TetheringAcceptedReply struct {
	Port         int    `json:"port"`         // Port number that was successfully bound.
	ConnectionID string `json:"connectionId"` // Connection id to be used.
}

// TracingDataCollectedClient receives DataCollected events.
type TracingDataCollectedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*TracingDataCollectedReply, error)
	rpcc.Stream
}

// TracingDataCollectedReply contains an bucket of collected trace events. When tracing is stopped collected events will be send as a sequence of dataCollected events followed by tracingComplete event.
type TracingDataCollectedReply struct {
	Value []json.RawMessage `json:"value"` //
}

// TracingCompleteClient receives TracingComplete events.
type TracingCompleteClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*TracingCompleteReply, error)
	rpcc.Stream
}

// TracingCompleteReply signals that tracing is stopped and there is no trace buffers pending flush, all data were delivered via dataCollected events.
type TracingCompleteReply struct {
	Stream *cdptype.IOStreamHandle `json:"stream,omitempty"` // A handle of the stream that holds resulting trace data.
}

// TracingBufferUsageClient receives BufferUsage events.
type TracingBufferUsageClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*TracingBufferUsageReply, error)
	rpcc.Stream
}

// TracingBufferUsageReply
type TracingBufferUsageReply struct {
	PercentFull *float64 `json:"percentFull,omitempty"` // A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size.
	EventCount  *float64 `json:"eventCount,omitempty"`  // An approximate number of events in the trace log.
	Value       *float64 `json:"value,omitempty"`       // A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size.
}

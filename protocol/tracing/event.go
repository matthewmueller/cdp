// Code generated by cdpgen. DO NOT EDIT.

package tracing

import (
	"encoding/json"

	"github.com/mafredri/cdp/protocol/io"
	"github.com/mafredri/cdp/rpcc"
)

// DataCollectedClient receives DataCollected events.
type DataCollectedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DataCollectedReply, error)
	rpcc.Stream
}

// DataCollectedReply contains an bucket of collected trace events. When tracing is stopped collected events will be send as a sequence of dataCollected events followed by tracingComplete event.
type DataCollectedReply struct {
	Value []json.RawMessage `json:"value"` //
}

// CompleteClient receives TracingComplete events.
type CompleteClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*CompleteReply, error)
	rpcc.Stream
}

// CompleteReply signals that tracing is stopped and there is no trace buffers pending flush, all data were delivered via dataCollected events.
type CompleteReply struct {
	Stream *io.StreamHandle `json:"stream,omitempty"` // A handle of the stream that holds resulting trace data.
}

// BufferUsageClient receives BufferUsage events.
type BufferUsageClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*BufferUsageReply, error)
	rpcc.Stream
}

// BufferUsageReply
type BufferUsageReply struct {
	PercentFull *float64 `json:"percentFull,omitempty"` // A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size.
	EventCount  *float64 `json:"eventCount,omitempty"`  // An approximate number of events in the trace log.
	Value       *float64 `json:"value,omitempty"`       // A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size.
}

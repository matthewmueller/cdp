// +build !go1.9

// Code generated by cdpgen. DO NOT EDIT.

package page

import (
	"github.com/mafredri/cdp/protocol"
	"github.com/mafredri/cdp/protocol/runtime"
	"github.com/mafredri/cdp/rpcc"
)

// FrameAttachedReply fired when frame has been attached to its parent.
type FrameAttachedReply struct {
	FrameID       protocol.PageFrameID `json:"frameId"`         // Id of the frame that has been attached.
	ParentFrameID protocol.PageFrameID `json:"parentFrameId"`   // Parent frame identifier.
	Stack         *runtime.StackTrace  `json:"stack,omitempty"` // JavaScript stack trace of when frame was attached, only set if frame initiated from script.
}

// FrameNavigatedClient receives FrameNavigated events.
type FrameNavigatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*FrameNavigatedReply, error)
	rpcc.Stream
}

// FrameDetachedReply fired when frame has been detached from its parent.
type FrameDetachedReply struct {
	FrameID protocol.PageFrameID `json:"frameId"` // Id of the frame that has been detached.
}

// FrameStartedLoadingClient receives FrameStartedLoading events.
type FrameStartedLoadingClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*FrameStartedLoadingReply, error)
	rpcc.Stream
}

// FrameStartedLoadingReply fired when frame has started loading.
type FrameStartedLoadingReply struct {
	FrameID protocol.PageFrameID `json:"frameId"` // Id of the frame that has started loading.
}

// FrameStoppedLoadingClient receives FrameStoppedLoading events.
type FrameStoppedLoadingClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*FrameStoppedLoadingReply, error)
	rpcc.Stream
}

// FrameStoppedLoadingReply fired when frame has stopped loading.
type FrameStoppedLoadingReply struct {
	FrameID protocol.PageFrameID `json:"frameId"` // Id of the frame that has stopped loading.
}

// FrameScheduledNavigationClient receives FrameScheduledNavigation events.
type FrameScheduledNavigationClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*FrameScheduledNavigationReply, error)
	rpcc.Stream
}

// FrameScheduledNavigationReply fired when frame schedules a potential navigation.
type FrameScheduledNavigationReply struct {
	FrameID protocol.PageFrameID `json:"frameId"` // Id of the frame that has scheduled a navigation.
	Delay   float64              `json:"delay"`   // Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start.
}

// FrameClearedScheduledNavigationClient receives FrameClearedScheduledNavigation events.
type FrameClearedScheduledNavigationClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*FrameClearedScheduledNavigationReply, error)
	rpcc.Stream
}

// FrameClearedScheduledNavigationReply fired when frame no longer has a scheduled navigation.
type FrameClearedScheduledNavigationReply struct {
	FrameID protocol.PageFrameID `json:"frameId"` // Id of the frame that has cleared its scheduled navigation.
}

// FrameResizedClient receives FrameResized events.
type FrameResizedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*FrameResizedReply, error)
	rpcc.Stream
}

// Code generated by cdpgen. DO NOT EDIT.

package target

import (
	"github.com/mafredri/cdp/rpcc"
)

// CreatedClient receives TargetCreated events.
type CreatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*CreatedReply, error)
	rpcc.Stream
}

// CreatedReply issued when a possible inspection target is created.
type CreatedReply struct {
	TargetInfo Info `json:"targetInfo"` //
}

// InfoChangedClient receives TargetInfoChanged events.
type InfoChangedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*InfoChangedReply, error)
	rpcc.Stream
}

// InfoChangedReply issued when some information about a target has changed. This only happens between targetCreated and targetDestroyed.
type InfoChangedReply struct {
	TargetInfo Info `json:"targetInfo"` //
}

// DestroyedClient receives TargetDestroyed events.
type DestroyedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DestroyedReply, error)
	rpcc.Stream
}

// DestroyedReply issued when a target is destroyed.
type DestroyedReply struct {
	TargetID ID `json:"targetId"` //
}

// AttachedToTargetClient receives AttachedToTarget events.
type AttachedToTargetClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*AttachedToTargetReply, error)
	rpcc.Stream
}

// AttachedToTargetReply issued when attached to target because of auto-attach or attachToTarget command.
type AttachedToTargetReply struct {
	TargetInfo         Info `json:"targetInfo"`         //
	WaitingForDebugger bool `json:"waitingForDebugger"` //
}

// DetachedFromTargetClient receives DetachedFromTarget events.
type DetachedFromTargetClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DetachedFromTargetReply, error)
	rpcc.Stream
}

// DetachedFromTargetReply issued when detached from target for any reason (including detachFromTarget command).
type DetachedFromTargetReply struct {
	TargetID ID `json:"targetId"` //
}

// ReceivedMessageFromTargetClient receives ReceivedMessageFromTarget events.
type ReceivedMessageFromTargetClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*ReceivedMessageFromTargetReply, error)
	rpcc.Stream
}

// ReceivedMessageFromTargetReply notifies about new protocol message from attached target.
type ReceivedMessageFromTargetReply struct {
	TargetID ID     `json:"targetId"` //
	Message  string `json:"message"`  //
}

// Code generated by cdpgen; DO NOT EDIT!

package cdptype

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"
)

// AccessibilityAXNodeID Unique accessibility node identifier.
type AccessibilityAXNodeID string

// AccessibilityAXValueType Enum of possible property types.
type AccessibilityAXValueType int

// AccessibilityAXValueType as enums.
const (
	AccessibilityAXValueTypeNotSet AccessibilityAXValueType = iota
	AccessibilityAXValueTypeBoolean
	AccessibilityAXValueTypeTristate
	AccessibilityAXValueTypeBooleanOrUndefined
	AccessibilityAXValueTypeIDRef
	AccessibilityAXValueTypeIdrefList
	AccessibilityAXValueTypeInteger
	AccessibilityAXValueTypeNode
	AccessibilityAXValueTypeNodeList
	AccessibilityAXValueTypeNumber
	AccessibilityAXValueTypeString
	AccessibilityAXValueTypeComputedString
	AccessibilityAXValueTypeToken
	AccessibilityAXValueTypeTokenList
	AccessibilityAXValueTypeDOMRelation
	AccessibilityAXValueTypeRole
	AccessibilityAXValueTypeInternalRole
	AccessibilityAXValueTypeValueUndefined
)

// Valid returns true if enum is set.
func (e AccessibilityAXValueType) Valid() bool {
	return e >= 1 && e <= 17
}

func (e AccessibilityAXValueType) String() string {
	switch e {
	case 0:
		return "AccessibilityAXValueTypeNotSet"
	case 1:
		return "boolean"
	case 2:
		return "tristate"
	case 3:
		return "booleanOrUndefined"
	case 4:
		return "idref"
	case 5:
		return "idrefList"
	case 6:
		return "integer"
	case 7:
		return "node"
	case 8:
		return "nodeList"
	case 9:
		return "number"
	case 10:
		return "string"
	case 11:
		return "computedString"
	case 12:
		return "token"
	case 13:
		return "tokenList"
	case 14:
		return "domRelation"
	case 15:
		return "role"
	case 16:
		return "internalRole"
	case 17:
		return "valueUndefined"
	}
	return fmt.Sprintf("AccessibilityAXValueType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e AccessibilityAXValueType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.AccessibilityAXValueType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *AccessibilityAXValueType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"boolean\"":
		*e = 1
	case "\"tristate\"":
		*e = 2
	case "\"booleanOrUndefined\"":
		*e = 3
	case "\"idref\"":
		*e = 4
	case "\"idrefList\"":
		*e = 5
	case "\"integer\"":
		*e = 6
	case "\"node\"":
		*e = 7
	case "\"nodeList\"":
		*e = 8
	case "\"number\"":
		*e = 9
	case "\"string\"":
		*e = 10
	case "\"computedString\"":
		*e = 11
	case "\"token\"":
		*e = 12
	case "\"tokenList\"":
		*e = 13
	case "\"domRelation\"":
		*e = 14
	case "\"role\"":
		*e = 15
	case "\"internalRole\"":
		*e = 16
	case "\"valueUndefined\"":
		*e = 17
	default:
		return fmt.Errorf("cdptype.AccessibilityAXValueType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// AccessibilityAXValueSourceType Enum of possible property sources.
type AccessibilityAXValueSourceType int

// AccessibilityAXValueSourceType as enums.
const (
	AccessibilityAXValueSourceTypeNotSet AccessibilityAXValueSourceType = iota
	AccessibilityAXValueSourceTypeAttribute
	AccessibilityAXValueSourceTypeImplicit
	AccessibilityAXValueSourceTypeStyle
	AccessibilityAXValueSourceTypeContents
	AccessibilityAXValueSourceTypePlaceholder
	AccessibilityAXValueSourceTypeRelatedElement
)

// Valid returns true if enum is set.
func (e AccessibilityAXValueSourceType) Valid() bool {
	return e >= 1 && e <= 6
}

func (e AccessibilityAXValueSourceType) String() string {
	switch e {
	case 0:
		return "AccessibilityAXValueSourceTypeNotSet"
	case 1:
		return "attribute"
	case 2:
		return "implicit"
	case 3:
		return "style"
	case 4:
		return "contents"
	case 5:
		return "placeholder"
	case 6:
		return "relatedElement"
	}
	return fmt.Sprintf("AccessibilityAXValueSourceType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e AccessibilityAXValueSourceType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.AccessibilityAXValueSourceType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *AccessibilityAXValueSourceType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"attribute\"":
		*e = 1
	case "\"implicit\"":
		*e = 2
	case "\"style\"":
		*e = 3
	case "\"contents\"":
		*e = 4
	case "\"placeholder\"":
		*e = 5
	case "\"relatedElement\"":
		*e = 6
	default:
		return fmt.Errorf("cdptype.AccessibilityAXValueSourceType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// AccessibilityAXValueNativeSourceType Enum of possible native property sources (as a subtype of a particular AXValueSourceType).
type AccessibilityAXValueNativeSourceType int

// AccessibilityAXValueNativeSourceType as enums.
const (
	AccessibilityAXValueNativeSourceTypeNotSet AccessibilityAXValueNativeSourceType = iota
	AccessibilityAXValueNativeSourceTypeFigcaption
	AccessibilityAXValueNativeSourceTypeLabel
	AccessibilityAXValueNativeSourceTypeLabelfor
	AccessibilityAXValueNativeSourceTypeLabelwrapped
	AccessibilityAXValueNativeSourceTypeLegend
	AccessibilityAXValueNativeSourceTypeTablecaption
	AccessibilityAXValueNativeSourceTypeTitle
	AccessibilityAXValueNativeSourceTypeOther
)

// Valid returns true if enum is set.
func (e AccessibilityAXValueNativeSourceType) Valid() bool {
	return e >= 1 && e <= 8
}

func (e AccessibilityAXValueNativeSourceType) String() string {
	switch e {
	case 0:
		return "AccessibilityAXValueNativeSourceTypeNotSet"
	case 1:
		return "figcaption"
	case 2:
		return "label"
	case 3:
		return "labelfor"
	case 4:
		return "labelwrapped"
	case 5:
		return "legend"
	case 6:
		return "tablecaption"
	case 7:
		return "title"
	case 8:
		return "other"
	}
	return fmt.Sprintf("AccessibilityAXValueNativeSourceType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e AccessibilityAXValueNativeSourceType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.AccessibilityAXValueNativeSourceType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *AccessibilityAXValueNativeSourceType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"figcaption\"":
		*e = 1
	case "\"label\"":
		*e = 2
	case "\"labelfor\"":
		*e = 3
	case "\"labelwrapped\"":
		*e = 4
	case "\"legend\"":
		*e = 5
	case "\"tablecaption\"":
		*e = 6
	case "\"title\"":
		*e = 7
	case "\"other\"":
		*e = 8
	default:
		return fmt.Errorf("cdptype.AccessibilityAXValueNativeSourceType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// AccessibilityAXValueSource A single source for a computed AX property.
type AccessibilityAXValueSource struct {
	Type              AccessibilityAXValueSourceType       `json:"type"`                        // What type of source this is.
	Value             *AccessibilityAXValue                `json:"value,omitempty"`             // The value of this property source.
	Attribute         *string                              `json:"attribute,omitempty"`         // The name of the relevant attribute, if any.
	AttributeValue    *AccessibilityAXValue                `json:"attributeValue,omitempty"`    // The value of the relevant attribute, if any.
	Superseded        *bool                                `json:"superseded,omitempty"`        // Whether this source is superseded by a higher priority source.
	NativeSource      AccessibilityAXValueNativeSourceType `json:"nativeSource,omitempty"`      // The native markup source for this value, e.g. a <label> element.
	NativeSourceValue *AccessibilityAXValue                `json:"nativeSourceValue,omitempty"` // The value, such as a node or node list, of the native source.
	Invalid           *bool                                `json:"invalid,omitempty"`           // Whether the value for this property is invalid.
	InvalidReason     *string                              `json:"invalidReason,omitempty"`     // Reason for the value being invalid, if it is.
}

// AccessibilityAXRelatedNode
type AccessibilityAXRelatedNode struct {
	BackendDOMNodeID DOMBackendNodeID `json:"backendDOMNodeId"` // The BackendNodeId of the related DOM node.
	IDRef            *string          `json:"idref,omitempty"`  // The IDRef value provided, if any.
	Text             *string          `json:"text,omitempty"`   // The text alternative of this node in the current context.
}

// AccessibilityAXProperty
type AccessibilityAXProperty struct {
	Name  string               `json:"name"`  // The name of this property.
	Value AccessibilityAXValue `json:"value"` // The value of this property.
}

// AccessibilityAXValue A single computed AX property.
type AccessibilityAXValue struct {
	Type         AccessibilityAXValueType     `json:"type"`                   // The type of this value.
	Value        json.RawMessage              `json:"value,omitempty"`        // The computed value of this property.
	RelatedNodes []AccessibilityAXRelatedNode `json:"relatedNodes,omitempty"` // One or more related nodes, if applicable.
	Sources      []AccessibilityAXValueSource `json:"sources,omitempty"`      // The sources which contributed to the computation of this property.
}

// AccessibilityAXGlobalStates States which apply to every AX node.
type AccessibilityAXGlobalStates int

// AccessibilityAXGlobalStates as enums.
const (
	AccessibilityAXGlobalStatesNotSet AccessibilityAXGlobalStates = iota
	AccessibilityAXGlobalStatesDisabled
	AccessibilityAXGlobalStatesHidden
	AccessibilityAXGlobalStatesHiddenRoot
	AccessibilityAXGlobalStatesInvalid
	AccessibilityAXGlobalStatesKeyshortcuts
	AccessibilityAXGlobalStatesRoledescription
)

// Valid returns true if enum is set.
func (e AccessibilityAXGlobalStates) Valid() bool {
	return e >= 1 && e <= 6
}

func (e AccessibilityAXGlobalStates) String() string {
	switch e {
	case 0:
		return "AccessibilityAXGlobalStatesNotSet"
	case 1:
		return "disabled"
	case 2:
		return "hidden"
	case 3:
		return "hiddenRoot"
	case 4:
		return "invalid"
	case 5:
		return "keyshortcuts"
	case 6:
		return "roledescription"
	}
	return fmt.Sprintf("AccessibilityAXGlobalStates(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e AccessibilityAXGlobalStates) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.AccessibilityAXGlobalStates: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *AccessibilityAXGlobalStates) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"disabled\"":
		*e = 1
	case "\"hidden\"":
		*e = 2
	case "\"hiddenRoot\"":
		*e = 3
	case "\"invalid\"":
		*e = 4
	case "\"keyshortcuts\"":
		*e = 5
	case "\"roledescription\"":
		*e = 6
	default:
		return fmt.Errorf("cdptype.AccessibilityAXGlobalStates: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// AccessibilityAXLiveRegionAttributes Attributes which apply to nodes in live regions.
type AccessibilityAXLiveRegionAttributes int

// AccessibilityAXLiveRegionAttributes as enums.
const (
	AccessibilityAXLiveRegionAttributesNotSet AccessibilityAXLiveRegionAttributes = iota
	AccessibilityAXLiveRegionAttributesLive
	AccessibilityAXLiveRegionAttributesAtomic
	AccessibilityAXLiveRegionAttributesRelevant
	AccessibilityAXLiveRegionAttributesBusy
	AccessibilityAXLiveRegionAttributesRoot
)

// Valid returns true if enum is set.
func (e AccessibilityAXLiveRegionAttributes) Valid() bool {
	return e >= 1 && e <= 5
}

func (e AccessibilityAXLiveRegionAttributes) String() string {
	switch e {
	case 0:
		return "AccessibilityAXLiveRegionAttributesNotSet"
	case 1:
		return "live"
	case 2:
		return "atomic"
	case 3:
		return "relevant"
	case 4:
		return "busy"
	case 5:
		return "root"
	}
	return fmt.Sprintf("AccessibilityAXLiveRegionAttributes(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e AccessibilityAXLiveRegionAttributes) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.AccessibilityAXLiveRegionAttributes: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *AccessibilityAXLiveRegionAttributes) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"live\"":
		*e = 1
	case "\"atomic\"":
		*e = 2
	case "\"relevant\"":
		*e = 3
	case "\"busy\"":
		*e = 4
	case "\"root\"":
		*e = 5
	default:
		return fmt.Errorf("cdptype.AccessibilityAXLiveRegionAttributes: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// AccessibilityAXWidgetAttributes Attributes which apply to widgets.
type AccessibilityAXWidgetAttributes int

// AccessibilityAXWidgetAttributes as enums.
const (
	AccessibilityAXWidgetAttributesNotSet AccessibilityAXWidgetAttributes = iota
	AccessibilityAXWidgetAttributesAutocomplete
	AccessibilityAXWidgetAttributesHaspopup
	AccessibilityAXWidgetAttributesLevel
	AccessibilityAXWidgetAttributesMultiselectable
	AccessibilityAXWidgetAttributesOrientation
	AccessibilityAXWidgetAttributesMultiline
	AccessibilityAXWidgetAttributesReadonly
	AccessibilityAXWidgetAttributesRequired
	AccessibilityAXWidgetAttributesValuemin
	AccessibilityAXWidgetAttributesValuemax
	AccessibilityAXWidgetAttributesValuetext
)

// Valid returns true if enum is set.
func (e AccessibilityAXWidgetAttributes) Valid() bool {
	return e >= 1 && e <= 11
}

func (e AccessibilityAXWidgetAttributes) String() string {
	switch e {
	case 0:
		return "AccessibilityAXWidgetAttributesNotSet"
	case 1:
		return "autocomplete"
	case 2:
		return "haspopup"
	case 3:
		return "level"
	case 4:
		return "multiselectable"
	case 5:
		return "orientation"
	case 6:
		return "multiline"
	case 7:
		return "readonly"
	case 8:
		return "required"
	case 9:
		return "valuemin"
	case 10:
		return "valuemax"
	case 11:
		return "valuetext"
	}
	return fmt.Sprintf("AccessibilityAXWidgetAttributes(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e AccessibilityAXWidgetAttributes) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.AccessibilityAXWidgetAttributes: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *AccessibilityAXWidgetAttributes) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"autocomplete\"":
		*e = 1
	case "\"haspopup\"":
		*e = 2
	case "\"level\"":
		*e = 3
	case "\"multiselectable\"":
		*e = 4
	case "\"orientation\"":
		*e = 5
	case "\"multiline\"":
		*e = 6
	case "\"readonly\"":
		*e = 7
	case "\"required\"":
		*e = 8
	case "\"valuemin\"":
		*e = 9
	case "\"valuemax\"":
		*e = 10
	case "\"valuetext\"":
		*e = 11
	default:
		return fmt.Errorf("cdptype.AccessibilityAXWidgetAttributes: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// AccessibilityAXWidgetStates States which apply to widgets.
type AccessibilityAXWidgetStates int

// AccessibilityAXWidgetStates as enums.
const (
	AccessibilityAXWidgetStatesNotSet AccessibilityAXWidgetStates = iota
	AccessibilityAXWidgetStatesChecked
	AccessibilityAXWidgetStatesExpanded
	AccessibilityAXWidgetStatesModal
	AccessibilityAXWidgetStatesPressed
	AccessibilityAXWidgetStatesSelected
)

// Valid returns true if enum is set.
func (e AccessibilityAXWidgetStates) Valid() bool {
	return e >= 1 && e <= 5
}

func (e AccessibilityAXWidgetStates) String() string {
	switch e {
	case 0:
		return "AccessibilityAXWidgetStatesNotSet"
	case 1:
		return "checked"
	case 2:
		return "expanded"
	case 3:
		return "modal"
	case 4:
		return "pressed"
	case 5:
		return "selected"
	}
	return fmt.Sprintf("AccessibilityAXWidgetStates(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e AccessibilityAXWidgetStates) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.AccessibilityAXWidgetStates: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *AccessibilityAXWidgetStates) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"checked\"":
		*e = 1
	case "\"expanded\"":
		*e = 2
	case "\"modal\"":
		*e = 3
	case "\"pressed\"":
		*e = 4
	case "\"selected\"":
		*e = 5
	default:
		return fmt.Errorf("cdptype.AccessibilityAXWidgetStates: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// AccessibilityAXRelationshipAttributes Relationships between elements other than parent/child/sibling.
type AccessibilityAXRelationshipAttributes int

// AccessibilityAXRelationshipAttributes as enums.
const (
	AccessibilityAXRelationshipAttributesNotSet AccessibilityAXRelationshipAttributes = iota
	AccessibilityAXRelationshipAttributesActivedescendant
	AccessibilityAXRelationshipAttributesControls
	AccessibilityAXRelationshipAttributesDescribedby
	AccessibilityAXRelationshipAttributesDetails
	AccessibilityAXRelationshipAttributesErrormessage
	AccessibilityAXRelationshipAttributesFlowto
	AccessibilityAXRelationshipAttributesLabelledby
	AccessibilityAXRelationshipAttributesOwns
)

// Valid returns true if enum is set.
func (e AccessibilityAXRelationshipAttributes) Valid() bool {
	return e >= 1 && e <= 8
}

func (e AccessibilityAXRelationshipAttributes) String() string {
	switch e {
	case 0:
		return "AccessibilityAXRelationshipAttributesNotSet"
	case 1:
		return "activedescendant"
	case 2:
		return "controls"
	case 3:
		return "describedby"
	case 4:
		return "details"
	case 5:
		return "errormessage"
	case 6:
		return "flowto"
	case 7:
		return "labelledby"
	case 8:
		return "owns"
	}
	return fmt.Sprintf("AccessibilityAXRelationshipAttributes(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e AccessibilityAXRelationshipAttributes) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.AccessibilityAXRelationshipAttributes: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *AccessibilityAXRelationshipAttributes) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"activedescendant\"":
		*e = 1
	case "\"controls\"":
		*e = 2
	case "\"describedby\"":
		*e = 3
	case "\"details\"":
		*e = 4
	case "\"errormessage\"":
		*e = 5
	case "\"flowto\"":
		*e = 6
	case "\"labelledby\"":
		*e = 7
	case "\"owns\"":
		*e = 8
	default:
		return fmt.Errorf("cdptype.AccessibilityAXRelationshipAttributes: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// AccessibilityAXNode A node in the accessibility tree.
type AccessibilityAXNode struct {
	NodeID           AccessibilityAXNodeID     `json:"nodeId"`                     // Unique identifier for this node.
	Ignored          bool                      `json:"ignored"`                    // Whether this node is ignored for accessibility
	IgnoredReasons   []AccessibilityAXProperty `json:"ignoredReasons,omitempty"`   // Collection of reasons why this node is hidden.
	Role             *AccessibilityAXValue     `json:"role,omitempty"`             // This Node's role, whether explicit or implicit.
	Name             *AccessibilityAXValue     `json:"name,omitempty"`             // The accessible name for this Node.
	Description      *AccessibilityAXValue     `json:"description,omitempty"`      // The accessible description for this Node.
	Value            *AccessibilityAXValue     `json:"value,omitempty"`            // The value for this Node.
	Properties       []AccessibilityAXProperty `json:"properties,omitempty"`       // All other properties
	ChildIDs         []AccessibilityAXNodeID   `json:"childIds,omitempty"`         // IDs for each of this node's child nodes.
	BackendDOMNodeID *DOMBackendNodeID         `json:"backendDOMNodeId,omitempty"` // The backend ID for the associated DOM node, if any.
}

// Animation Animation instance.
type Animation struct {
	ID           string          `json:"id"`              // Animation's id.
	Name         string          `json:"name"`            // Animation's name.
	PausedState  bool            `json:"pausedState"`     // Animation's internal paused state.
	PlayState    string          `json:"playState"`       // Animation's play state.
	PlaybackRate float64         `json:"playbackRate"`    // Animation's playback rate.
	StartTime    float64         `json:"startTime"`       // Animation's start time.
	CurrentTime  float64         `json:"currentTime"`     // Animation's current time.
	Source       AnimationEffect `json:"source"`          // Animation's source animation node.
	Type         string          `json:"type"`            // Animation type of Animation.
	CSSID        *string         `json:"cssId,omitempty"` // A unique ID for Animation representing the sources that triggered this CSS animation/transition.
}

// AnimationEffect AnimationEffect instance
type AnimationEffect struct {
	Delay          float64                 `json:"delay"`                   // AnimationEffect's delay.
	EndDelay       float64                 `json:"endDelay"`                // AnimationEffect's end delay.
	IterationStart float64                 `json:"iterationStart"`          // AnimationEffect's iteration start.
	Iterations     float64                 `json:"iterations"`              // AnimationEffect's iterations.
	Duration       float64                 `json:"duration"`                // AnimationEffect's iteration duration.
	Direction      string                  `json:"direction"`               // AnimationEffect's playback direction.
	Fill           string                  `json:"fill"`                    // AnimationEffect's fill mode.
	BackendNodeID  DOMBackendNodeID        `json:"backendNodeId"`           // AnimationEffect's target node.
	KeyframesRule  *AnimationKeyframesRule `json:"keyframesRule,omitempty"` // AnimationEffect's keyframes.
	Easing         string                  `json:"easing"`                  // AnimationEffect's timing function.
}

// AnimationKeyframesRule Keyframes Rule
type AnimationKeyframesRule struct {
	Name      *string                  `json:"name,omitempty"` // CSS keyframed animation's name.
	Keyframes []AnimationKeyframeStyle `json:"keyframes"`      // List of animation keyframes.
}

// AnimationKeyframeStyle Keyframe Style
type AnimationKeyframeStyle struct {
	Offset string `json:"offset"` // Keyframe's time offset.
	Easing string `json:"easing"` // AnimationEffect's timing function.
}

// ApplicationCacheResource Detailed application cache resource information.
type ApplicationCacheResource struct {
	URL  string `json:"url"`  // Resource url.
	Size int    `json:"size"` // Resource size.
	Type string `json:"type"` // Resource type.
}

// ApplicationCache Detailed application cache information.
type ApplicationCache struct {
	ManifestURL  string                     `json:"manifestURL"`  // Manifest URL.
	Size         float64                    `json:"size"`         // Application cache size.
	CreationTime float64                    `json:"creationTime"` // Application cache creation time.
	UpdateTime   float64                    `json:"updateTime"`   // Application cache update time.
	Resources    []ApplicationCacheResource `json:"resources"`    // Application cache resources.
}

// ApplicationCacheFrameWithManifest Frame identifier - manifest URL pair.
type ApplicationCacheFrameWithManifest struct {
	FrameID     PageFrameID `json:"frameId"`     // Frame identifier.
	ManifestURL string      `json:"manifestURL"` // Manifest URL.
	Status      int         `json:"status"`      // Application cache status.
}

// BrowserWindowID
type BrowserWindowID int

// BrowserWindowState The state of the browser window.
type BrowserWindowState int

// BrowserWindowState as enums.
const (
	BrowserWindowStateNotSet BrowserWindowState = iota
	BrowserWindowStateNormal
	BrowserWindowStateMinimized
	BrowserWindowStateMaximized
	BrowserWindowStateFullscreen
)

// Valid returns true if enum is set.
func (e BrowserWindowState) Valid() bool {
	return e >= 1 && e <= 4
}

func (e BrowserWindowState) String() string {
	switch e {
	case 0:
		return "BrowserWindowStateNotSet"
	case 1:
		return "normal"
	case 2:
		return "minimized"
	case 3:
		return "maximized"
	case 4:
		return "fullscreen"
	}
	return fmt.Sprintf("BrowserWindowState(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e BrowserWindowState) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.BrowserWindowState: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *BrowserWindowState) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"normal\"":
		*e = 1
	case "\"minimized\"":
		*e = 2
	case "\"maximized\"":
		*e = 3
	case "\"fullscreen\"":
		*e = 4
	default:
		return fmt.Errorf("cdptype.BrowserWindowState: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// BrowserBounds Browser window bounds information
type BrowserBounds struct {
	Left        *int               `json:"left,omitempty"`        // The offset from the left edge of the screen to the window in pixels.
	Top         *int               `json:"top,omitempty"`         // The offset from the top edge of the screen to the window in pixels.
	Width       *int               `json:"width,omitempty"`       // The window width in pixels.
	Height      *int               `json:"height,omitempty"`      // The window height in pixels.
	WindowState BrowserWindowState `json:"windowState,omitempty"` // The window state. Default to normal.
}

// CSSStyleSheetID
type CSSStyleSheetID string

// CSSStyleSheetOrigin Stylesheet type: "injected" for stylesheets injected via extension, "user-agent" for user-agent stylesheets, "inspector" for stylesheets created by the inspector (i.e. those holding the "via inspector" rules), "regular" for regular stylesheets.
type CSSStyleSheetOrigin int

// CSSStyleSheetOrigin as enums.
const (
	CSSStyleSheetOriginNotSet CSSStyleSheetOrigin = iota
	CSSStyleSheetOriginInjected
	CSSStyleSheetOriginUserAgent
	CSSStyleSheetOriginInspector
	CSSStyleSheetOriginRegular
)

// Valid returns true if enum is set.
func (e CSSStyleSheetOrigin) Valid() bool {
	return e >= 1 && e <= 4
}

func (e CSSStyleSheetOrigin) String() string {
	switch e {
	case 0:
		return "CSSStyleSheetOriginNotSet"
	case 1:
		return "injected"
	case 2:
		return "user-agent"
	case 3:
		return "inspector"
	case 4:
		return "regular"
	}
	return fmt.Sprintf("CSSStyleSheetOrigin(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e CSSStyleSheetOrigin) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.CSSStyleSheetOrigin: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *CSSStyleSheetOrigin) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"injected\"":
		*e = 1
	case "\"user-agent\"":
		*e = 2
	case "\"inspector\"":
		*e = 3
	case "\"regular\"":
		*e = 4
	default:
		return fmt.Errorf("cdptype.CSSStyleSheetOrigin: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// CSSPseudoElementMatches CSS rule collection for a single pseudo style.
type CSSPseudoElementMatches struct {
	PseudoType DOMPseudoType  `json:"pseudoType"` // Pseudo element type.
	Matches    []CSSRuleMatch `json:"matches"`    // Matches of CSS rules applicable to the pseudo style.
}

// CSSInheritedStyleEntry Inherited CSS rule collection from ancestor node.
type CSSInheritedStyleEntry struct {
	InlineStyle     *CSSStyle      `json:"inlineStyle,omitempty"` // The ancestor node's inline style, if any, in the style inheritance chain.
	MatchedCSSRules []CSSRuleMatch `json:"matchedCSSRules"`       // Matches of CSS rules matching the ancestor node in the style inheritance chain.
}

// CSSRuleMatch Match data for a CSS rule.
type CSSRuleMatch struct {
	Rule              CSSRule `json:"rule"`              // CSS rule in the match.
	MatchingSelectors []int   `json:"matchingSelectors"` // Matching selector indices in the rule's selectorList selectors (0-based).
}

// CSSValue Data for a simple selector (these are delimited by commas in a selector list).
type CSSValue struct {
	Text  string          `json:"text"`            // Value text.
	Range *CSSSourceRange `json:"range,omitempty"` // Value range in the underlying resource (if available).
}

// CSSSelectorList Selector list data.
type CSSSelectorList struct {
	Selectors []CSSValue `json:"selectors"` // Selectors in the list.
	Text      string     `json:"text"`      // Rule selector text.
}

// CSSStyleSheetHeader CSS stylesheet metainformation.
type CSSStyleSheetHeader struct {
	StyleSheetID CSSStyleSheetID     `json:"styleSheetId"`           // The stylesheet identifier.
	FrameID      PageFrameID         `json:"frameId"`                // Owner frame identifier.
	SourceURL    string              `json:"sourceURL"`              // Stylesheet resource URL.
	SourceMapURL *string             `json:"sourceMapURL,omitempty"` // URL of source map associated with the stylesheet (if any).
	Origin       CSSStyleSheetOrigin `json:"origin"`                 // Stylesheet origin.
	Title        string              `json:"title"`                  // Stylesheet title.
	OwnerNode    *DOMBackendNodeID   `json:"ownerNode,omitempty"`    // The backend id for the owner node of the stylesheet.
	Disabled     bool                `json:"disabled"`               // Denotes whether the stylesheet is disabled.
	HasSourceURL *bool               `json:"hasSourceURL,omitempty"` // Whether the sourceURL field value comes from the sourceURL comment.
	IsInline     bool                `json:"isInline"`               // Whether this stylesheet is created for STYLE tag by parser. This flag is not set for document.written STYLE tags.
	StartLine    float64             `json:"startLine"`              // Line offset of the stylesheet within the resource (zero based).
	StartColumn  float64             `json:"startColumn"`            // Column offset of the stylesheet within the resource (zero based).
	Length       float64             `json:"length"`                 // Size of the content (in characters).
}

// CSSRule CSS rule representation.
type CSSRule struct {
	StyleSheetID *CSSStyleSheetID    `json:"styleSheetId,omitempty"` // The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from.
	SelectorList CSSSelectorList     `json:"selectorList"`           // Rule selector data.
	Origin       CSSStyleSheetOrigin `json:"origin"`                 // Parent stylesheet's origin.
	Style        CSSStyle            `json:"style"`                  // Associated style declaration.
	Media        []CSSMedia          `json:"media,omitempty"`        // Media list array (for rules involving media queries). The array enumerates media queries starting with the innermost one, going outwards.
}

// CSSRuleUsage CSS coverage information.
type CSSRuleUsage struct {
	StyleSheetID CSSStyleSheetID `json:"styleSheetId"` // The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from.
	StartOffset  float64         `json:"startOffset"`  // Offset of the start of the rule (including selector) from the beginning of the stylesheet.
	EndOffset    float64         `json:"endOffset"`    // Offset of the end of the rule body from the beginning of the stylesheet.
	Used         bool            `json:"used"`         // Indicates whether the rule was actually used by some element in the page.
}

// CSSSourceRange Text range within a resource. All numbers are zero-based.
type CSSSourceRange struct {
	StartLine   int `json:"startLine"`   // Start line of range.
	StartColumn int `json:"startColumn"` // Start column of range (inclusive).
	EndLine     int `json:"endLine"`     // End line of range
	EndColumn   int `json:"endColumn"`   // End column of range (exclusive).
}

// CSSShorthandEntry
type CSSShorthandEntry struct {
	Name      string `json:"name"`                // Shorthand name.
	Value     string `json:"value"`               // Shorthand value.
	Important *bool  `json:"important,omitempty"` // Whether the property has "!important" annotation (implies false if absent).
}

// CSSComputedStyleProperty
type CSSComputedStyleProperty struct {
	Name  string `json:"name"`  // Computed style property name.
	Value string `json:"value"` // Computed style property value.
}

// CSSStyle CSS style representation.
type CSSStyle struct {
	StyleSheetID     *CSSStyleSheetID    `json:"styleSheetId,omitempty"` // The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from.
	CSSProperties    []CSSProperty       `json:"cssProperties"`          // CSS properties in the style.
	ShorthandEntries []CSSShorthandEntry `json:"shorthandEntries"`       // Computed values for all shorthands found in the style.
	CSSText          *string             `json:"cssText,omitempty"`      // Style declaration text (if available).
	Range            *CSSSourceRange     `json:"range,omitempty"`        // Style declaration range in the enclosing stylesheet (if available).
}

// CSSProperty CSS property declaration data.
type CSSProperty struct {
	Name      string          `json:"name"`                // The property name.
	Value     string          `json:"value"`               // The property value.
	Important *bool           `json:"important,omitempty"` // Whether the property has "!important" annotation (implies false if absent).
	Implicit  *bool           `json:"implicit,omitempty"`  // Whether the property is implicit (implies false if absent).
	Text      *string         `json:"text,omitempty"`      // The full property text as specified in the style.
	ParsedOk  *bool           `json:"parsedOk,omitempty"`  // Whether the property is understood by the browser (implies true if absent).
	Disabled  *bool           `json:"disabled,omitempty"`  // Whether the property is disabled by the user (present for source-based properties only).
	Range     *CSSSourceRange `json:"range,omitempty"`     // The entire property range in the enclosing style declaration (if available).
}

// CSSMedia CSS media rule descriptor.
type CSSMedia struct {
	Text         string           `json:"text"`                   // Media query text.
	Source       string           `json:"source"`                 // Source of the media query: "mediaRule" if specified by a @media rule, "importRule" if specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked stylesheet's LINK tag, "inlineSheet" if specified by a "media" attribute in an inline stylesheet's STYLE tag.
	SourceURL    *string          `json:"sourceURL,omitempty"`    // URL of the document containing the media query description.
	Range        *CSSSourceRange  `json:"range,omitempty"`        // The associated rule (@media or @import) header range in the enclosing stylesheet (if available).
	StyleSheetID *CSSStyleSheetID `json:"styleSheetId,omitempty"` // Identifier of the stylesheet containing this object (if exists).
	MediaList    []CSSMediaQuery  `json:"mediaList,omitempty"`    // Array of media queries.
}

// CSSMediaQuery Media query descriptor.
type CSSMediaQuery struct {
	Expressions []CSSMediaQueryExpression `json:"expressions"` // Array of media query expressions.
	Active      bool                      `json:"active"`      // Whether the media query condition is satisfied.
}

// CSSMediaQueryExpression Media query expression descriptor.
type CSSMediaQueryExpression struct {
	Value          float64         `json:"value"`                    // Media query expression value.
	Unit           string          `json:"unit"`                     // Media query expression units.
	Feature        string          `json:"feature"`                  // Media query expression feature.
	ValueRange     *CSSSourceRange `json:"valueRange,omitempty"`     // The associated range of the value text in the enclosing stylesheet (if available).
	ComputedLength *float64        `json:"computedLength,omitempty"` // Computed length of media query expression (if applicable).
}

// CSSPlatformFontUsage Information about amount of glyphs that were rendered with given font.
type CSSPlatformFontUsage struct {
	FamilyName   string  `json:"familyName"`   // Font's family name reported by platform.
	IsCustomFont bool    `json:"isCustomFont"` // Indicates if the font was downloaded or resolved locally.
	GlyphCount   float64 `json:"glyphCount"`   // Amount of glyphs that were rendered with this font.
}

// CSSKeyframesRule CSS keyframes rule representation.
type CSSKeyframesRule struct {
	AnimationName CSSValue          `json:"animationName"` // Animation name.
	Keyframes     []CSSKeyframeRule `json:"keyframes"`     // List of keyframes.
}

// CSSKeyframeRule CSS keyframe rule representation.
type CSSKeyframeRule struct {
	StyleSheetID *CSSStyleSheetID    `json:"styleSheetId,omitempty"` // The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from.
	Origin       CSSStyleSheetOrigin `json:"origin"`                 // Parent stylesheet's origin.
	KeyText      CSSValue            `json:"keyText"`                // Associated key text.
	Style        CSSStyle            `json:"style"`                  // Associated style declaration.
}

// CSSStyleDeclarationEdit A descriptor of operation to mutate style declaration text.
type CSSStyleDeclarationEdit struct {
	StyleSheetID CSSStyleSheetID `json:"styleSheetId"` // The css style sheet identifier.
	Range        CSSSourceRange  `json:"range"`        // The range of the style text in the enclosing stylesheet.
	Text         string          `json:"text"`         // New style text.
}

// CSSInlineTextBox Details of post layout rendered text positions. The exact layout should not be regarded as stable and may change between versions.
type CSSInlineTextBox struct {
	BoundingBox         DOMRect `json:"boundingBox"`         // The absolute position bounding box.
	StartCharacterIndex int     `json:"startCharacterIndex"` // The starting index in characters, for this post layout textbox substring.
	NumCharacters       int     `json:"numCharacters"`       // The number of characters in this post layout textbox substring.
}

// CacheStorageCacheID Unique identifier of the Cache object.
type CacheStorageCacheID string

// CacheStorageDataEntry Data entry.
type CacheStorageDataEntry struct {
	Request      string  `json:"request"`      // Request url spec.
	Response     string  `json:"response"`     // Response status text.
	ResponseTime float64 `json:"responseTime"` // Number of seconds since epoch.
}

// CacheStorageCache Cache identifier.
type CacheStorageCache struct {
	CacheID        CacheStorageCacheID `json:"cacheId"`        // An opaque unique id of the cache.
	SecurityOrigin string              `json:"securityOrigin"` // Security origin of the cache.
	CacheName      string              `json:"cacheName"`      // The name of the cache.
}

// ConsoleMessage Console message.
type ConsoleMessage struct {
	Source string  `json:"source"`           // Message source.
	Level  string  `json:"level"`            // Message severity.
	Text   string  `json:"text"`             // Message text.
	URL    *string `json:"url,omitempty"`    // URL of the message origin.
	Line   *int    `json:"line,omitempty"`   // Line number in the resource that generated this message (1-based).
	Column *int    `json:"column,omitempty"` // Column number in the resource that generated this message (1-based).
}

// DOMNodeID Unique DOM node identifier.
type DOMNodeID int

// DOMBackendNodeID Unique DOM node identifier used to reference a node that may not have been pushed to the front-end.
type DOMBackendNodeID int

// DOMBackendNode Backend node with a friendly name.
type DOMBackendNode struct {
	NodeType      int              `json:"nodeType"`      // Node's nodeType.
	NodeName      string           `json:"nodeName"`      // Node's nodeName.
	BackendNodeID DOMBackendNodeID `json:"backendNodeId"` //
}

// DOMPseudoType Pseudo element type.
type DOMPseudoType int

// DOMPseudoType as enums.
const (
	DOMPseudoTypeNotSet DOMPseudoType = iota
	DOMPseudoTypeFirstLine
	DOMPseudoTypeFirstLetter
	DOMPseudoTypeBefore
	DOMPseudoTypeAfter
	DOMPseudoTypeBackdrop
	DOMPseudoTypeSelection
	DOMPseudoTypeFirstLineInherited
	DOMPseudoTypeScrollbar
	DOMPseudoTypeScrollbarThumb
	DOMPseudoTypeScrollbarButton
	DOMPseudoTypeScrollbarTrack
	DOMPseudoTypeScrollbarTrackPiece
	DOMPseudoTypeScrollbarCorner
	DOMPseudoTypeResizer
	DOMPseudoTypeInputListButton
)

// Valid returns true if enum is set.
func (e DOMPseudoType) Valid() bool {
	return e >= 1 && e <= 15
}

func (e DOMPseudoType) String() string {
	switch e {
	case 0:
		return "DOMPseudoTypeNotSet"
	case 1:
		return "first-line"
	case 2:
		return "first-letter"
	case 3:
		return "before"
	case 4:
		return "after"
	case 5:
		return "backdrop"
	case 6:
		return "selection"
	case 7:
		return "first-line-inherited"
	case 8:
		return "scrollbar"
	case 9:
		return "scrollbar-thumb"
	case 10:
		return "scrollbar-button"
	case 11:
		return "scrollbar-track"
	case 12:
		return "scrollbar-track-piece"
	case 13:
		return "scrollbar-corner"
	case 14:
		return "resizer"
	case 15:
		return "input-list-button"
	}
	return fmt.Sprintf("DOMPseudoType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e DOMPseudoType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.DOMPseudoType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *DOMPseudoType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"first-line\"":
		*e = 1
	case "\"first-letter\"":
		*e = 2
	case "\"before\"":
		*e = 3
	case "\"after\"":
		*e = 4
	case "\"backdrop\"":
		*e = 5
	case "\"selection\"":
		*e = 6
	case "\"first-line-inherited\"":
		*e = 7
	case "\"scrollbar\"":
		*e = 8
	case "\"scrollbar-thumb\"":
		*e = 9
	case "\"scrollbar-button\"":
		*e = 10
	case "\"scrollbar-track\"":
		*e = 11
	case "\"scrollbar-track-piece\"":
		*e = 12
	case "\"scrollbar-corner\"":
		*e = 13
	case "\"resizer\"":
		*e = 14
	case "\"input-list-button\"":
		*e = 15
	default:
		return fmt.Errorf("cdptype.DOMPseudoType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// DOMShadowRootType Shadow root type.
type DOMShadowRootType int

// DOMShadowRootType as enums.
const (
	DOMShadowRootTypeNotSet DOMShadowRootType = iota
	DOMShadowRootTypeUserAgent
	DOMShadowRootTypeOpen
	DOMShadowRootTypeClosed
)

// Valid returns true if enum is set.
func (e DOMShadowRootType) Valid() bool {
	return e >= 1 && e <= 3
}

func (e DOMShadowRootType) String() string {
	switch e {
	case 0:
		return "DOMShadowRootTypeNotSet"
	case 1:
		return "user-agent"
	case 2:
		return "open"
	case 3:
		return "closed"
	}
	return fmt.Sprintf("DOMShadowRootType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e DOMShadowRootType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.DOMShadowRootType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *DOMShadowRootType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"user-agent\"":
		*e = 1
	case "\"open\"":
		*e = 2
	case "\"closed\"":
		*e = 3
	default:
		return fmt.Errorf("cdptype.DOMShadowRootType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// DOMNode DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type.
type DOMNode struct {
	NodeID           DOMNodeID         `json:"nodeId"`                     // Node identifier that is passed into the rest of the DOM messages as the nodeId. Backend will only push node with given id once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client.
	ParentID         *DOMNodeID        `json:"parentId,omitempty"`         // The id of the parent node if any.
	BackendNodeID    DOMBackendNodeID  `json:"backendNodeId"`              // The BackendNodeId for this node.
	NodeType         int               `json:"nodeType"`                   // Node's nodeType.
	NodeName         string            `json:"nodeName"`                   // Node's nodeName.
	LocalName        string            `json:"localName"`                  // Node's localName.
	NodeValue        string            `json:"nodeValue"`                  // Node's nodeValue.
	ChildNodeCount   *int              `json:"childNodeCount,omitempty"`   // Child count for Container nodes.
	Children         []DOMNode         `json:"children,omitempty"`         // Child nodes of this node when requested with children.
	Attributes       []string          `json:"attributes,omitempty"`       // Attributes of the Element node in the form of flat array [name1, value1, name2, value2].
	DocumentURL      *string           `json:"documentURL,omitempty"`      // Document URL that Document or FrameOwner node points to.
	BaseURL          *string           `json:"baseURL,omitempty"`          // Base URL that Document or FrameOwner node uses for URL completion.
	PublicID         *string           `json:"publicId,omitempty"`         // DocumentType's publicId.
	SystemID         *string           `json:"systemId,omitempty"`         // DocumentType's systemId.
	InternalSubset   *string           `json:"internalSubset,omitempty"`   // DocumentType's internalSubset.
	XMLVersion       *string           `json:"xmlVersion,omitempty"`       // Document's XML version in case of XML documents.
	Name             *string           `json:"name,omitempty"`             // Attr's name.
	Value            *string           `json:"value,omitempty"`            // Attr's value.
	PseudoType       DOMPseudoType     `json:"pseudoType,omitempty"`       // Pseudo element type for this node.
	ShadowRootType   DOMShadowRootType `json:"shadowRootType,omitempty"`   // Shadow root type.
	FrameID          *PageFrameID      `json:"frameId,omitempty"`          // Frame ID for frame owner elements.
	ContentDocument  *DOMNode          `json:"contentDocument,omitempty"`  // Content document for frame owner elements.
	ShadowRoots      []DOMNode         `json:"shadowRoots,omitempty"`      // Shadow root list for given element host.
	TemplateContent  *DOMNode          `json:"templateContent,omitempty"`  // Content document fragment for template elements.
	PseudoElements   []DOMNode         `json:"pseudoElements,omitempty"`   // Pseudo elements associated with this node.
	ImportedDocument *DOMNode          `json:"importedDocument,omitempty"` // Import document for the HTMLImport links.
	DistributedNodes []DOMBackendNode  `json:"distributedNodes,omitempty"` // Distributed nodes for given insertion point.
	IsSVG            *bool             `json:"isSVG,omitempty"`            // Whether the node is SVG.
}

// DOMRGBA A structure holding an RGBA color.
type DOMRGBA struct {
	R int      `json:"r"`           // The red component, in the [0-255] range.
	G int      `json:"g"`           // The green component, in the [0-255] range.
	B int      `json:"b"`           // The blue component, in the [0-255] range.
	A *float64 `json:"a,omitempty"` // The alpha component, in the [0-1] range (default: 1).
}

// DOMQuad An array of quad vertices, x immediately followed by y for each point, points clock-wise.
type DOMQuad []float64

// DOMBoxModel Box model.
type DOMBoxModel struct {
	Content      DOMQuad              `json:"content"`                // Content box
	Padding      DOMQuad              `json:"padding"`                // Padding box
	Border       DOMQuad              `json:"border"`                 // Border box
	Margin       DOMQuad              `json:"margin"`                 // Margin box
	Width        int                  `json:"width"`                  // Node width
	Height       int                  `json:"height"`                 // Node height
	ShapeOutside *DOMShapeOutsideInfo `json:"shapeOutside,omitempty"` // Shape outside coordinates
}

// DOMShapeOutsideInfo CSS Shape Outside details.
type DOMShapeOutsideInfo struct {
	Bounds      DOMQuad           `json:"bounds"`      // Shape bounds
	Shape       []json.RawMessage `json:"shape"`       // Shape coordinate details
	MarginShape []json.RawMessage `json:"marginShape"` // Margin shape bounds
}

// DOMRect Rectangle.
type DOMRect struct {
	X      float64 `json:"x"`      // X coordinate
	Y      float64 `json:"y"`      // Y coordinate
	Width  float64 `json:"width"`  // Rectangle width
	Height float64 `json:"height"` // Rectangle height
}

// DOMDebuggerDOMBreakpointType DOM breakpoint type.
type DOMDebuggerDOMBreakpointType int

// DOMDebuggerDOMBreakpointType as enums.
const (
	DOMDebuggerDOMBreakpointTypeNotSet DOMDebuggerDOMBreakpointType = iota
	DOMDebuggerDOMBreakpointTypeSubtreeModified
	DOMDebuggerDOMBreakpointTypeAttributeModified
	DOMDebuggerDOMBreakpointTypeNodeRemoved
)

// Valid returns true if enum is set.
func (e DOMDebuggerDOMBreakpointType) Valid() bool {
	return e >= 1 && e <= 3
}

func (e DOMDebuggerDOMBreakpointType) String() string {
	switch e {
	case 0:
		return "DOMDebuggerDOMBreakpointTypeNotSet"
	case 1:
		return "subtree-modified"
	case 2:
		return "attribute-modified"
	case 3:
		return "node-removed"
	}
	return fmt.Sprintf("DOMDebuggerDOMBreakpointType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e DOMDebuggerDOMBreakpointType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.DOMDebuggerDOMBreakpointType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *DOMDebuggerDOMBreakpointType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"subtree-modified\"":
		*e = 1
	case "\"attribute-modified\"":
		*e = 2
	case "\"node-removed\"":
		*e = 3
	default:
		return fmt.Errorf("cdptype.DOMDebuggerDOMBreakpointType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// DOMDebuggerEventListener Object event listener.
type DOMDebuggerEventListener struct {
	Type            string               `json:"type"`                      // EventListener's type.
	UseCapture      bool                 `json:"useCapture"`                // EventListener's useCapture.
	Passive         bool                 `json:"passive"`                   // EventListener's passive flag.
	Once            bool                 `json:"once"`                      // EventListener's once flag.
	ScriptID        RuntimeScriptID      `json:"scriptId"`                  // Script id of the handler code.
	LineNumber      int                  `json:"lineNumber"`                // Line number in the script (0-based).
	ColumnNumber    int                  `json:"columnNumber"`              // Column number in the script (0-based).
	Handler         *RuntimeRemoteObject `json:"handler,omitempty"`         // Event handler function value.
	OriginalHandler *RuntimeRemoteObject `json:"originalHandler,omitempty"` // Event original handler function value.
	BackendNodeID   *DOMBackendNodeID    `json:"backendNodeId,omitempty"`   // Node the listener is added to (if any).
}

// DOMSnapshotDOMNode A Node in the DOM tree.
type DOMSnapshotDOMNode struct {
	NodeType              int                    `json:"nodeType"`                        // Node's nodeType.
	NodeName              string                 `json:"nodeName"`                        // Node's nodeName.
	NodeValue             string                 `json:"nodeValue"`                       // Node's nodeValue.
	BackendNodeID         DOMBackendNodeID       `json:"backendNodeId"`                   // Node's id, corresponds to DOM.Node.backendNodeId.
	ChildNodeIndexes      []int                  `json:"childNodeIndexes,omitempty"`      // The indexes of the node's child nodes in the domNodes array returned by getSnapshot, if any.
	Attributes            []DOMSnapshotNameValue `json:"attributes,omitempty"`            // Attributes of an Element node.
	PseudoElementIndexes  []int                  `json:"pseudoElementIndexes,omitempty"`  // Indexes of pseudo elements associated with this node in the domNodes array returned by getSnapshot, if any.
	LayoutNodeIndex       *int                   `json:"layoutNodeIndex,omitempty"`       // The index of the node's related layout tree node in the layoutTreeNodes array returned by getSnapshot, if any.
	DocumentURL           *string                `json:"documentURL,omitempty"`           // Document URL that Document or FrameOwner node points to.
	BaseURL               *string                `json:"baseURL,omitempty"`               // Base URL that Document or FrameOwner node uses for URL completion.
	ContentLanguage       *string                `json:"contentLanguage,omitempty"`       // Only set for documents, contains the document's content language.
	PublicID              *string                `json:"publicId,omitempty"`              // DocumentType node's publicId.
	SystemID              *string                `json:"systemId,omitempty"`              // DocumentType node's systemId.
	FrameID               *PageFrameID           `json:"frameId,omitempty"`               // Frame ID for frame owner elements.
	ContentDocumentIndex  *int                   `json:"contentDocumentIndex,omitempty"`  // The index of a frame owner element's content document in the domNodes array returned by getSnapshot, if any.
	ImportedDocumentIndex *int                   `json:"importedDocumentIndex,omitempty"` // Index of the imported document's node of a link element in the domNodes array returned by getSnapshot, if any.
	TemplateContentIndex  *int                   `json:"templateContentIndex,omitempty"`  // Index of the content node of a template element in the domNodes array returned by getSnapshot.
	PseudoType            DOMPseudoType          `json:"pseudoType,omitempty"`            // Type of a pseudo element node.
	IsClickable           *bool                  `json:"isClickable,omitempty"`           // Whether this DOM node responds to mouse clicks. This includes nodes that have had click event listeners attached via JavaScript as well as anchor tags that naturally navigate when clicked.
}

// DOMSnapshotLayoutTreeNode Details of an element in the DOM tree with a LayoutObject.
type DOMSnapshotLayoutTreeNode struct {
	DOMNodeIndex    int                `json:"domNodeIndex"`              // The index of the related DOM node in the domNodes array returned by getSnapshot.
	BoundingBox     DOMRect            `json:"boundingBox"`               // The absolute position bounding box.
	LayoutText      *string            `json:"layoutText,omitempty"`      // Contents of the LayoutText, if any.
	InlineTextNodes []CSSInlineTextBox `json:"inlineTextNodes,omitempty"` // The post-layout inline text nodes, if any.
	StyleIndex      *int               `json:"styleIndex,omitempty"`      // Index into the computedStyles array returned by getSnapshot.
}

// DOMSnapshotComputedStyle A subset of the full ComputedStyle as defined by the request whitelist.
type DOMSnapshotComputedStyle struct {
	Properties []DOMSnapshotNameValue `json:"properties"` // Name/value pairs of computed style properties.
}

// DOMSnapshotNameValue A name/value pair.
type DOMSnapshotNameValue struct {
	Name  string `json:"name"`  // Attribute/property name.
	Value string `json:"value"` // Attribute/property value.
}

// DOMStorageStorageID DOM Storage identifier.
type DOMStorageStorageID struct {
	SecurityOrigin string `json:"securityOrigin"` // Security origin for the storage.
	IsLocalStorage bool   `json:"isLocalStorage"` // Whether the storage is local storage (not session storage).
}

// DOMStorageItem DOM Storage item.
type DOMStorageItem []string

// DatabaseID Unique identifier of Database object.
type DatabaseID string

// Database Database object.
type Database struct {
	ID      DatabaseID `json:"id"`      // Database ID.
	Domain  string     `json:"domain"`  // Database domain.
	Name    string     `json:"name"`    // Database name.
	Version string     `json:"version"` // Database version.
}

// DatabaseError Database error.
type DatabaseError struct {
	Message string `json:"message"` // Error message.
	Code    int    `json:"code"`    // Error code.
}

// DebuggerBreakpointID Breakpoint identifier.
type DebuggerBreakpointID string

// DebuggerCallFrameID Call frame identifier.
type DebuggerCallFrameID string

// DebuggerLocation Location in the source code.
type DebuggerLocation struct {
	ScriptID     RuntimeScriptID `json:"scriptId"`               // Script identifier as reported in the Debugger.scriptParsed.
	LineNumber   int             `json:"lineNumber"`             // Line number in the script (0-based).
	ColumnNumber *int            `json:"columnNumber,omitempty"` // Column number in the script (0-based).
}

// DebuggerScriptPosition Location in the source code.
type DebuggerScriptPosition struct {
	LineNumber   int `json:"lineNumber"`   //
	ColumnNumber int `json:"columnNumber"` //
}

// DebuggerCallFrame JavaScript call frame. Array of call frames form the call stack.
type DebuggerCallFrame struct {
	CallFrameID      DebuggerCallFrameID  `json:"callFrameId"`                // Call frame identifier. This identifier is only valid while the virtual machine is paused.
	FunctionName     string               `json:"functionName"`               // Name of the JavaScript function called on this call frame.
	FunctionLocation *DebuggerLocation    `json:"functionLocation,omitempty"` // Location in the source code.
	Location         DebuggerLocation     `json:"location"`                   // Location in the source code.
	ScopeChain       []DebuggerScope      `json:"scopeChain"`                 // Scope chain for this call frame.
	This             RuntimeRemoteObject  `json:"this"`                       // this object for this call frame.
	ReturnValue      *RuntimeRemoteObject `json:"returnValue,omitempty"`      // The value being returned, if the function is at return point.
}

// DebuggerScope Scope description.
type DebuggerScope struct {
	Type          string              `json:"type"`                    // Scope type.
	Object        RuntimeRemoteObject `json:"object"`                  // Object representing the scope. For global and with scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties.
	Name          *string             `json:"name,omitempty"`          //
	StartLocation *DebuggerLocation   `json:"startLocation,omitempty"` // Location in the source code where scope starts
	EndLocation   *DebuggerLocation   `json:"endLocation,omitempty"`   // Location in the source code where scope ends
}

// DebuggerSearchMatch Search match for resource.
type DebuggerSearchMatch struct {
	LineNumber  float64 `json:"lineNumber"`  // Line number in resource content.
	LineContent string  `json:"lineContent"` // Line with match content.
}

// DebuggerBreakLocation
type DebuggerBreakLocation struct {
	ScriptID     RuntimeScriptID `json:"scriptId"`               // Script identifier as reported in the Debugger.scriptParsed.
	LineNumber   int             `json:"lineNumber"`             // Line number in the script (0-based).
	ColumnNumber *int            `json:"columnNumber,omitempty"` // Column number in the script (0-based).
	Type         *string         `json:"type,omitempty"`         //
}

// EmulationScreenOrientation Screen orientation.
type EmulationScreenOrientation struct {
	Type  string `json:"type"`  // Orientation type.
	Angle int    `json:"angle"` // Orientation angle.
}

// EmulationVirtualTimePolicy advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to allow the next delayed task (if any) to run; pause: The virtual time base may not advance; pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending resource fetches.
type EmulationVirtualTimePolicy int

// EmulationVirtualTimePolicy as enums.
const (
	EmulationVirtualTimePolicyNotSet EmulationVirtualTimePolicy = iota
	EmulationVirtualTimePolicyAdvance
	EmulationVirtualTimePolicyPause
	EmulationVirtualTimePolicyPauseIfNetworkFetchesPending
)

// Valid returns true if enum is set.
func (e EmulationVirtualTimePolicy) Valid() bool {
	return e >= 1 && e <= 3
}

func (e EmulationVirtualTimePolicy) String() string {
	switch e {
	case 0:
		return "EmulationVirtualTimePolicyNotSet"
	case 1:
		return "advance"
	case 2:
		return "pause"
	case 3:
		return "pauseIfNetworkFetchesPending"
	}
	return fmt.Sprintf("EmulationVirtualTimePolicy(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e EmulationVirtualTimePolicy) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.EmulationVirtualTimePolicy: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *EmulationVirtualTimePolicy) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"advance\"":
		*e = 1
	case "\"pause\"":
		*e = 2
	case "\"pauseIfNetworkFetchesPending\"":
		*e = 3
	default:
		return fmt.Errorf("cdptype.EmulationVirtualTimePolicy: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// HeapProfilerHeapSnapshotObjectID Heap snapshot object id.
type HeapProfilerHeapSnapshotObjectID string

// HeapProfilerSamplingHeapProfileNode Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.
type HeapProfilerSamplingHeapProfileNode struct {
	CallFrame RuntimeCallFrame                      `json:"callFrame"` // Function location.
	SelfSize  float64                               `json:"selfSize"`  // Allocations size in bytes for the node excluding children.
	Children  []HeapProfilerSamplingHeapProfileNode `json:"children"`  // Child nodes.
}

// HeapProfilerSamplingHeapProfile Profile.
type HeapProfilerSamplingHeapProfile struct {
	Head HeapProfilerSamplingHeapProfileNode `json:"head"` //
}

// IOStreamHandle
type IOStreamHandle string

// IndexedDBDatabaseWithObjectStores Database with an array of object stores.
type IndexedDBDatabaseWithObjectStores struct {
	Name         string                 `json:"name"`         // Database name.
	Version      int                    `json:"version"`      // Database version.
	ObjectStores []IndexedDBObjectStore `json:"objectStores"` // Object stores in this database.
}

// IndexedDBObjectStore Object store.
type IndexedDBObjectStore struct {
	Name          string                      `json:"name"`          // Object store name.
	KeyPath       IndexedDBKeyPath            `json:"keyPath"`       // Object store key path.
	AutoIncrement bool                        `json:"autoIncrement"` // If true, object store has auto increment flag set.
	Indexes       []IndexedDBObjectStoreIndex `json:"indexes"`       // Indexes in this object store.
}

// IndexedDBObjectStoreIndex Object store index.
type IndexedDBObjectStoreIndex struct {
	Name       string           `json:"name"`       // Index name.
	KeyPath    IndexedDBKeyPath `json:"keyPath"`    // Index key path.
	Unique     bool             `json:"unique"`     // If true, index is unique.
	MultiEntry bool             `json:"multiEntry"` // If true, index allows multiple entries for a key.
}

// IndexedDBKey Key.
type IndexedDBKey struct {
	Type   string         `json:"type"`             // Key type.
	Number *float64       `json:"number,omitempty"` // Number value.
	String *string        `json:"string,omitempty"` // String value.
	Date   *float64       `json:"date,omitempty"`   // Date value.
	Array  []IndexedDBKey `json:"array,omitempty"`  // Array value.
}

// IndexedDBKeyRange Key range.
type IndexedDBKeyRange struct {
	Lower     *IndexedDBKey `json:"lower,omitempty"` // Lower bound.
	Upper     *IndexedDBKey `json:"upper,omitempty"` // Upper bound.
	LowerOpen bool          `json:"lowerOpen"`       // If true lower bound is open.
	UpperOpen bool          `json:"upperOpen"`       // If true upper bound is open.
}

// IndexedDBDataEntry Data entry.
type IndexedDBDataEntry struct {
	Key        RuntimeRemoteObject `json:"key"`        // Key object.
	PrimaryKey RuntimeRemoteObject `json:"primaryKey"` // Primary key object.
	Value      RuntimeRemoteObject `json:"value"`      // Value object.
}

// IndexedDBKeyPath Key path.
type IndexedDBKeyPath struct {
	Type   string   `json:"type"`             // Key path type.
	String *string  `json:"string,omitempty"` // String value.
	Array  []string `json:"array,omitempty"`  // Array value.
}

// InputTouchPoint
type InputTouchPoint struct {
	State         string   `json:"state"`                   // State of the touch point.
	X             int      `json:"x"`                       // X coordinate of the event relative to the main frame's viewport.
	Y             int      `json:"y"`                       // Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	RadiusX       *int     `json:"radiusX,omitempty"`       // X radius of the touch area (default: 1).
	RadiusY       *int     `json:"radiusY,omitempty"`       // Y radius of the touch area (default: 1).
	RotationAngle *float64 `json:"rotationAngle,omitempty"` // Rotation angle (default: 0.0).
	Force         *float64 `json:"force,omitempty"`         // Force (default: 1.0).
	ID            *float64 `json:"id,omitempty"`            // Identifier used to track touch sources between events, must be unique within an event.
}

// InputGestureSourceType
type InputGestureSourceType int

// InputGestureSourceType as enums.
const (
	InputGestureSourceTypeNotSet InputGestureSourceType = iota
	InputGestureSourceTypeDefault
	InputGestureSourceTypeTouch
	InputGestureSourceTypeMouse
)

// Valid returns true if enum is set.
func (e InputGestureSourceType) Valid() bool {
	return e >= 1 && e <= 3
}

func (e InputGestureSourceType) String() string {
	switch e {
	case 0:
		return "InputGestureSourceTypeNotSet"
	case 1:
		return "default"
	case 2:
		return "touch"
	case 3:
		return "mouse"
	}
	return fmt.Sprintf("InputGestureSourceType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e InputGestureSourceType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.InputGestureSourceType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *InputGestureSourceType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"default\"":
		*e = 1
	case "\"touch\"":
		*e = 2
	case "\"mouse\"":
		*e = 3
	default:
		return fmt.Errorf("cdptype.InputGestureSourceType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// LayerTreeLayerID Unique Layer identifier.
type LayerTreeLayerID string

// LayerTreeSnapshotID Unique snapshot identifier.
type LayerTreeSnapshotID string

// LayerTreeScrollRect Rectangle where scrolling happens on the main thread.
type LayerTreeScrollRect struct {
	Rect DOMRect `json:"rect"` // Rectangle itself.
	Type string  `json:"type"` // Reason for rectangle to force scrolling on the main thread
}

// LayerTreePictureTile Serialized fragment of layer picture along with its offset within the layer.
type LayerTreePictureTile struct {
	X       float64 `json:"x"`       // Offset from owning layer left boundary
	Y       float64 `json:"y"`       // Offset from owning layer top boundary
	Picture string  `json:"picture"` // Base64-encoded snapshot data.
}

// LayerTreeLayer Information about a compositing layer.
type LayerTreeLayer struct {
	LayerID       LayerTreeLayerID      `json:"layerId"`                 // The unique id for this layer.
	ParentLayerID *LayerTreeLayerID     `json:"parentLayerId,omitempty"` // The id of parent (not present for root).
	BackendNodeID *DOMBackendNodeID     `json:"backendNodeId,omitempty"` // The backend id for the node associated with this layer.
	OffsetX       float64               `json:"offsetX"`                 // Offset from parent layer, X coordinate.
	OffsetY       float64               `json:"offsetY"`                 // Offset from parent layer, Y coordinate.
	Width         float64               `json:"width"`                   // Layer width.
	Height        float64               `json:"height"`                  // Layer height.
	Transform     []float64             `json:"transform,omitempty"`     // Transformation matrix for layer, default is identity matrix
	AnchorX       *float64              `json:"anchorX,omitempty"`       // Transform anchor point X, absent if no transform specified
	AnchorY       *float64              `json:"anchorY,omitempty"`       // Transform anchor point Y, absent if no transform specified
	AnchorZ       *float64              `json:"anchorZ,omitempty"`       // Transform anchor point Z, absent if no transform specified
	PaintCount    int                   `json:"paintCount"`              // Indicates how many time this layer has painted.
	DrawsContent  bool                  `json:"drawsContent"`            // Indicates whether this layer hosts any content, rather than being used for transform/scrolling purposes only.
	Invisible     *bool                 `json:"invisible,omitempty"`     // Set if layer is not visible.
	ScrollRects   []LayerTreeScrollRect `json:"scrollRects,omitempty"`   // Rectangles scrolling on main thread only.
}

// LayerTreePaintProfile Array of timings, one per paint step.
type LayerTreePaintProfile []float64

// LogEntry Log entry.
type LogEntry struct {
	Source           string             `json:"source"`                     // Log entry source.
	Level            string             `json:"level"`                      // Log entry severity.
	Text             string             `json:"text"`                       // Logged text.
	Timestamp        RuntimeTimestamp   `json:"timestamp"`                  // Timestamp when this entry was added.
	URL              *string            `json:"url,omitempty"`              // URL of the resource if known.
	LineNumber       *int               `json:"lineNumber,omitempty"`       // Line number in the resource.
	StackTrace       *RuntimeStackTrace `json:"stackTrace,omitempty"`       // JavaScript stack trace.
	NetworkRequestID *NetworkRequestID  `json:"networkRequestId,omitempty"` // Identifier of the network request associated with this entry.
	WorkerID         *string            `json:"workerId,omitempty"`         // Identifier of the worker associated with this entry.
}

// LogViolationSetting Violation configuration setting.
type LogViolationSetting struct {
	Name      string  `json:"name"`      // Violation type.
	Threshold float64 `json:"threshold"` // Time threshold to trigger upon.
}

// MemoryPressureLevel Memory pressure level.
type MemoryPressureLevel int

// MemoryPressureLevel as enums.
const (
	MemoryPressureLevelNotSet MemoryPressureLevel = iota
	MemoryPressureLevelModerate
	MemoryPressureLevelCritical
)

// Valid returns true if enum is set.
func (e MemoryPressureLevel) Valid() bool {
	return e >= 1 && e <= 2
}

func (e MemoryPressureLevel) String() string {
	switch e {
	case 0:
		return "MemoryPressureLevelNotSet"
	case 1:
		return "moderate"
	case 2:
		return "critical"
	}
	return fmt.Sprintf("MemoryPressureLevel(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e MemoryPressureLevel) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.MemoryPressureLevel: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *MemoryPressureLevel) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"moderate\"":
		*e = 1
	case "\"critical\"":
		*e = 2
	default:
		return fmt.Errorf("cdptype.MemoryPressureLevel: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// NetworkLoaderID Unique loader identifier.
type NetworkLoaderID string

// NetworkRequestID Unique request identifier.
type NetworkRequestID string

// NetworkInterceptionID Unique intercepted request identifier.
type NetworkInterceptionID string

// NetworkErrorReason Network level fetch failure reason.
type NetworkErrorReason int

// NetworkErrorReason as enums.
const (
	NetworkErrorReasonNotSet NetworkErrorReason = iota
	NetworkErrorReasonFailed
	NetworkErrorReasonAborted
	NetworkErrorReasonTimedOut
	NetworkErrorReasonAccessDenied
	NetworkErrorReasonConnectionClosed
	NetworkErrorReasonConnectionReset
	NetworkErrorReasonConnectionRefused
	NetworkErrorReasonConnectionAborted
	NetworkErrorReasonConnectionFailed
	NetworkErrorReasonNameNotResolved
	NetworkErrorReasonInternetDisconnected
	NetworkErrorReasonAddressUnreachable
)

// Valid returns true if enum is set.
func (e NetworkErrorReason) Valid() bool {
	return e >= 1 && e <= 12
}

func (e NetworkErrorReason) String() string {
	switch e {
	case 0:
		return "NetworkErrorReasonNotSet"
	case 1:
		return "Failed"
	case 2:
		return "Aborted"
	case 3:
		return "TimedOut"
	case 4:
		return "AccessDenied"
	case 5:
		return "ConnectionClosed"
	case 6:
		return "ConnectionReset"
	case 7:
		return "ConnectionRefused"
	case 8:
		return "ConnectionAborted"
	case 9:
		return "ConnectionFailed"
	case 10:
		return "NameNotResolved"
	case 11:
		return "InternetDisconnected"
	case 12:
		return "AddressUnreachable"
	}
	return fmt.Sprintf("NetworkErrorReason(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e NetworkErrorReason) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.NetworkErrorReason: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *NetworkErrorReason) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"Failed\"":
		*e = 1
	case "\"Aborted\"":
		*e = 2
	case "\"TimedOut\"":
		*e = 3
	case "\"AccessDenied\"":
		*e = 4
	case "\"ConnectionClosed\"":
		*e = 5
	case "\"ConnectionReset\"":
		*e = 6
	case "\"ConnectionRefused\"":
		*e = 7
	case "\"ConnectionAborted\"":
		*e = 8
	case "\"ConnectionFailed\"":
		*e = 9
	case "\"NameNotResolved\"":
		*e = 10
	case "\"InternetDisconnected\"":
		*e = 11
	case "\"AddressUnreachable\"":
		*e = 12
	default:
		return fmt.Errorf("cdptype.NetworkErrorReason: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// NetworkTimestamp Number of seconds since epoch.
type NetworkTimestamp float64

// String calls (time.Time).String().
func (t NetworkTimestamp) String() string {
	return t.Time().String()
}

// Time parses the Unix time with millisecond accuracy.
func (t NetworkTimestamp) Time() time.Time {
	secs := int64(t)
	// The Unix time in t only has ms accuracy.
	ms := int64((float64(t) - float64(secs)) * 1000000)
	return time.Unix(secs, ms*1000)
}

// MarshalJSON implements json.Marshaler. Encodes to null if t is zero.
func (t NetworkTimestamp) MarshalJSON() ([]byte, error) {
	if t == 0 {
		return []byte("null"), nil
	}
	f := float64(t)
	return json.Marshal(&f)
}

// UnmarshalJSON implements json.Unmarshaler.
func (t *NetworkTimestamp) UnmarshalJSON(data []byte) error {
	*t = 0
	if len(data) == 0 {
		return nil
	}
	var f float64
	if err := json.Unmarshal(data, &f); err != nil {
		return errors.New("cdptype.NetworkTimestamp: " + err.Error())
	}
	*t = NetworkTimestamp(f)
	return nil
}

var _ json.Marshaler = (*NetworkTimestamp)(nil)
var _ json.Unmarshaler = (*NetworkTimestamp)(nil)

// NetworkHeaders Request / response headers as keys / values of JSON object.
type NetworkHeaders []byte

// MarshalJSON copies behavior of json.RawMessage.
func (n NetworkHeaders) MarshalJSON() ([]byte, error) {
	if n == nil {
		return []byte("null"), nil
	}
	return n, nil
}

// UnmarshalJSON copies behavior of json.RawMessage.
func (n *NetworkHeaders) UnmarshalJSON(data []byte) error {
	if n == nil {
		return errors.New("cdptype.NetworkHeaders: UnmarshalJSON on nil pointer")
	}
	*n = append((*n)[0:0], data...)
	return nil
}

var _ json.Marshaler = (*NetworkHeaders)(nil)
var _ json.Unmarshaler = (*NetworkHeaders)(nil)

// NetworkConnectionType Loading priority of a resource request.
type NetworkConnectionType int

// NetworkConnectionType as enums.
const (
	NetworkConnectionTypeNotSet NetworkConnectionType = iota
	NetworkConnectionTypeNone
	NetworkConnectionTypeCellular2g
	NetworkConnectionTypeCellular3g
	NetworkConnectionTypeCellular4g
	NetworkConnectionTypeBluetooth
	NetworkConnectionTypeEthernet
	NetworkConnectionTypeWifi
	NetworkConnectionTypeWimax
	NetworkConnectionTypeOther
)

// Valid returns true if enum is set.
func (e NetworkConnectionType) Valid() bool {
	return e >= 1 && e <= 9
}

func (e NetworkConnectionType) String() string {
	switch e {
	case 0:
		return "NetworkConnectionTypeNotSet"
	case 1:
		return "none"
	case 2:
		return "cellular2g"
	case 3:
		return "cellular3g"
	case 4:
		return "cellular4g"
	case 5:
		return "bluetooth"
	case 6:
		return "ethernet"
	case 7:
		return "wifi"
	case 8:
		return "wimax"
	case 9:
		return "other"
	}
	return fmt.Sprintf("NetworkConnectionType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e NetworkConnectionType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.NetworkConnectionType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *NetworkConnectionType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"none\"":
		*e = 1
	case "\"cellular2g\"":
		*e = 2
	case "\"cellular3g\"":
		*e = 3
	case "\"cellular4g\"":
		*e = 4
	case "\"bluetooth\"":
		*e = 5
	case "\"ethernet\"":
		*e = 6
	case "\"wifi\"":
		*e = 7
	case "\"wimax\"":
		*e = 8
	case "\"other\"":
		*e = 9
	default:
		return fmt.Errorf("cdptype.NetworkConnectionType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// NetworkCookieSameSite Represents the cookie's 'SameSite' status: https://tools.ietf.org/html/draft-west-first-party-cookies
type NetworkCookieSameSite int

// NetworkCookieSameSite as enums.
const (
	NetworkCookieSameSiteNotSet NetworkCookieSameSite = iota
	NetworkCookieSameSiteStrict
	NetworkCookieSameSiteLax
)

// Valid returns true if enum is set.
func (e NetworkCookieSameSite) Valid() bool {
	return e >= 1 && e <= 2
}

func (e NetworkCookieSameSite) String() string {
	switch e {
	case 0:
		return "NetworkCookieSameSiteNotSet"
	case 1:
		return "Strict"
	case 2:
		return "Lax"
	}
	return fmt.Sprintf("NetworkCookieSameSite(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e NetworkCookieSameSite) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.NetworkCookieSameSite: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *NetworkCookieSameSite) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"Strict\"":
		*e = 1
	case "\"Lax\"":
		*e = 2
	default:
		return fmt.Errorf("cdptype.NetworkCookieSameSite: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// NetworkResourceTiming Timing information for the request.
type NetworkResourceTiming struct {
	RequestTime       float64 `json:"requestTime"`       // Timing's requestTime is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this requestTime.
	ProxyStart        float64 `json:"proxyStart"`        // Started resolving proxy.
	ProxyEnd          float64 `json:"proxyEnd"`          // Finished resolving proxy.
	DNSStart          float64 `json:"dnsStart"`          // Started DNS address resolve.
	DNSEnd            float64 `json:"dnsEnd"`            // Finished DNS address resolve.
	ConnectStart      float64 `json:"connectStart"`      // Started connecting to the remote host.
	ConnectEnd        float64 `json:"connectEnd"`        // Connected to the remote host.
	SslStart          float64 `json:"sslStart"`          // Started SSL handshake.
	SslEnd            float64 `json:"sslEnd"`            // Finished SSL handshake.
	WorkerStart       float64 `json:"workerStart"`       // Started running ServiceWorker.
	WorkerReady       float64 `json:"workerReady"`       // Finished Starting ServiceWorker.
	SendStart         float64 `json:"sendStart"`         // Started sending request.
	SendEnd           float64 `json:"sendEnd"`           // Finished sending request.
	PushStart         float64 `json:"pushStart"`         // Time the server started pushing request.
	PushEnd           float64 `json:"pushEnd"`           // Time the server finished pushing request.
	ReceiveHeadersEnd float64 `json:"receiveHeadersEnd"` // Finished receiving response headers.
}

// NetworkResourcePriority Loading priority of a resource request.
type NetworkResourcePriority int

// NetworkResourcePriority as enums.
const (
	NetworkResourcePriorityNotSet NetworkResourcePriority = iota
	NetworkResourcePriorityVeryLow
	NetworkResourcePriorityLow
	NetworkResourcePriorityMedium
	NetworkResourcePriorityHigh
	NetworkResourcePriorityVeryHigh
)

// Valid returns true if enum is set.
func (e NetworkResourcePriority) Valid() bool {
	return e >= 1 && e <= 5
}

func (e NetworkResourcePriority) String() string {
	switch e {
	case 0:
		return "NetworkResourcePriorityNotSet"
	case 1:
		return "VeryLow"
	case 2:
		return "Low"
	case 3:
		return "Medium"
	case 4:
		return "High"
	case 5:
		return "VeryHigh"
	}
	return fmt.Sprintf("NetworkResourcePriority(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e NetworkResourcePriority) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.NetworkResourcePriority: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *NetworkResourcePriority) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"VeryLow\"":
		*e = 1
	case "\"Low\"":
		*e = 2
	case "\"Medium\"":
		*e = 3
	case "\"High\"":
		*e = 4
	case "\"VeryHigh\"":
		*e = 5
	default:
		return fmt.Errorf("cdptype.NetworkResourcePriority: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// NetworkRequest HTTP request data.
type NetworkRequest struct {
	URL              string                  `json:"url"`                        // Request URL.
	Method           string                  `json:"method"`                     // HTTP request method.
	Headers          NetworkHeaders          `json:"headers"`                    // HTTP request headers.
	PostData         *string                 `json:"postData,omitempty"`         // HTTP POST request data.
	MixedContentType *string                 `json:"mixedContentType,omitempty"` // The mixed content status of the request, as defined in http://www.w3.org/TR/mixed-content/
	InitialPriority  NetworkResourcePriority `json:"initialPriority"`            // Priority of the resource request at the time request is sent.
	ReferrerPolicy   string                  `json:"referrerPolicy"`             // The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/
	IsLinkPreload    *bool                   `json:"isLinkPreload,omitempty"`    // Whether is loaded via link preload.
}

// NetworkSignedCertificateTimestamp Details of a signed certificate timestamp (SCT).
type NetworkSignedCertificateTimestamp struct {
	Status             string           `json:"status"`             // Validation status.
	Origin             string           `json:"origin"`             // Origin.
	LogDescription     string           `json:"logDescription"`     // Log name / description.
	LogID              string           `json:"logId"`              // Log ID.
	Timestamp          NetworkTimestamp `json:"timestamp"`          // Issuance date.
	HashAlgorithm      string           `json:"hashAlgorithm"`      // Hash algorithm.
	SignatureAlgorithm string           `json:"signatureAlgorithm"` // Signature algorithm.
	SignatureData      string           `json:"signatureData"`      // Signature data.
}

// NetworkSecurityDetails Security details about a request.
type NetworkSecurityDetails struct {
	Protocol                       string                              `json:"protocol"`                       // Protocol name (e.g. "TLS 1.2" or "QUIC").
	KeyExchange                    string                              `json:"keyExchange"`                    // Key Exchange used by the connection, or the empty string if not applicable.
	KeyExchangeGroup               *string                             `json:"keyExchangeGroup,omitempty"`     // (EC)DH group used by the connection, if applicable.
	Cipher                         string                              `json:"cipher"`                         // Cipher name.
	Mac                            *string                             `json:"mac,omitempty"`                  // TLS MAC. Note that AEAD ciphers do not have separate MACs.
	CertificateID                  SecurityCertificateID               `json:"certificateId"`                  // Certificate ID value.
	SubjectName                    string                              `json:"subjectName"`                    // Certificate subject name.
	SanList                        []string                            `json:"sanList"`                        // Subject Alternative Name (SAN) DNS names and IP addresses.
	Issuer                         string                              `json:"issuer"`                         // Name of the issuing CA.
	ValidFrom                      NetworkTimestamp                    `json:"validFrom"`                      // Certificate valid from date.
	ValidTo                        NetworkTimestamp                    `json:"validTo"`                        // Certificate valid to (expiration) date
	SignedCertificateTimestampList []NetworkSignedCertificateTimestamp `json:"signedCertificateTimestampList"` // List of signed certificate timestamps (SCTs).
}

// NetworkBlockedReason The reason why request was blocked.
type NetworkBlockedReason int

// NetworkBlockedReason as enums.
const (
	NetworkBlockedReasonNotSet NetworkBlockedReason = iota
	NetworkBlockedReasonCsp
	NetworkBlockedReasonMixedContent
	NetworkBlockedReasonOrigin
	NetworkBlockedReasonInspector
	NetworkBlockedReasonSubresourceFilter
	NetworkBlockedReasonOther
)

// Valid returns true if enum is set.
func (e NetworkBlockedReason) Valid() bool {
	return e >= 1 && e <= 6
}

func (e NetworkBlockedReason) String() string {
	switch e {
	case 0:
		return "NetworkBlockedReasonNotSet"
	case 1:
		return "csp"
	case 2:
		return "mixed-content"
	case 3:
		return "origin"
	case 4:
		return "inspector"
	case 5:
		return "subresource-filter"
	case 6:
		return "other"
	}
	return fmt.Sprintf("NetworkBlockedReason(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e NetworkBlockedReason) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.NetworkBlockedReason: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *NetworkBlockedReason) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"csp\"":
		*e = 1
	case "\"mixed-content\"":
		*e = 2
	case "\"origin\"":
		*e = 3
	case "\"inspector\"":
		*e = 4
	case "\"subresource-filter\"":
		*e = 5
	case "\"other\"":
		*e = 6
	default:
		return fmt.Errorf("cdptype.NetworkBlockedReason: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// NetworkResponse HTTP response data.
type NetworkResponse struct {
	URL                string                  `json:"url"`                          // Response URL. This URL can be different from CachedResource.url in case of redirect.
	Status             float64                 `json:"status"`                       // HTTP response status code.
	StatusText         string                  `json:"statusText"`                   // HTTP response status text.
	Headers            NetworkHeaders          `json:"headers"`                      // HTTP response headers.
	HeadersText        *string                 `json:"headersText,omitempty"`        // HTTP response headers text.
	MimeType           string                  `json:"mimeType"`                     // Resource mimeType as determined by the browser.
	RequestHeaders     NetworkHeaders          `json:"requestHeaders,omitempty"`     // Refined HTTP request headers that were actually transmitted over the network.
	RequestHeadersText *string                 `json:"requestHeadersText,omitempty"` // HTTP request headers text.
	ConnectionReused   bool                    `json:"connectionReused"`             // Specifies whether physical connection was actually reused for this request.
	ConnectionID       float64                 `json:"connectionId"`                 // Physical connection id that was actually used for this request.
	RemoteIPAddress    *string                 `json:"remoteIPAddress,omitempty"`    // Remote IP address.
	RemotePort         *int                    `json:"remotePort,omitempty"`         // Remote port.
	FromDiskCache      *bool                   `json:"fromDiskCache,omitempty"`      // Specifies that the request was served from the disk cache.
	FromServiceWorker  *bool                   `json:"fromServiceWorker,omitempty"`  // Specifies that the request was served from the ServiceWorker.
	EncodedDataLength  float64                 `json:"encodedDataLength"`            // Total number of bytes received for this request so far.
	Timing             *NetworkResourceTiming  `json:"timing,omitempty"`             // Timing information for the given request.
	Protocol           *string                 `json:"protocol,omitempty"`           // Protocol used to fetch this request.
	SecurityState      SecurityState           `json:"securityState"`                // Security state of the request resource.
	SecurityDetails    *NetworkSecurityDetails `json:"securityDetails,omitempty"`    // Security details for the request.
}

// NetworkWebSocketRequest WebSocket request data.
type NetworkWebSocketRequest struct {
	Headers NetworkHeaders `json:"headers"` // HTTP request headers.
}

// NetworkWebSocketResponse WebSocket response data.
type NetworkWebSocketResponse struct {
	Status             float64        `json:"status"`                       // HTTP response status code.
	StatusText         string         `json:"statusText"`                   // HTTP response status text.
	Headers            NetworkHeaders `json:"headers"`                      // HTTP response headers.
	HeadersText        *string        `json:"headersText,omitempty"`        // HTTP response headers text.
	RequestHeaders     NetworkHeaders `json:"requestHeaders,omitempty"`     // HTTP request headers.
	RequestHeadersText *string        `json:"requestHeadersText,omitempty"` // HTTP request headers text.
}

// NetworkWebSocketFrame WebSocket frame data.
type NetworkWebSocketFrame struct {
	Opcode      float64 `json:"opcode"`      // WebSocket frame opcode.
	Mask        bool    `json:"mask"`        // WebSocke frame mask.
	PayloadData string  `json:"payloadData"` // WebSocke frame payload data.
}

// NetworkCachedResource Information about the cached resource.
type NetworkCachedResource struct {
	URL      string           `json:"url"`                // Resource URL. This is the url of the original network request.
	Type     PageResourceType `json:"type"`               // Type of this resource.
	Response *NetworkResponse `json:"response,omitempty"` // Cached response data.
	BodySize float64          `json:"bodySize"`           // Cached response body size.
}

// NetworkInitiator Information about the request initiator.
type NetworkInitiator struct {
	Type       string             `json:"type"`                 // Type of this initiator.
	Stack      *RuntimeStackTrace `json:"stack,omitempty"`      // Initiator JavaScript stack trace, set for Script only.
	URL        *string            `json:"url,omitempty"`        // Initiator URL, set for Parser type or for Script type (when script is importing module).
	LineNumber *float64           `json:"lineNumber,omitempty"` // Initiator line number, set for Parser type or for Script type (when script is importing module) (0-based).
}

// NetworkCookie Cookie object
type NetworkCookie struct {
	Name     string                `json:"name"`               // Cookie name.
	Value    string                `json:"value"`              // Cookie value.
	Domain   string                `json:"domain"`             // Cookie domain.
	Path     string                `json:"path"`               // Cookie path.
	Expires  float64               `json:"expires"`            // Cookie expiration date as the number of seconds since the UNIX epoch.
	Size     int                   `json:"size"`               // Cookie size.
	HTTPOnly bool                  `json:"httpOnly"`           // True if cookie is http-only.
	Secure   bool                  `json:"secure"`             // True if cookie is secure.
	Session  bool                  `json:"session"`            // True in case of session cookie.
	SameSite NetworkCookieSameSite `json:"sameSite,omitempty"` // Cookie SameSite type.
}

// NetworkAuthChallenge Authorization challenge for HTTP status code 401 or 407.
type NetworkAuthChallenge struct {
	Source *string `json:"source,omitempty"` // Source of the authentication challenge.
	Origin string  `json:"origin"`           // Origin of the challenger.
	Scheme string  `json:"scheme"`           // The authentication scheme used, such as basic or digest
	Realm  string  `json:"realm"`            // The realm of the challenge. May be empty.
}

// NetworkAuthChallengeResponse Response to an AuthChallenge.
type NetworkAuthChallengeResponse struct {
	Response string  `json:"response"`           // The decision on what to do in response to the authorization challenge.  Default means deferring to the default behavior of the net stack, which will likely either the Cancel authentication or display a popup dialog box.
	Username *string `json:"username,omitempty"` // The username to provide, possibly empty. Should only be set if response is ProvideCredentials.
	Password *string `json:"password,omitempty"` // The password to provide, possibly empty. Should only be set if response is ProvideCredentials.
}

// OverlayHighlightConfig Configuration data for the highlighting of page elements.
type OverlayHighlightConfig struct {
	ShowInfo           *bool    `json:"showInfo,omitempty"`           // Whether the node info tooltip should be shown (default: false).
	ShowRulers         *bool    `json:"showRulers,omitempty"`         // Whether the rulers should be shown (default: false).
	ShowExtensionLines *bool    `json:"showExtensionLines,omitempty"` // Whether the extension lines from node to the rulers should be shown (default: false).
	DisplayAsMaterial  *bool    `json:"displayAsMaterial,omitempty"`  //
	ContentColor       *DOMRGBA `json:"contentColor,omitempty"`       // The content box highlight fill color (default: transparent).
	PaddingColor       *DOMRGBA `json:"paddingColor,omitempty"`       // The padding highlight fill color (default: transparent).
	BorderColor        *DOMRGBA `json:"borderColor,omitempty"`        // The border highlight fill color (default: transparent).
	MarginColor        *DOMRGBA `json:"marginColor,omitempty"`        // The margin highlight fill color (default: transparent).
	EventTargetColor   *DOMRGBA `json:"eventTargetColor,omitempty"`   // The event target element highlight fill color (default: transparent).
	ShapeColor         *DOMRGBA `json:"shapeColor,omitempty"`         // The shape outside fill color (default: transparent).
	ShapeMarginColor   *DOMRGBA `json:"shapeMarginColor,omitempty"`   // The shape margin fill color (default: transparent).
	SelectorList       *string  `json:"selectorList,omitempty"`       // Selectors to highlight relevant nodes.
}

// OverlayInspectMode
type OverlayInspectMode int

// OverlayInspectMode as enums.
const (
	OverlayInspectModeNotSet OverlayInspectMode = iota
	OverlayInspectModeSearchForNode
	OverlayInspectModeSearchForUAShadowDOM
	OverlayInspectModeNone
)

// Valid returns true if enum is set.
func (e OverlayInspectMode) Valid() bool {
	return e >= 1 && e <= 3
}

func (e OverlayInspectMode) String() string {
	switch e {
	case 0:
		return "OverlayInspectModeNotSet"
	case 1:
		return "searchForNode"
	case 2:
		return "searchForUAShadowDOM"
	case 3:
		return "none"
	}
	return fmt.Sprintf("OverlayInspectMode(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e OverlayInspectMode) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.OverlayInspectMode: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *OverlayInspectMode) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"searchForNode\"":
		*e = 1
	case "\"searchForUAShadowDOM\"":
		*e = 2
	case "\"none\"":
		*e = 3
	default:
		return fmt.Errorf("cdptype.OverlayInspectMode: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// PageResourceType Resource type as it was perceived by the rendering engine.
type PageResourceType int

// PageResourceType as enums.
const (
	PageResourceTypeNotSet PageResourceType = iota
	PageResourceTypeDocument
	PageResourceTypeStylesheet
	PageResourceTypeImage
	PageResourceTypeMedia
	PageResourceTypeFont
	PageResourceTypeScript
	PageResourceTypeTextTrack
	PageResourceTypeXHR
	PageResourceTypeFetch
	PageResourceTypeEventSource
	PageResourceTypeWebSocket
	PageResourceTypeManifest
	PageResourceTypeOther
)

// Valid returns true if enum is set.
func (e PageResourceType) Valid() bool {
	return e >= 1 && e <= 13
}

func (e PageResourceType) String() string {
	switch e {
	case 0:
		return "PageResourceTypeNotSet"
	case 1:
		return "Document"
	case 2:
		return "Stylesheet"
	case 3:
		return "Image"
	case 4:
		return "Media"
	case 5:
		return "Font"
	case 6:
		return "Script"
	case 7:
		return "TextTrack"
	case 8:
		return "XHR"
	case 9:
		return "Fetch"
	case 10:
		return "EventSource"
	case 11:
		return "WebSocket"
	case 12:
		return "Manifest"
	case 13:
		return "Other"
	}
	return fmt.Sprintf("PageResourceType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e PageResourceType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.PageResourceType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *PageResourceType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"Document\"":
		*e = 1
	case "\"Stylesheet\"":
		*e = 2
	case "\"Image\"":
		*e = 3
	case "\"Media\"":
		*e = 4
	case "\"Font\"":
		*e = 5
	case "\"Script\"":
		*e = 6
	case "\"TextTrack\"":
		*e = 7
	case "\"XHR\"":
		*e = 8
	case "\"Fetch\"":
		*e = 9
	case "\"EventSource\"":
		*e = 10
	case "\"WebSocket\"":
		*e = 11
	case "\"Manifest\"":
		*e = 12
	case "\"Other\"":
		*e = 13
	default:
		return fmt.Errorf("cdptype.PageResourceType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// PageFrameID Unique frame identifier.
type PageFrameID string

// PageFrame Information about the Frame on the page.
type PageFrame struct {
	ID             PageFrameID     `json:"id"`                 // Frame unique identifier.
	ParentID       *PageFrameID    `json:"parentId,omitempty"` // Parent frame identifier.
	LoaderID       NetworkLoaderID `json:"loaderId"`           // Identifier of the loader associated with this frame.
	Name           *string         `json:"name,omitempty"`     // Frame's name as specified in the tag.
	URL            string          `json:"url"`                // Frame document's URL.
	SecurityOrigin string          `json:"securityOrigin"`     // Frame document's security origin.
	MimeType       string          `json:"mimeType"`           // Frame document's mimeType as determined by the browser.
}

// PageFrameResource Information about the Resource on the page.
type PageFrameResource struct {
	URL          string           `json:"url"`                    // Resource URL.
	Type         PageResourceType `json:"type"`                   // Type of this resource.
	MimeType     string           `json:"mimeType"`               // Resource mimeType as determined by the browser.
	LastModified NetworkTimestamp `json:"lastModified,omitempty"` // last-modified timestamp as reported by server.
	ContentSize  *float64         `json:"contentSize,omitempty"`  // Resource content size.
	Failed       *bool            `json:"failed,omitempty"`       // True if the resource failed to load.
	Canceled     *bool            `json:"canceled,omitempty"`     // True if the resource was canceled during loading.
}

// PageFrameResourceTree Information about the Frame hierarchy along with their cached resources.
type PageFrameResourceTree struct {
	Frame       PageFrame               `json:"frame"`                 // Frame information for this tree item.
	ChildFrames []PageFrameResourceTree `json:"childFrames,omitempty"` // Child frames.
	Resources   []PageFrameResource     `json:"resources"`             // Information about frame resources.
}

// PageScriptIdentifier Unique script identifier.
type PageScriptIdentifier string

// PageTransitionType Transition type.
type PageTransitionType int

// PageTransitionType as enums.
const (
	PageTransitionTypeNotSet PageTransitionType = iota
	PageTransitionTypeLink
	PageTransitionTypeTyped
	PageTransitionTypeAutoBookmark
	PageTransitionTypeAutoSubframe
	PageTransitionTypeManualSubframe
	PageTransitionTypeGenerated
	PageTransitionTypeAutoToplevel
	PageTransitionTypeFormSubmit
	PageTransitionTypeReload
	PageTransitionTypeKeyword
	PageTransitionTypeKeywordGenerated
	PageTransitionTypeOther
)

// Valid returns true if enum is set.
func (e PageTransitionType) Valid() bool {
	return e >= 1 && e <= 12
}

func (e PageTransitionType) String() string {
	switch e {
	case 0:
		return "PageTransitionTypeNotSet"
	case 1:
		return "link"
	case 2:
		return "typed"
	case 3:
		return "auto_bookmark"
	case 4:
		return "auto_subframe"
	case 5:
		return "manual_subframe"
	case 6:
		return "generated"
	case 7:
		return "auto_toplevel"
	case 8:
		return "form_submit"
	case 9:
		return "reload"
	case 10:
		return "keyword"
	case 11:
		return "keyword_generated"
	case 12:
		return "other"
	}
	return fmt.Sprintf("PageTransitionType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e PageTransitionType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.PageTransitionType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *PageTransitionType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"link\"":
		*e = 1
	case "\"typed\"":
		*e = 2
	case "\"auto_bookmark\"":
		*e = 3
	case "\"auto_subframe\"":
		*e = 4
	case "\"manual_subframe\"":
		*e = 5
	case "\"generated\"":
		*e = 6
	case "\"auto_toplevel\"":
		*e = 7
	case "\"form_submit\"":
		*e = 8
	case "\"reload\"":
		*e = 9
	case "\"keyword\"":
		*e = 10
	case "\"keyword_generated\"":
		*e = 11
	case "\"other\"":
		*e = 12
	default:
		return fmt.Errorf("cdptype.PageTransitionType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// PageNavigationEntry Navigation history entry.
type PageNavigationEntry struct {
	ID             int                `json:"id"`             // Unique id of the navigation history entry.
	URL            string             `json:"url"`            // URL of the navigation history entry.
	UserTypedURL   string             `json:"userTypedURL"`   // URL that the user typed in the url bar.
	Title          string             `json:"title"`          // Title of the navigation history entry.
	TransitionType PageTransitionType `json:"transitionType"` // Transition type.
}

// PageScreencastFrameMetadata Screencast frame metadata.
type PageScreencastFrameMetadata struct {
	OffsetTop       float64   `json:"offsetTop"`           // Top offset in DIP.
	PageScaleFactor float64   `json:"pageScaleFactor"`     // Page scale factor.
	DeviceWidth     float64   `json:"deviceWidth"`         // Device screen width in DIP.
	DeviceHeight    float64   `json:"deviceHeight"`        // Device screen height in DIP.
	ScrollOffsetX   float64   `json:"scrollOffsetX"`       // Position of horizontal scroll in CSS pixels.
	ScrollOffsetY   float64   `json:"scrollOffsetY"`       // Position of vertical scroll in CSS pixels.
	Timestamp       Timestamp `json:"timestamp,omitempty"` // Frame swap timestamp.
}

// PageDialogType Javascript dialog type.
type PageDialogType int

// PageDialogType as enums.
const (
	PageDialogTypeNotSet PageDialogType = iota
	PageDialogTypeAlert
	PageDialogTypeConfirm
	PageDialogTypePrompt
	PageDialogTypeBeforeunload
)

// Valid returns true if enum is set.
func (e PageDialogType) Valid() bool {
	return e >= 1 && e <= 4
}

func (e PageDialogType) String() string {
	switch e {
	case 0:
		return "PageDialogTypeNotSet"
	case 1:
		return "alert"
	case 2:
		return "confirm"
	case 3:
		return "prompt"
	case 4:
		return "beforeunload"
	}
	return fmt.Sprintf("PageDialogType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e PageDialogType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.PageDialogType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *PageDialogType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"alert\"":
		*e = 1
	case "\"confirm\"":
		*e = 2
	case "\"prompt\"":
		*e = 3
	case "\"beforeunload\"":
		*e = 4
	default:
		return fmt.Errorf("cdptype.PageDialogType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// PageAppManifestError Error while paring app manifest.
type PageAppManifestError struct {
	Message  string `json:"message"`  // Error message.
	Critical int    `json:"critical"` // If criticial, this is a non-recoverable parse error.
	Line     int    `json:"line"`     // Error line.
	Column   int    `json:"column"`   // Error column.
}

// PageNavigationResponse Proceed: allow the navigation; Cancel: cancel the navigation; CancelAndIgnore: cancels the navigation and makes the requester of the navigation acts like the request was never made.
type PageNavigationResponse int

// PageNavigationResponse as enums.
const (
	PageNavigationResponseNotSet PageNavigationResponse = iota
	PageNavigationResponseProceed
	PageNavigationResponseCancel
	PageNavigationResponseCancelAndIgnore
)

// Valid returns true if enum is set.
func (e PageNavigationResponse) Valid() bool {
	return e >= 1 && e <= 3
}

func (e PageNavigationResponse) String() string {
	switch e {
	case 0:
		return "PageNavigationResponseNotSet"
	case 1:
		return "Proceed"
	case 2:
		return "Cancel"
	case 3:
		return "CancelAndIgnore"
	}
	return fmt.Sprintf("PageNavigationResponse(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e PageNavigationResponse) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.PageNavigationResponse: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *PageNavigationResponse) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"Proceed\"":
		*e = 1
	case "\"Cancel\"":
		*e = 2
	case "\"CancelAndIgnore\"":
		*e = 3
	default:
		return fmt.Errorf("cdptype.PageNavigationResponse: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// PageLayoutViewport Layout viewport position and dimensions.
type PageLayoutViewport struct {
	PageX        int `json:"pageX"`        // Horizontal offset relative to the document (CSS pixels).
	PageY        int `json:"pageY"`        // Vertical offset relative to the document (CSS pixels).
	ClientWidth  int `json:"clientWidth"`  // Width (CSS pixels), excludes scrollbar if present.
	ClientHeight int `json:"clientHeight"` // Height (CSS pixels), excludes scrollbar if present.
}

// PageVisualViewport Visual viewport position, dimensions, and scale.
type PageVisualViewport struct {
	OffsetX      float64 `json:"offsetX"`      // Horizontal offset relative to the layout viewport (CSS pixels).
	OffsetY      float64 `json:"offsetY"`      // Vertical offset relative to the layout viewport (CSS pixels).
	PageX        float64 `json:"pageX"`        // Horizontal offset relative to the document (CSS pixels).
	PageY        float64 `json:"pageY"`        // Vertical offset relative to the document (CSS pixels).
	ClientWidth  float64 `json:"clientWidth"`  // Width (CSS pixels), excludes scrollbar if present.
	ClientHeight float64 `json:"clientHeight"` // Height (CSS pixels), excludes scrollbar if present.
	Scale        float64 `json:"scale"`        // Scale relative to the ideal viewport (size at width=device-width).
}

// ProfilerProfileNode Profile node. Holds callsite information, execution statistics and child nodes.
type ProfilerProfileNode struct {
	ID            int                        `json:"id"`                      // Unique id of the node.
	CallFrame     RuntimeCallFrame           `json:"callFrame"`               // Function location.
	HitCount      *int                       `json:"hitCount,omitempty"`      // Number of samples where this node was on top of the call stack.
	Children      []int                      `json:"children,omitempty"`      // Child node ids.
	DeoptReason   *string                    `json:"deoptReason,omitempty"`   // The reason of being not optimized. The function may be deoptimized or marked as don't optimize.
	PositionTicks []ProfilerPositionTickInfo `json:"positionTicks,omitempty"` // An array of source position ticks.
}

// ProfilerProfile Profile.
type ProfilerProfile struct {
	Nodes      []ProfilerProfileNode `json:"nodes"`                // The list of profile nodes. First item is the root node.
	StartTime  float64               `json:"startTime"`            // Profiling start timestamp in microseconds.
	EndTime    float64               `json:"endTime"`              // Profiling end timestamp in microseconds.
	Samples    []int                 `json:"samples,omitempty"`    // Ids of samples top nodes.
	TimeDeltas []int                 `json:"timeDeltas,omitempty"` // Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime.
}

// ProfilerPositionTickInfo Specifies a number of samples attributed to a certain source position.
type ProfilerPositionTickInfo struct {
	Line  int `json:"line"`  // Source line number (1-based).
	Ticks int `json:"ticks"` // Number of samples attributed to the source line.
}

// ProfilerCoverageRange Coverage data for a source range.
type ProfilerCoverageRange struct {
	StartOffset int `json:"startOffset"` // JavaScript script source offset for the range start.
	EndOffset   int `json:"endOffset"`   // JavaScript script source offset for the range end.
	Count       int `json:"count"`       // Collected execution count of the source range.
}

// ProfilerFunctionCoverage Coverage data for a JavaScript function.
type ProfilerFunctionCoverage struct {
	FunctionName    string                  `json:"functionName"`    // JavaScript function name.
	Ranges          []ProfilerCoverageRange `json:"ranges"`          // Source ranges inside the function with coverage data.
	IsBlockCoverage bool                    `json:"isBlockCoverage"` // Whether coverage data for this function has block granularity.
}

// ProfilerScriptCoverage Coverage data for a JavaScript script.
type ProfilerScriptCoverage struct {
	ScriptID  RuntimeScriptID            `json:"scriptId"`  // JavaScript script id.
	URL       string                     `json:"url"`       // JavaScript script name or url.
	Functions []ProfilerFunctionCoverage `json:"functions"` // Functions contained in the script that has coverage data.
}

// RuntimeScriptID Unique script identifier.
type RuntimeScriptID string

// RuntimeRemoteObjectID Unique object identifier.
type RuntimeRemoteObjectID string

// RuntimeUnserializableValue Primitive value which cannot be JSON-stringified.
type RuntimeUnserializableValue int

// RuntimeUnserializableValue as enums.
const (
	RuntimeUnserializableValueNotSet RuntimeUnserializableValue = iota
	RuntimeUnserializableValueInfinity
	RuntimeUnserializableValueNaN
	RuntimeUnserializableValueNegativeInfinity
	RuntimeUnserializableValueNegative0
)

// Valid returns true if enum is set.
func (e RuntimeUnserializableValue) Valid() bool {
	return e >= 1 && e <= 4
}

func (e RuntimeUnserializableValue) String() string {
	switch e {
	case 0:
		return "RuntimeUnserializableValueNotSet"
	case 1:
		return "Infinity"
	case 2:
		return "NaN"
	case 3:
		return "-Infinity"
	case 4:
		return "-0"
	}
	return fmt.Sprintf("RuntimeUnserializableValue(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e RuntimeUnserializableValue) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.RuntimeUnserializableValue: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *RuntimeUnserializableValue) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"Infinity\"":
		*e = 1
	case "\"NaN\"":
		*e = 2
	case "\"-Infinity\"":
		*e = 3
	case "\"-0\"":
		*e = 4
	default:
		return fmt.Errorf("cdptype.RuntimeUnserializableValue: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// RuntimeRemoteObject Mirror object referencing original JavaScript object.
type RuntimeRemoteObject struct {
	Type                string                     `json:"type"`                          // Object type.
	Subtype             *string                    `json:"subtype,omitempty"`             // Object subtype hint. Specified for object type values only.
	ClassName           *string                    `json:"className,omitempty"`           // Object class (constructor) name. Specified for object type values only.
	Value               json.RawMessage            `json:"value,omitempty"`               // Remote object value in case of primitive values or JSON values (if it was requested).
	UnserializableValue RuntimeUnserializableValue `json:"unserializableValue,omitempty"` // Primitive value which can not be JSON-stringified does not have value, but gets this property.
	Description         *string                    `json:"description,omitempty"`         // String representation of the object.
	ObjectID            *RuntimeRemoteObjectID     `json:"objectId,omitempty"`            // Unique object identifier (for non-primitive values).
	Preview             *RuntimeObjectPreview      `json:"preview,omitempty"`             // Preview containing abbreviated property values. Specified for object type values only.
	CustomPreview       *RuntimeCustomPreview      `json:"customPreview,omitempty"`       //
}

// RuntimeCustomPreview
type RuntimeCustomPreview struct {
	Header                     string                 `json:"header"`                     //
	HasBody                    bool                   `json:"hasBody"`                    //
	FormatterObjectID          RuntimeRemoteObjectID  `json:"formatterObjectId"`          //
	BindRemoteObjectFunctionID RuntimeRemoteObjectID  `json:"bindRemoteObjectFunctionId"` //
	ConfigObjectID             *RuntimeRemoteObjectID `json:"configObjectId,omitempty"`   //
}

// RuntimeObjectPreview Object containing abbreviated remote object value.
type RuntimeObjectPreview struct {
	Type        string                   `json:"type"`                  // Object type.
	Subtype     *string                  `json:"subtype,omitempty"`     // Object subtype hint. Specified for object type values only.
	Description *string                  `json:"description,omitempty"` // String representation of the object.
	Overflow    bool                     `json:"overflow"`              // True iff some of the properties or entries of the original object did not fit.
	Properties  []RuntimePropertyPreview `json:"properties"`            // List of the properties.
	Entries     []RuntimeEntryPreview    `json:"entries,omitempty"`     // List of the entries. Specified for map and set subtype values only.
}

// RuntimePropertyPreview
type RuntimePropertyPreview struct {
	Name         string                `json:"name"`                   // Property name.
	Type         string                `json:"type"`                   // Object type. Accessor means that the property itself is an accessor property.
	Value        *string               `json:"value,omitempty"`        // User-friendly property value string.
	ValuePreview *RuntimeObjectPreview `json:"valuePreview,omitempty"` // Nested value preview.
	Subtype      *string               `json:"subtype,omitempty"`      // Object subtype hint. Specified for object type values only.
}

// RuntimeEntryPreview
type RuntimeEntryPreview struct {
	Key   *RuntimeObjectPreview `json:"key,omitempty"` // Preview of the key. Specified for map-like collection entries.
	Value RuntimeObjectPreview  `json:"value"`         // Preview of the value.
}

// RuntimePropertyDescriptor Object property descriptor.
type RuntimePropertyDescriptor struct {
	Name         string               `json:"name"`                // Property name or symbol description.
	Value        *RuntimeRemoteObject `json:"value,omitempty"`     // The value associated with the property.
	Writable     *bool                `json:"writable,omitempty"`  // True if the value associated with the property may be changed (data descriptors only).
	Get          *RuntimeRemoteObject `json:"get,omitempty"`       // A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).
	Set          *RuntimeRemoteObject `json:"set,omitempty"`       // A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).
	Configurable bool                 `json:"configurable"`        // True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.
	Enumerable   bool                 `json:"enumerable"`          // True if this property shows up during enumeration of the properties on the corresponding object.
	WasThrown    *bool                `json:"wasThrown,omitempty"` // True if the result was thrown during the evaluation.
	IsOwn        *bool                `json:"isOwn,omitempty"`     // True if the property is owned for the object.
	Symbol       *RuntimeRemoteObject `json:"symbol,omitempty"`    // Property symbol object, if the property is of the symbol type.
}

// RuntimeInternalPropertyDescriptor Object internal property descriptor. This property isn't normally visible in JavaScript code.
type RuntimeInternalPropertyDescriptor struct {
	Name  string               `json:"name"`            // Conventional property name.
	Value *RuntimeRemoteObject `json:"value,omitempty"` // The value associated with the property.
}

// RuntimeCallArgument Represents function call argument. Either remote object id objectId, primitive value, unserializable primitive value or neither of (for undefined) them should be specified.
type RuntimeCallArgument struct {
	Value               json.RawMessage            `json:"value,omitempty"`               // Primitive value.
	UnserializableValue RuntimeUnserializableValue `json:"unserializableValue,omitempty"` // Primitive value which can not be JSON-stringified.
	ObjectID            *RuntimeRemoteObjectID     `json:"objectId,omitempty"`            // Remote object handle.
}

// RuntimeExecutionContextID Id of an execution context.
type RuntimeExecutionContextID int

// RuntimeExecutionContextDescription Description of an isolated world.
type RuntimeExecutionContextDescription struct {
	ID      RuntimeExecutionContextID `json:"id"`                // Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed.
	Origin  string                    `json:"origin"`            // Execution context origin.
	Name    string                    `json:"name"`              // Human readable name describing given context.
	AuxData json.RawMessage           `json:"auxData,omitempty"` // Embedder-specific auxiliary data.
}

// RuntimeExceptionDetails Detailed information about exception (or error) that was thrown during script compilation or execution.
type RuntimeExceptionDetails struct {
	ExceptionID        int                        `json:"exceptionId"`                  // Exception id.
	Text               string                     `json:"text"`                         // Exception text, which should be used together with exception object when available.
	LineNumber         int                        `json:"lineNumber"`                   // Line number of the exception location (0-based).
	ColumnNumber       int                        `json:"columnNumber"`                 // Column number of the exception location (0-based).
	ScriptID           *RuntimeScriptID           `json:"scriptId,omitempty"`           // Script ID of the exception location.
	URL                *string                    `json:"url,omitempty"`                // URL of the exception location, to be used when the script was not reported.
	StackTrace         *RuntimeStackTrace         `json:"stackTrace,omitempty"`         // JavaScript stack trace if available.
	Exception          *RuntimeRemoteObject       `json:"exception,omitempty"`          // Exception object if available.
	ExecutionContextID *RuntimeExecutionContextID `json:"executionContextId,omitempty"` // Identifier of the context where exception happened.
}

// RuntimeTimestamp Number of milliseconds since epoch.
type RuntimeTimestamp float64

// String calls (time.Time).String().
func (t RuntimeTimestamp) String() string {
	return t.Time().String()
}

// Time parses the Unix time with millisecond accuracy.
func (t RuntimeTimestamp) Time() time.Time {
	secs := int64(t)
	// The Unix time in t only has ms accuracy.
	ms := int64((float64(t) - float64(secs)) * 1000000)
	return time.Unix(secs, ms*1000)
}

// MarshalJSON implements json.Marshaler. Encodes to null if t is zero.
func (t RuntimeTimestamp) MarshalJSON() ([]byte, error) {
	if t == 0 {
		return []byte("null"), nil
	}
	f := float64(t)
	return json.Marshal(&f)
}

// UnmarshalJSON implements json.Unmarshaler.
func (t *RuntimeTimestamp) UnmarshalJSON(data []byte) error {
	*t = 0
	if len(data) == 0 {
		return nil
	}
	var f float64
	if err := json.Unmarshal(data, &f); err != nil {
		return errors.New("cdptype.RuntimeTimestamp: " + err.Error())
	}
	*t = RuntimeTimestamp(f)
	return nil
}

var _ json.Marshaler = (*RuntimeTimestamp)(nil)
var _ json.Unmarshaler = (*RuntimeTimestamp)(nil)

// RuntimeCallFrame Stack entry for runtime errors and assertions.
type RuntimeCallFrame struct {
	FunctionName string          `json:"functionName"` // JavaScript function name.
	ScriptID     RuntimeScriptID `json:"scriptId"`     // JavaScript script id.
	URL          string          `json:"url"`          // JavaScript script name or url.
	LineNumber   int             `json:"lineNumber"`   // JavaScript script line number (0-based).
	ColumnNumber int             `json:"columnNumber"` // JavaScript script column number (0-based).
}

// RuntimeStackTrace Call frames for assertions or error messages.
type RuntimeStackTrace struct {
	Description          *string            `json:"description,omitempty"`          // String label of this stack trace. For async traces this may be a name of the function that initiated the async call.
	CallFrames           []RuntimeCallFrame `json:"callFrames"`                     // JavaScript function name.
	Parent               *RuntimeStackTrace `json:"parent,omitempty"`               // Asynchronous JavaScript stack trace that preceded this stack, if available.
	PromiseCreationFrame *RuntimeCallFrame  `json:"promiseCreationFrame,omitempty"` // Creation frame of the Promise which produced the next synchronous trace when resolved, if available.
}

// SchemaDomain Description of the protocol domain.
type SchemaDomain struct {
	Name    string `json:"name"`    // Domain name.
	Version string `json:"version"` // Domain version.
}

// SecurityCertificateID An internal certificate ID value.
type SecurityCertificateID int

// SecurityState The security level of a page or resource.
type SecurityState int

// SecurityState as enums.
const (
	SecurityStateNotSet SecurityState = iota
	SecurityStateUnknown
	SecurityStateNeutral
	SecurityStateInsecure
	SecurityStateWarning
	SecurityStateSecure
	SecurityStateInfo
)

// Valid returns true if enum is set.
func (e SecurityState) Valid() bool {
	return e >= 1 && e <= 6
}

func (e SecurityState) String() string {
	switch e {
	case 0:
		return "SecurityStateNotSet"
	case 1:
		return "unknown"
	case 2:
		return "neutral"
	case 3:
		return "insecure"
	case 4:
		return "warning"
	case 5:
		return "secure"
	case 6:
		return "info"
	}
	return fmt.Sprintf("SecurityState(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e SecurityState) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.SecurityState: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *SecurityState) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"unknown\"":
		*e = 1
	case "\"neutral\"":
		*e = 2
	case "\"insecure\"":
		*e = 3
	case "\"warning\"":
		*e = 4
	case "\"secure\"":
		*e = 5
	case "\"info\"":
		*e = 6
	default:
		return fmt.Errorf("cdptype.SecurityState: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// SecurityStateExplanation An explanation of an factor contributing to the security state.
type SecurityStateExplanation struct {
	SecurityState  SecurityState `json:"securityState"`  // Security state representing the severity of the factor being explained.
	Summary        string        `json:"summary"`        // Short phrase describing the type of factor.
	Description    string        `json:"description"`    // Full text explanation of the factor.
	HasCertificate bool          `json:"hasCertificate"` // True if the page has a certificate.
}

// SecurityInsecureContentStatus Information about insecure content on the page.
type SecurityInsecureContentStatus struct {
	RanMixedContent                bool          `json:"ranMixedContent"`                // True if the page was loaded over HTTPS and ran mixed (HTTP) content such as scripts.
	DisplayedMixedContent          bool          `json:"displayedMixedContent"`          // True if the page was loaded over HTTPS and displayed mixed (HTTP) content such as images.
	ContainedMixedForm             bool          `json:"containedMixedForm"`             // True if the page was loaded over HTTPS and contained a form targeting an insecure url.
	RanContentWithCertErrors       bool          `json:"ranContentWithCertErrors"`       // True if the page was loaded over HTTPS without certificate errors, and ran content such as scripts that were loaded with certificate errors.
	DisplayedContentWithCertErrors bool          `json:"displayedContentWithCertErrors"` // True if the page was loaded over HTTPS without certificate errors, and displayed content such as images that were loaded with certificate errors.
	RanInsecureContentStyle        SecurityState `json:"ranInsecureContentStyle"`        // Security state representing a page that ran insecure content.
	DisplayedInsecureContentStyle  SecurityState `json:"displayedInsecureContentStyle"`  // Security state representing a page that displayed insecure content.
}

// SecurityCertificateErrorAction The action to take when a certificate error occurs. continue will continue processing the request and cancel will cancel the request.
type SecurityCertificateErrorAction int

// SecurityCertificateErrorAction as enums.
const (
	SecurityCertificateErrorActionNotSet SecurityCertificateErrorAction = iota
	SecurityCertificateErrorActionContinue
	SecurityCertificateErrorActionCancel
)

// Valid returns true if enum is set.
func (e SecurityCertificateErrorAction) Valid() bool {
	return e >= 1 && e <= 2
}

func (e SecurityCertificateErrorAction) String() string {
	switch e {
	case 0:
		return "SecurityCertificateErrorActionNotSet"
	case 1:
		return "continue"
	case 2:
		return "cancel"
	}
	return fmt.Sprintf("SecurityCertificateErrorAction(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e SecurityCertificateErrorAction) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.SecurityCertificateErrorAction: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *SecurityCertificateErrorAction) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"continue\"":
		*e = 1
	case "\"cancel\"":
		*e = 2
	default:
		return fmt.Errorf("cdptype.SecurityCertificateErrorAction: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// ServiceWorkerRegistration ServiceWorker registration.
type ServiceWorkerRegistration struct {
	RegistrationID string `json:"registrationId"` //
	ScopeURL       string `json:"scopeURL"`       //
	IsDeleted      bool   `json:"isDeleted"`      //
}

// ServiceWorkerVersionRunningStatus
type ServiceWorkerVersionRunningStatus int

// ServiceWorkerVersionRunningStatus as enums.
const (
	ServiceWorkerVersionRunningStatusNotSet ServiceWorkerVersionRunningStatus = iota
	ServiceWorkerVersionRunningStatusStopped
	ServiceWorkerVersionRunningStatusStarting
	ServiceWorkerVersionRunningStatusRunning
	ServiceWorkerVersionRunningStatusStopping
)

// Valid returns true if enum is set.
func (e ServiceWorkerVersionRunningStatus) Valid() bool {
	return e >= 1 && e <= 4
}

func (e ServiceWorkerVersionRunningStatus) String() string {
	switch e {
	case 0:
		return "ServiceWorkerVersionRunningStatusNotSet"
	case 1:
		return "stopped"
	case 2:
		return "starting"
	case 3:
		return "running"
	case 4:
		return "stopping"
	}
	return fmt.Sprintf("ServiceWorkerVersionRunningStatus(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e ServiceWorkerVersionRunningStatus) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.ServiceWorkerVersionRunningStatus: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *ServiceWorkerVersionRunningStatus) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"stopped\"":
		*e = 1
	case "\"starting\"":
		*e = 2
	case "\"running\"":
		*e = 3
	case "\"stopping\"":
		*e = 4
	default:
		return fmt.Errorf("cdptype.ServiceWorkerVersionRunningStatus: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// ServiceWorkerVersionStatus
type ServiceWorkerVersionStatus int

// ServiceWorkerVersionStatus as enums.
const (
	ServiceWorkerVersionStatusNotSet ServiceWorkerVersionStatus = iota
	ServiceWorkerVersionStatusNew
	ServiceWorkerVersionStatusInstalling
	ServiceWorkerVersionStatusInstalled
	ServiceWorkerVersionStatusActivating
	ServiceWorkerVersionStatusActivated
	ServiceWorkerVersionStatusRedundant
)

// Valid returns true if enum is set.
func (e ServiceWorkerVersionStatus) Valid() bool {
	return e >= 1 && e <= 6
}

func (e ServiceWorkerVersionStatus) String() string {
	switch e {
	case 0:
		return "ServiceWorkerVersionStatusNotSet"
	case 1:
		return "new"
	case 2:
		return "installing"
	case 3:
		return "installed"
	case 4:
		return "activating"
	case 5:
		return "activated"
	case 6:
		return "redundant"
	}
	return fmt.Sprintf("ServiceWorkerVersionStatus(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e ServiceWorkerVersionStatus) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.ServiceWorkerVersionStatus: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *ServiceWorkerVersionStatus) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"new\"":
		*e = 1
	case "\"installing\"":
		*e = 2
	case "\"installed\"":
		*e = 3
	case "\"activating\"":
		*e = 4
	case "\"activated\"":
		*e = 5
	case "\"redundant\"":
		*e = 6
	default:
		return fmt.Errorf("cdptype.ServiceWorkerVersionStatus: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// ServiceWorkerVersion ServiceWorker version.
type ServiceWorkerVersion struct {
	VersionID          string                            `json:"versionId"`                    //
	RegistrationID     string                            `json:"registrationId"`               //
	ScriptURL          string                            `json:"scriptURL"`                    //
	RunningStatus      ServiceWorkerVersionRunningStatus `json:"runningStatus"`                //
	Status             ServiceWorkerVersionStatus        `json:"status"`                       //
	ScriptLastModified *float64                          `json:"scriptLastModified,omitempty"` // The Last-Modified header value of the main script.
	ScriptResponseTime *float64                          `json:"scriptResponseTime,omitempty"` // The time at which the response headers of the main script were received from the server.  For cached script it is the last time the cache entry was validated.
	ControlledClients  []TargetID                        `json:"controlledClients,omitempty"`  //
	TargetID           *TargetID                         `json:"targetId,omitempty"`           //
}

// ServiceWorkerErrorMessage ServiceWorker error message.
type ServiceWorkerErrorMessage struct {
	ErrorMessage   string `json:"errorMessage"`   //
	RegistrationID string `json:"registrationId"` //
	VersionID      string `json:"versionId"`      //
	SourceURL      string `json:"sourceURL"`      //
	LineNumber     int    `json:"lineNumber"`     //
	ColumnNumber   int    `json:"columnNumber"`   //
}

// StorageType Enum of possible storage types.
type StorageType int

// StorageType as enums.
const (
	StorageTypeNotSet StorageType = iota
	StorageTypeAppcache
	StorageTypeCookies
	StorageTypeFileSystems
	StorageTypeIndexeddb
	StorageTypeLocalStorage
	StorageTypeShaderCache
	StorageTypeWebsql
	StorageTypeServiceWorkers
	StorageTypeCacheStorage
	StorageTypeAll
	StorageTypeOther
)

// Valid returns true if enum is set.
func (e StorageType) Valid() bool {
	return e >= 1 && e <= 11
}

func (e StorageType) String() string {
	switch e {
	case 0:
		return "StorageTypeNotSet"
	case 1:
		return "appcache"
	case 2:
		return "cookies"
	case 3:
		return "file_systems"
	case 4:
		return "indexeddb"
	case 5:
		return "local_storage"
	case 6:
		return "shader_cache"
	case 7:
		return "websql"
	case 8:
		return "service_workers"
	case 9:
		return "cache_storage"
	case 10:
		return "all"
	case 11:
		return "other"
	}
	return fmt.Sprintf("StorageType(%d)", e)
}

// MarshalJSON encodes enum into a string or null when not set.
func (e StorageType) MarshalJSON() ([]byte, error) {
	if e == 0 {
		return []byte("null"), nil
	}
	if !e.Valid() {
		return nil, errors.New("cdptype.StorageType: MarshalJSON on bad enum value: " + e.String())
	}
	return json.Marshal(e.String())
}

// UnmarshalJSON decodes a string value into a enum.
func (e *StorageType) UnmarshalJSON(data []byte) error {
	switch string(data) {
	case "null":
		*e = 0
	case "\"appcache\"":
		*e = 1
	case "\"cookies\"":
		*e = 2
	case "\"file_systems\"":
		*e = 3
	case "\"indexeddb\"":
		*e = 4
	case "\"local_storage\"":
		*e = 5
	case "\"shader_cache\"":
		*e = 6
	case "\"websql\"":
		*e = 7
	case "\"service_workers\"":
		*e = 8
	case "\"cache_storage\"":
		*e = 9
	case "\"all\"":
		*e = 10
	case "\"other\"":
		*e = 11
	default:
		return fmt.Errorf("cdptype.StorageType: UnmarshalJSON on bad input: %s", data)
	}
	return nil
}

// StorageUsageForType Usage for a storage type.
type StorageUsageForType struct {
	StorageType StorageType `json:"storageType"` // Name of storage type.
	Usage       float64     `json:"usage"`       // Storage usage (bytes).
}

// SystemInfoGPUDevice Describes a single graphics processor (GPU).
type SystemInfoGPUDevice struct {
	VendorID     float64 `json:"vendorId"`     // PCI ID of the GPU vendor, if available; 0 otherwise.
	DeviceID     float64 `json:"deviceId"`     // PCI ID of the GPU device, if available; 0 otherwise.
	VendorString string  `json:"vendorString"` // String description of the GPU vendor, if the PCI ID is not available.
	DeviceString string  `json:"deviceString"` // String description of the GPU device, if the PCI ID is not available.
}

// SystemInfoGPUInfo Provides information about the GPU(s) on the system.
type SystemInfoGPUInfo struct {
	Devices              []SystemInfoGPUDevice `json:"devices"`                 // The graphics devices on the system. Element 0 is the primary GPU.
	AuxAttributes        json.RawMessage       `json:"auxAttributes,omitempty"` // An optional dictionary of additional GPU related attributes.
	FeatureStatus        json.RawMessage       `json:"featureStatus,omitempty"` // An optional dictionary of graphics features and their status.
	DriverBugWorkarounds []string              `json:"driverBugWorkarounds"`    // An optional array of GPU driver bug workarounds.
}

// TargetID
type TargetID string

// TargetBrowserContextID
type TargetBrowserContextID string

// TargetInfo
type TargetInfo struct {
	TargetID TargetID `json:"targetId"` //
	Type     string   `json:"type"`     //
	Title    string   `json:"title"`    //
	URL      string   `json:"url"`      //
	Attached bool     `json:"attached"` // Whether the target has an attached client.
}

// TargetRemoteLocation
type TargetRemoteLocation struct {
	Host string `json:"host"` //
	Port int    `json:"port"` //
}

// TracingMemoryDumpConfig Configuration for memory dump. Used only when "memory-infra" category is enabled.
type TracingMemoryDumpConfig []byte

// MarshalJSON copies behavior of json.RawMessage.
func (t TracingMemoryDumpConfig) MarshalJSON() ([]byte, error) {
	if t == nil {
		return []byte("null"), nil
	}
	return t, nil
}

// UnmarshalJSON copies behavior of json.RawMessage.
func (t *TracingMemoryDumpConfig) UnmarshalJSON(data []byte) error {
	if t == nil {
		return errors.New("cdptype.TracingMemoryDumpConfig: UnmarshalJSON on nil pointer")
	}
	*t = append((*t)[0:0], data...)
	return nil
}

var _ json.Marshaler = (*TracingMemoryDumpConfig)(nil)
var _ json.Unmarshaler = (*TracingMemoryDumpConfig)(nil)

// TracingTraceConfig
type TracingTraceConfig struct {
	RecordMode           *string                 `json:"recordMode,omitempty"`           // Controls how the trace buffer stores data.
	EnableSampling       *bool                   `json:"enableSampling,omitempty"`       // Turns on JavaScript stack sampling.
	EnableSystrace       *bool                   `json:"enableSystrace,omitempty"`       // Turns on system tracing.
	EnableArgumentFilter *bool                   `json:"enableArgumentFilter,omitempty"` // Turns on argument filter.
	IncludedCategories   []string                `json:"includedCategories,omitempty"`   // Included category filters.
	ExcludedCategories   []string                `json:"excludedCategories,omitempty"`   // Excluded category filters.
	SyntheticDelays      []string                `json:"syntheticDelays,omitempty"`      // Configuration to synthesize the delays in tracing.
	MemoryDumpConfig     TracingMemoryDumpConfig `json:"memoryDumpConfig,omitempty"`     // Configuration for memory dump triggers. Used only when "memory-infra" category is enabled.
}

// Timestamp represents a timestamp (since epoch).
type Timestamp float64

// String calls (time.Time).String().
func (t Timestamp) String() string {
	return t.Time().String()
}

// Time parses the Unix time with millisecond accuracy.
func (t Timestamp) Time() time.Time {
	secs := int64(t)
	// The Unix time in t only has ms accuracy.
	ms := int64((float64(t) - float64(secs)) * 1000000)
	return time.Unix(secs, ms*1000)
}

// MarshalJSON implements json.Marshaler. Encodes to null if t is zero.
func (t Timestamp) MarshalJSON() ([]byte, error) {
	if t == 0 {
		return []byte("null"), nil
	}
	f := float64(t)
	return json.Marshal(&f)
}

// UnmarshalJSON implements json.Unmarshaler.
func (t *Timestamp) UnmarshalJSON(data []byte) error {
	*t = 0
	if len(data) == 0 {
		return nil
	}
	var f float64
	if err := json.Unmarshal(data, &f); err != nil {
		return errors.New("cdptype.Timestamp: " + err.Error())
	}
	*t = Timestamp(f)
	return nil
}

var _ json.Marshaler = (*Timestamp)(nil)
var _ json.Unmarshaler = (*Timestamp)(nil)

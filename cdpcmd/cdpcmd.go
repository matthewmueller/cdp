// Code generated by cdpgen; DO NOT EDIT!

package cdpcmd

import (
	"encoding/json"

	"github.com/mafredri/cdp/cdptype"
)

// AccessibilityGetPartialAXTreeArgs represents the arguments for GetPartialAXTree in the Accessibility domain.
type AccessibilityGetPartialAXTreeArgs struct {
	NodeID         cdptype.DOMNodeID `json:"nodeId"`                   // ID of node to get the partial accessibility tree for.
	FetchRelatives *bool             `json:"fetchRelatives,omitempty"` // Whether to fetch this nodes ancestors, siblings and children. Defaults to true.
}

// NewAccessibilityGetPartialAXTreeArgs initializes AccessibilityGetPartialAXTreeArgs with the required arguments.
func NewAccessibilityGetPartialAXTreeArgs(nodeID cdptype.DOMNodeID) *AccessibilityGetPartialAXTreeArgs {
	args := new(AccessibilityGetPartialAXTreeArgs)
	args.NodeID = nodeID
	return args
}

// SetFetchRelatives sets the FetchRelatives optional argument. Whether to fetch this nodes ancestors, siblings and children. Defaults to true.
func (a *AccessibilityGetPartialAXTreeArgs) SetFetchRelatives(fetchRelatives bool) *AccessibilityGetPartialAXTreeArgs {
	a.FetchRelatives = &fetchRelatives
	return a
}

// AccessibilityGetPartialAXTreeReply represents the return values for GetPartialAXTree in the Accessibility domain.
type AccessibilityGetPartialAXTreeReply struct {
	Nodes []cdptype.AccessibilityAXNode `json:"nodes"` // The Accessibility.AXNode for this DOM node, if it exists, plus its ancestors, siblings and children, if requested.
}

// AnimationGetPlaybackRateReply represents the return values for GetPlaybackRate in the Animation domain.
type AnimationGetPlaybackRateReply struct {
	PlaybackRate float64 `json:"playbackRate"` // Playback rate for animations on page.
}

// AnimationSetPlaybackRateArgs represents the arguments for SetPlaybackRate in the Animation domain.
type AnimationSetPlaybackRateArgs struct {
	PlaybackRate float64 `json:"playbackRate"` // Playback rate for animations on page
}

// NewAnimationSetPlaybackRateArgs initializes AnimationSetPlaybackRateArgs with the required arguments.
func NewAnimationSetPlaybackRateArgs(playbackRate float64) *AnimationSetPlaybackRateArgs {
	args := new(AnimationSetPlaybackRateArgs)
	args.PlaybackRate = playbackRate
	return args
}

// AnimationGetCurrentTimeArgs represents the arguments for GetCurrentTime in the Animation domain.
type AnimationGetCurrentTimeArgs struct {
	ID string `json:"id"` // Id of animation.
}

// NewAnimationGetCurrentTimeArgs initializes AnimationGetCurrentTimeArgs with the required arguments.
func NewAnimationGetCurrentTimeArgs(id string) *AnimationGetCurrentTimeArgs {
	args := new(AnimationGetCurrentTimeArgs)
	args.ID = id
	return args
}

// AnimationGetCurrentTimeReply represents the return values for GetCurrentTime in the Animation domain.
type AnimationGetCurrentTimeReply struct {
	CurrentTime float64 `json:"currentTime"` // Current time of the page.
}

// AnimationSetPausedArgs represents the arguments for SetPaused in the Animation domain.
type AnimationSetPausedArgs struct {
	Animations []string `json:"animations"` // Animations to set the pause state of.
	Paused     bool     `json:"paused"`     // Paused state to set to.
}

// NewAnimationSetPausedArgs initializes AnimationSetPausedArgs with the required arguments.
func NewAnimationSetPausedArgs(animations []string, paused bool) *AnimationSetPausedArgs {
	args := new(AnimationSetPausedArgs)
	args.Animations = animations
	args.Paused = paused
	return args
}

// AnimationSetTimingArgs represents the arguments for SetTiming in the Animation domain.
type AnimationSetTimingArgs struct {
	AnimationID string  `json:"animationId"` // Animation id.
	Duration    float64 `json:"duration"`    // Duration of the animation.
	Delay       float64 `json:"delay"`       // Delay of the animation.
}

// NewAnimationSetTimingArgs initializes AnimationSetTimingArgs with the required arguments.
func NewAnimationSetTimingArgs(animationID string, duration float64, delay float64) *AnimationSetTimingArgs {
	args := new(AnimationSetTimingArgs)
	args.AnimationID = animationID
	args.Duration = duration
	args.Delay = delay
	return args
}

// AnimationSeekAnimationsArgs represents the arguments for SeekAnimations in the Animation domain.
type AnimationSeekAnimationsArgs struct {
	Animations  []string `json:"animations"`  // List of animation ids to seek.
	CurrentTime float64  `json:"currentTime"` // Set the current time of each animation.
}

// NewAnimationSeekAnimationsArgs initializes AnimationSeekAnimationsArgs with the required arguments.
func NewAnimationSeekAnimationsArgs(animations []string, currentTime float64) *AnimationSeekAnimationsArgs {
	args := new(AnimationSeekAnimationsArgs)
	args.Animations = animations
	args.CurrentTime = currentTime
	return args
}

// AnimationReleaseAnimationsArgs represents the arguments for ReleaseAnimations in the Animation domain.
type AnimationReleaseAnimationsArgs struct {
	Animations []string `json:"animations"` // List of animation ids to seek.
}

// NewAnimationReleaseAnimationsArgs initializes AnimationReleaseAnimationsArgs with the required arguments.
func NewAnimationReleaseAnimationsArgs(animations []string) *AnimationReleaseAnimationsArgs {
	args := new(AnimationReleaseAnimationsArgs)
	args.Animations = animations
	return args
}

// AnimationResolveAnimationArgs represents the arguments for ResolveAnimation in the Animation domain.
type AnimationResolveAnimationArgs struct {
	AnimationID string `json:"animationId"` // Animation id.
}

// NewAnimationResolveAnimationArgs initializes AnimationResolveAnimationArgs with the required arguments.
func NewAnimationResolveAnimationArgs(animationID string) *AnimationResolveAnimationArgs {
	args := new(AnimationResolveAnimationArgs)
	args.AnimationID = animationID
	return args
}

// AnimationResolveAnimationReply represents the return values for ResolveAnimation in the Animation domain.
type AnimationResolveAnimationReply struct {
	RemoteObject cdptype.RuntimeRemoteObject `json:"remoteObject"` // Corresponding remote object.
}

// ApplicationCacheGetFramesWithManifestsReply represents the return values for GetFramesWithManifests in the ApplicationCache domain.
type ApplicationCacheGetFramesWithManifestsReply struct {
	FrameIDs []cdptype.ApplicationCacheFrameWithManifest `json:"frameIds"` // Array of frame identifiers with manifest urls for each frame containing a document associated with some application cache.
}

// ApplicationCacheGetManifestForFrameArgs represents the arguments for GetManifestForFrame in the ApplicationCache domain.
type ApplicationCacheGetManifestForFrameArgs struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Identifier of the frame containing document whose manifest is retrieved.
}

// NewApplicationCacheGetManifestForFrameArgs initializes ApplicationCacheGetManifestForFrameArgs with the required arguments.
func NewApplicationCacheGetManifestForFrameArgs(frameID cdptype.PageFrameID) *ApplicationCacheGetManifestForFrameArgs {
	args := new(ApplicationCacheGetManifestForFrameArgs)
	args.FrameID = frameID
	return args
}

// ApplicationCacheGetManifestForFrameReply represents the return values for GetManifestForFrame in the ApplicationCache domain.
type ApplicationCacheGetManifestForFrameReply struct {
	ManifestURL string `json:"manifestURL"` // Manifest URL for document in the given frame.
}

// ApplicationCacheGetApplicationCacheForFrameArgs represents the arguments for GetApplicationCacheForFrame in the ApplicationCache domain.
type ApplicationCacheGetApplicationCacheForFrameArgs struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Identifier of the frame containing document whose application cache is retrieved.
}

// NewApplicationCacheGetApplicationCacheForFrameArgs initializes ApplicationCacheGetApplicationCacheForFrameArgs with the required arguments.
func NewApplicationCacheGetApplicationCacheForFrameArgs(frameID cdptype.PageFrameID) *ApplicationCacheGetApplicationCacheForFrameArgs {
	args := new(ApplicationCacheGetApplicationCacheForFrameArgs)
	args.FrameID = frameID
	return args
}

// ApplicationCacheGetApplicationCacheForFrameReply represents the return values for GetApplicationCacheForFrame in the ApplicationCache domain.
type ApplicationCacheGetApplicationCacheForFrameReply struct {
	ApplicationCache cdptype.ApplicationCache `json:"applicationCache"` // Relevant application cache data for the document in given frame.
}

// BrowserGetWindowForTargetArgs represents the arguments for GetWindowForTarget in the Browser domain.
type BrowserGetWindowForTargetArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` // Devtools agent host id.
}

// NewBrowserGetWindowForTargetArgs initializes BrowserGetWindowForTargetArgs with the required arguments.
func NewBrowserGetWindowForTargetArgs(targetID cdptype.TargetID) *BrowserGetWindowForTargetArgs {
	args := new(BrowserGetWindowForTargetArgs)
	args.TargetID = targetID
	return args
}

// BrowserGetWindowForTargetReply represents the return values for GetWindowForTarget in the Browser domain.
type BrowserGetWindowForTargetReply struct {
	WindowID cdptype.BrowserWindowID `json:"windowId"` // Browser window id.
	Bounds   cdptype.BrowserBounds   `json:"bounds"`   // Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
}

// BrowserSetWindowBoundsArgs represents the arguments for SetWindowBounds in the Browser domain.
type BrowserSetWindowBoundsArgs struct {
	WindowID cdptype.BrowserWindowID `json:"windowId"` // Browser window id.
	Bounds   cdptype.BrowserBounds   `json:"bounds"`   // New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged.
}

// NewBrowserSetWindowBoundsArgs initializes BrowserSetWindowBoundsArgs with the required arguments.
func NewBrowserSetWindowBoundsArgs(windowID cdptype.BrowserWindowID, bounds cdptype.BrowserBounds) *BrowserSetWindowBoundsArgs {
	args := new(BrowserSetWindowBoundsArgs)
	args.WindowID = windowID
	args.Bounds = bounds
	return args
}

// BrowserGetWindowBoundsArgs represents the arguments for GetWindowBounds in the Browser domain.
type BrowserGetWindowBoundsArgs struct {
	WindowID cdptype.BrowserWindowID `json:"windowId"` // Browser window id.
}

// NewBrowserGetWindowBoundsArgs initializes BrowserGetWindowBoundsArgs with the required arguments.
func NewBrowserGetWindowBoundsArgs(windowID cdptype.BrowserWindowID) *BrowserGetWindowBoundsArgs {
	args := new(BrowserGetWindowBoundsArgs)
	args.WindowID = windowID
	return args
}

// BrowserGetWindowBoundsReply represents the return values for GetWindowBounds in the Browser domain.
type BrowserGetWindowBoundsReply struct {
	Bounds cdptype.BrowserBounds `json:"bounds"` // Bounds information of the window. When window state is 'minimized', the restored window position and size are returned.
}

// CSSGetMatchedStylesForNodeArgs represents the arguments for GetMatchedStylesForNode in the CSS domain.
type CSSGetMatchedStylesForNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` //
}

// NewCSSGetMatchedStylesForNodeArgs initializes CSSGetMatchedStylesForNodeArgs with the required arguments.
func NewCSSGetMatchedStylesForNodeArgs(nodeID cdptype.DOMNodeID) *CSSGetMatchedStylesForNodeArgs {
	args := new(CSSGetMatchedStylesForNodeArgs)
	args.NodeID = nodeID
	return args
}

// CSSGetMatchedStylesForNodeReply represents the return values for GetMatchedStylesForNode in the CSS domain.
type CSSGetMatchedStylesForNodeReply struct {
	InlineStyle       *cdptype.CSSStyle                 `json:"inlineStyle,omitempty"`       // Inline style for the specified DOM node.
	AttributesStyle   *cdptype.CSSStyle                 `json:"attributesStyle,omitempty"`   // Attribute-defined element style (e.g. resulting from "width=20 height=100%").
	MatchedCSSRules   []cdptype.CSSRuleMatch            `json:"matchedCSSRules,omitempty"`   // CSS rules matching this node, from all applicable stylesheets.
	PseudoElements    []cdptype.CSSPseudoElementMatches `json:"pseudoElements,omitempty"`    // Pseudo style matches for this node.
	Inherited         []cdptype.CSSInheritedStyleEntry  `json:"inherited,omitempty"`         // A chain of inherited styles (from the immediate node parent up to the DOM tree root).
	CSSKeyframesRules []cdptype.CSSKeyframesRule        `json:"cssKeyframesRules,omitempty"` // A list of CSS keyframed animations matching this node.
}

// CSSGetInlineStylesForNodeArgs represents the arguments for GetInlineStylesForNode in the CSS domain.
type CSSGetInlineStylesForNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` //
}

// NewCSSGetInlineStylesForNodeArgs initializes CSSGetInlineStylesForNodeArgs with the required arguments.
func NewCSSGetInlineStylesForNodeArgs(nodeID cdptype.DOMNodeID) *CSSGetInlineStylesForNodeArgs {
	args := new(CSSGetInlineStylesForNodeArgs)
	args.NodeID = nodeID
	return args
}

// CSSGetInlineStylesForNodeReply represents the return values for GetInlineStylesForNode in the CSS domain.
type CSSGetInlineStylesForNodeReply struct {
	InlineStyle     *cdptype.CSSStyle `json:"inlineStyle,omitempty"`     // Inline style for the specified DOM node.
	AttributesStyle *cdptype.CSSStyle `json:"attributesStyle,omitempty"` // Attribute-defined element style (e.g. resulting from "width=20 height=100%").
}

// CSSGetComputedStyleForNodeArgs represents the arguments for GetComputedStyleForNode in the CSS domain.
type CSSGetComputedStyleForNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` //
}

// NewCSSGetComputedStyleForNodeArgs initializes CSSGetComputedStyleForNodeArgs with the required arguments.
func NewCSSGetComputedStyleForNodeArgs(nodeID cdptype.DOMNodeID) *CSSGetComputedStyleForNodeArgs {
	args := new(CSSGetComputedStyleForNodeArgs)
	args.NodeID = nodeID
	return args
}

// CSSGetComputedStyleForNodeReply represents the return values for GetComputedStyleForNode in the CSS domain.
type CSSGetComputedStyleForNodeReply struct {
	ComputedStyle []cdptype.CSSComputedStyleProperty `json:"computedStyle"` // Computed style for the specified DOM node.
}

// CSSGetPlatformFontsForNodeArgs represents the arguments for GetPlatformFontsForNode in the CSS domain.
type CSSGetPlatformFontsForNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` //
}

// NewCSSGetPlatformFontsForNodeArgs initializes CSSGetPlatformFontsForNodeArgs with the required arguments.
func NewCSSGetPlatformFontsForNodeArgs(nodeID cdptype.DOMNodeID) *CSSGetPlatformFontsForNodeArgs {
	args := new(CSSGetPlatformFontsForNodeArgs)
	args.NodeID = nodeID
	return args
}

// CSSGetPlatformFontsForNodeReply represents the return values for GetPlatformFontsForNode in the CSS domain.
type CSSGetPlatformFontsForNodeReply struct {
	Fonts []cdptype.CSSPlatformFontUsage `json:"fonts"` // Usage statistics for every employed platform font.
}

// CSSGetStyleSheetTextArgs represents the arguments for GetStyleSheetText in the CSS domain.
type CSSGetStyleSheetTextArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
}

// NewCSSGetStyleSheetTextArgs initializes CSSGetStyleSheetTextArgs with the required arguments.
func NewCSSGetStyleSheetTextArgs(styleSheetID cdptype.CSSStyleSheetID) *CSSGetStyleSheetTextArgs {
	args := new(CSSGetStyleSheetTextArgs)
	args.StyleSheetID = styleSheetID
	return args
}

// CSSGetStyleSheetTextReply represents the return values for GetStyleSheetText in the CSS domain.
type CSSGetStyleSheetTextReply struct {
	Text string `json:"text"` // The stylesheet text.
}

// CSSCollectClassNamesArgs represents the arguments for CollectClassNames in the CSS domain.
type CSSCollectClassNamesArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
}

// NewCSSCollectClassNamesArgs initializes CSSCollectClassNamesArgs with the required arguments.
func NewCSSCollectClassNamesArgs(styleSheetID cdptype.CSSStyleSheetID) *CSSCollectClassNamesArgs {
	args := new(CSSCollectClassNamesArgs)
	args.StyleSheetID = styleSheetID
	return args
}

// CSSCollectClassNamesReply represents the return values for CollectClassNames in the CSS domain.
type CSSCollectClassNamesReply struct {
	ClassNames []string `json:"classNames"` // Class name list.
}

// CSSSetStyleSheetTextArgs represents the arguments for SetStyleSheetText in the CSS domain.
type CSSSetStyleSheetTextArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
	Text         string                  `json:"text"`         //
}

// NewCSSSetStyleSheetTextArgs initializes CSSSetStyleSheetTextArgs with the required arguments.
func NewCSSSetStyleSheetTextArgs(styleSheetID cdptype.CSSStyleSheetID, text string) *CSSSetStyleSheetTextArgs {
	args := new(CSSSetStyleSheetTextArgs)
	args.StyleSheetID = styleSheetID
	args.Text = text
	return args
}

// CSSSetStyleSheetTextReply represents the return values for SetStyleSheetText in the CSS domain.
type CSSSetStyleSheetTextReply struct {
	SourceMapURL *string `json:"sourceMapURL,omitempty"` // URL of source map associated with script (if any).
}

// CSSSetRuleSelectorArgs represents the arguments for SetRuleSelector in the CSS domain.
type CSSSetRuleSelectorArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
	Range        cdptype.CSSSourceRange  `json:"range"`        //
	Selector     string                  `json:"selector"`     //
}

// NewCSSSetRuleSelectorArgs initializes CSSSetRuleSelectorArgs with the required arguments.
func NewCSSSetRuleSelectorArgs(styleSheetID cdptype.CSSStyleSheetID, rang cdptype.CSSSourceRange, selector string) *CSSSetRuleSelectorArgs {
	args := new(CSSSetRuleSelectorArgs)
	args.StyleSheetID = styleSheetID
	args.Range = rang
	args.Selector = selector
	return args
}

// CSSSetRuleSelectorReply represents the return values for SetRuleSelector in the CSS domain.
type CSSSetRuleSelectorReply struct {
	SelectorList cdptype.CSSSelectorList `json:"selectorList"` // The resulting selector list after modification.
}

// CSSSetKeyframeKeyArgs represents the arguments for SetKeyframeKey in the CSS domain.
type CSSSetKeyframeKeyArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
	Range        cdptype.CSSSourceRange  `json:"range"`        //
	KeyText      string                  `json:"keyText"`      //
}

// NewCSSSetKeyframeKeyArgs initializes CSSSetKeyframeKeyArgs with the required arguments.
func NewCSSSetKeyframeKeyArgs(styleSheetID cdptype.CSSStyleSheetID, rang cdptype.CSSSourceRange, keyText string) *CSSSetKeyframeKeyArgs {
	args := new(CSSSetKeyframeKeyArgs)
	args.StyleSheetID = styleSheetID
	args.Range = rang
	args.KeyText = keyText
	return args
}

// CSSSetKeyframeKeyReply represents the return values for SetKeyframeKey in the CSS domain.
type CSSSetKeyframeKeyReply struct {
	KeyText cdptype.CSSValue `json:"keyText"` // The resulting key text after modification.
}

// CSSSetStyleTextsArgs represents the arguments for SetStyleTexts in the CSS domain.
type CSSSetStyleTextsArgs struct {
	Edits []cdptype.CSSStyleDeclarationEdit `json:"edits"` //
}

// NewCSSSetStyleTextsArgs initializes CSSSetStyleTextsArgs with the required arguments.
func NewCSSSetStyleTextsArgs(edits []cdptype.CSSStyleDeclarationEdit) *CSSSetStyleTextsArgs {
	args := new(CSSSetStyleTextsArgs)
	args.Edits = edits
	return args
}

// CSSSetStyleTextsReply represents the return values for SetStyleTexts in the CSS domain.
type CSSSetStyleTextsReply struct {
	Styles []cdptype.CSSStyle `json:"styles"` // The resulting styles after modification.
}

// CSSSetMediaTextArgs represents the arguments for SetMediaText in the CSS domain.
type CSSSetMediaTextArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` //
	Range        cdptype.CSSSourceRange  `json:"range"`        //
	Text         string                  `json:"text"`         //
}

// NewCSSSetMediaTextArgs initializes CSSSetMediaTextArgs with the required arguments.
func NewCSSSetMediaTextArgs(styleSheetID cdptype.CSSStyleSheetID, rang cdptype.CSSSourceRange, text string) *CSSSetMediaTextArgs {
	args := new(CSSSetMediaTextArgs)
	args.StyleSheetID = styleSheetID
	args.Range = rang
	args.Text = text
	return args
}

// CSSSetMediaTextReply represents the return values for SetMediaText in the CSS domain.
type CSSSetMediaTextReply struct {
	Media cdptype.CSSMedia `json:"media"` // The resulting CSS media rule after modification.
}

// CSSCreateStyleSheetArgs represents the arguments for CreateStyleSheet in the CSS domain.
type CSSCreateStyleSheetArgs struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Identifier of the frame where "via-inspector" stylesheet should be created.
}

// NewCSSCreateStyleSheetArgs initializes CSSCreateStyleSheetArgs with the required arguments.
func NewCSSCreateStyleSheetArgs(frameID cdptype.PageFrameID) *CSSCreateStyleSheetArgs {
	args := new(CSSCreateStyleSheetArgs)
	args.FrameID = frameID
	return args
}

// CSSCreateStyleSheetReply represents the return values for CreateStyleSheet in the CSS domain.
type CSSCreateStyleSheetReply struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` // Identifier of the created "via-inspector" stylesheet.
}

// CSSAddRuleArgs represents the arguments for AddRule in the CSS domain.
type CSSAddRuleArgs struct {
	StyleSheetID cdptype.CSSStyleSheetID `json:"styleSheetId"` // The css style sheet identifier where a new rule should be inserted.
	RuleText     string                  `json:"ruleText"`     // The text of a new rule.
	Location     cdptype.CSSSourceRange  `json:"location"`     // Text position of a new rule in the target style sheet.
}

// NewCSSAddRuleArgs initializes CSSAddRuleArgs with the required arguments.
func NewCSSAddRuleArgs(styleSheetID cdptype.CSSStyleSheetID, ruleText string, location cdptype.CSSSourceRange) *CSSAddRuleArgs {
	args := new(CSSAddRuleArgs)
	args.StyleSheetID = styleSheetID
	args.RuleText = ruleText
	args.Location = location
	return args
}

// CSSAddRuleReply represents the return values for AddRule in the CSS domain.
type CSSAddRuleReply struct {
	Rule cdptype.CSSRule `json:"rule"` // The newly created rule.
}

// CSSForcePseudoStateArgs represents the arguments for ForcePseudoState in the CSS domain.
type CSSForcePseudoStateArgs struct {
	NodeID              cdptype.DOMNodeID `json:"nodeId"`              // The element id for which to force the pseudo state.
	ForcedPseudoClasses []string          `json:"forcedPseudoClasses"` // Element pseudo classes to force when computing the element's style.
}

// NewCSSForcePseudoStateArgs initializes CSSForcePseudoStateArgs with the required arguments.
func NewCSSForcePseudoStateArgs(nodeID cdptype.DOMNodeID, forcedPseudoClasses []string) *CSSForcePseudoStateArgs {
	args := new(CSSForcePseudoStateArgs)
	args.NodeID = nodeID
	args.ForcedPseudoClasses = forcedPseudoClasses
	return args
}

// CSSGetMediaQueriesReply represents the return values for GetMediaQueries in the CSS domain.
type CSSGetMediaQueriesReply struct {
	Medias []cdptype.CSSMedia `json:"medias"` //
}

// CSSSetEffectivePropertyValueForNodeArgs represents the arguments for SetEffectivePropertyValueForNode in the CSS domain.
type CSSSetEffectivePropertyValueForNodeArgs struct {
	NodeID       cdptype.DOMNodeID `json:"nodeId"`       // The element id for which to set property.
	PropertyName string            `json:"propertyName"` //
	Value        string            `json:"value"`        //
}

// NewCSSSetEffectivePropertyValueForNodeArgs initializes CSSSetEffectivePropertyValueForNodeArgs with the required arguments.
func NewCSSSetEffectivePropertyValueForNodeArgs(nodeID cdptype.DOMNodeID, propertyName string, value string) *CSSSetEffectivePropertyValueForNodeArgs {
	args := new(CSSSetEffectivePropertyValueForNodeArgs)
	args.NodeID = nodeID
	args.PropertyName = propertyName
	args.Value = value
	return args
}

// CSSGetBackgroundColorsArgs represents the arguments for GetBackgroundColors in the CSS domain.
type CSSGetBackgroundColorsArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to get background colors for.
}

// NewCSSGetBackgroundColorsArgs initializes CSSGetBackgroundColorsArgs with the required arguments.
func NewCSSGetBackgroundColorsArgs(nodeID cdptype.DOMNodeID) *CSSGetBackgroundColorsArgs {
	args := new(CSSGetBackgroundColorsArgs)
	args.NodeID = nodeID
	return args
}

// CSSGetBackgroundColorsReply represents the return values for GetBackgroundColors in the CSS domain.
type CSSGetBackgroundColorsReply struct {
	BackgroundColors []string `json:"backgroundColors,omitempty"` // The range of background colors behind this element, if it contains any visible text. If no visible text is present, this will be undefined. In the case of a flat background color, this will consist of simply that color. In the case of a gradient, this will consist of each of the color stops. For anything more complicated, this will be an empty array. Images will be ignored (as if the image had failed to load).
}

// CSSTakeCoverageDeltaReply represents the return values for TakeCoverageDelta in the CSS domain.
type CSSTakeCoverageDeltaReply struct {
	Coverage []cdptype.CSSRuleUsage `json:"coverage"` //
}

// CSSStopRuleUsageTrackingReply represents the return values for StopRuleUsageTracking in the CSS domain.
type CSSStopRuleUsageTrackingReply struct {
	RuleUsage []cdptype.CSSRuleUsage `json:"ruleUsage"` //
}

// CacheStorageRequestCacheNamesArgs represents the arguments for RequestCacheNames in the CacheStorage domain.
type CacheStorageRequestCacheNamesArgs struct {
	SecurityOrigin string `json:"securityOrigin"` // Security origin.
}

// NewCacheStorageRequestCacheNamesArgs initializes CacheStorageRequestCacheNamesArgs with the required arguments.
func NewCacheStorageRequestCacheNamesArgs(securityOrigin string) *CacheStorageRequestCacheNamesArgs {
	args := new(CacheStorageRequestCacheNamesArgs)
	args.SecurityOrigin = securityOrigin
	return args
}

// CacheStorageRequestCacheNamesReply represents the return values for RequestCacheNames in the CacheStorage domain.
type CacheStorageRequestCacheNamesReply struct {
	Caches []cdptype.CacheStorageCache `json:"caches"` // Caches for the security origin.
}

// CacheStorageRequestEntriesArgs represents the arguments for RequestEntries in the CacheStorage domain.
type CacheStorageRequestEntriesArgs struct {
	CacheID   cdptype.CacheStorageCacheID `json:"cacheId"`   // ID of cache to get entries from.
	SkipCount int                         `json:"skipCount"` // Number of records to skip.
	PageSize  int                         `json:"pageSize"`  // Number of records to fetch.
}

// NewCacheStorageRequestEntriesArgs initializes CacheStorageRequestEntriesArgs with the required arguments.
func NewCacheStorageRequestEntriesArgs(cacheID cdptype.CacheStorageCacheID, skipCount int, pageSize int) *CacheStorageRequestEntriesArgs {
	args := new(CacheStorageRequestEntriesArgs)
	args.CacheID = cacheID
	args.SkipCount = skipCount
	args.PageSize = pageSize
	return args
}

// CacheStorageRequestEntriesReply represents the return values for RequestEntries in the CacheStorage domain.
type CacheStorageRequestEntriesReply struct {
	CacheDataEntries []cdptype.CacheStorageDataEntry `json:"cacheDataEntries"` // Array of object store data entries.
	HasMore          bool                            `json:"hasMore"`          // If true, there are more entries to fetch in the given range.
}

// CacheStorageDeleteCacheArgs represents the arguments for DeleteCache in the CacheStorage domain.
type CacheStorageDeleteCacheArgs struct {
	CacheID cdptype.CacheStorageCacheID `json:"cacheId"` // Id of cache for deletion.
}

// NewCacheStorageDeleteCacheArgs initializes CacheStorageDeleteCacheArgs with the required arguments.
func NewCacheStorageDeleteCacheArgs(cacheID cdptype.CacheStorageCacheID) *CacheStorageDeleteCacheArgs {
	args := new(CacheStorageDeleteCacheArgs)
	args.CacheID = cacheID
	return args
}

// CacheStorageDeleteEntryArgs represents the arguments for DeleteEntry in the CacheStorage domain.
type CacheStorageDeleteEntryArgs struct {
	CacheID cdptype.CacheStorageCacheID `json:"cacheId"` // Id of cache where the entry will be deleted.
	Request string                      `json:"request"` // URL spec of the request.
}

// NewCacheStorageDeleteEntryArgs initializes CacheStorageDeleteEntryArgs with the required arguments.
func NewCacheStorageDeleteEntryArgs(cacheID cdptype.CacheStorageCacheID, request string) *CacheStorageDeleteEntryArgs {
	args := new(CacheStorageDeleteEntryArgs)
	args.CacheID = cacheID
	args.Request = request
	return args
}

// DOMGetDocumentArgs represents the arguments for GetDocument in the DOM domain.
type DOMGetDocumentArgs struct {
	Depth  *int  `json:"depth,omitempty"`  // The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce *bool `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).
}

// NewDOMGetDocumentArgs initializes DOMGetDocumentArgs with the required arguments.
func NewDOMGetDocumentArgs() *DOMGetDocumentArgs {
	args := new(DOMGetDocumentArgs)

	return args
}

// SetDepth sets the Depth optional argument. The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
func (a *DOMGetDocumentArgs) SetDepth(depth int) *DOMGetDocumentArgs {
	a.Depth = &depth
	return a
}

// SetPierce sets the Pierce optional argument. Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).
func (a *DOMGetDocumentArgs) SetPierce(pierce bool) *DOMGetDocumentArgs {
	a.Pierce = &pierce
	return a
}

// DOMGetDocumentReply represents the return values for GetDocument in the DOM domain.
type DOMGetDocumentReply struct {
	Root cdptype.DOMNode `json:"root"` // Resulting node.
}

// DOMGetFlattenedDocumentArgs represents the arguments for GetFlattenedDocument in the DOM domain.
type DOMGetFlattenedDocumentArgs struct {
	Depth  *int  `json:"depth,omitempty"`  // The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce *bool `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).
}

// NewDOMGetFlattenedDocumentArgs initializes DOMGetFlattenedDocumentArgs with the required arguments.
func NewDOMGetFlattenedDocumentArgs() *DOMGetFlattenedDocumentArgs {
	args := new(DOMGetFlattenedDocumentArgs)

	return args
}

// SetDepth sets the Depth optional argument. The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
func (a *DOMGetFlattenedDocumentArgs) SetDepth(depth int) *DOMGetFlattenedDocumentArgs {
	a.Depth = &depth
	return a
}

// SetPierce sets the Pierce optional argument. Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).
func (a *DOMGetFlattenedDocumentArgs) SetPierce(pierce bool) *DOMGetFlattenedDocumentArgs {
	a.Pierce = &pierce
	return a
}

// DOMGetFlattenedDocumentReply represents the return values for GetFlattenedDocument in the DOM domain.
type DOMGetFlattenedDocumentReply struct {
	Nodes []cdptype.DOMNode `json:"nodes"` // Resulting node.
}

// DOMCollectClassNamesFromSubtreeArgs represents the arguments for CollectClassNamesFromSubtree in the DOM domain.
type DOMCollectClassNamesFromSubtreeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to collect class names.
}

// NewDOMCollectClassNamesFromSubtreeArgs initializes DOMCollectClassNamesFromSubtreeArgs with the required arguments.
func NewDOMCollectClassNamesFromSubtreeArgs(nodeID cdptype.DOMNodeID) *DOMCollectClassNamesFromSubtreeArgs {
	args := new(DOMCollectClassNamesFromSubtreeArgs)
	args.NodeID = nodeID
	return args
}

// DOMCollectClassNamesFromSubtreeReply represents the return values for CollectClassNamesFromSubtree in the DOM domain.
type DOMCollectClassNamesFromSubtreeReply struct {
	ClassNames []string `json:"classNames"` // Class name list.
}

// DOMRequestChildNodesArgs represents the arguments for RequestChildNodes in the DOM domain.
type DOMRequestChildNodesArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"`           // Id of the node to get children for.
	Depth  *int              `json:"depth,omitempty"`  // The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce *bool             `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the sub-tree (default is false).
}

// NewDOMRequestChildNodesArgs initializes DOMRequestChildNodesArgs with the required arguments.
func NewDOMRequestChildNodesArgs(nodeID cdptype.DOMNodeID) *DOMRequestChildNodesArgs {
	args := new(DOMRequestChildNodesArgs)
	args.NodeID = nodeID
	return args
}

// SetDepth sets the Depth optional argument. The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
func (a *DOMRequestChildNodesArgs) SetDepth(depth int) *DOMRequestChildNodesArgs {
	a.Depth = &depth
	return a
}

// SetPierce sets the Pierce optional argument. Whether or not iframes and shadow roots should be traversed when returning the sub-tree (default is false).
func (a *DOMRequestChildNodesArgs) SetPierce(pierce bool) *DOMRequestChildNodesArgs {
	a.Pierce = &pierce
	return a
}

// DOMQuerySelectorArgs represents the arguments for QuerySelector in the DOM domain.
type DOMQuerySelectorArgs struct {
	NodeID   cdptype.DOMNodeID `json:"nodeId"`   // Id of the node to query upon.
	Selector string            `json:"selector"` // Selector string.
}

// NewDOMQuerySelectorArgs initializes DOMQuerySelectorArgs with the required arguments.
func NewDOMQuerySelectorArgs(nodeID cdptype.DOMNodeID, selector string) *DOMQuerySelectorArgs {
	args := new(DOMQuerySelectorArgs)
	args.NodeID = nodeID
	args.Selector = selector
	return args
}

// DOMQuerySelectorReply represents the return values for QuerySelector in the DOM domain.
type DOMQuerySelectorReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Query selector result.
}

// DOMQuerySelectorAllArgs represents the arguments for QuerySelectorAll in the DOM domain.
type DOMQuerySelectorAllArgs struct {
	NodeID   cdptype.DOMNodeID `json:"nodeId"`   // Id of the node to query upon.
	Selector string            `json:"selector"` // Selector string.
}

// NewDOMQuerySelectorAllArgs initializes DOMQuerySelectorAllArgs with the required arguments.
func NewDOMQuerySelectorAllArgs(nodeID cdptype.DOMNodeID, selector string) *DOMQuerySelectorAllArgs {
	args := new(DOMQuerySelectorAllArgs)
	args.NodeID = nodeID
	args.Selector = selector
	return args
}

// DOMQuerySelectorAllReply represents the return values for QuerySelectorAll in the DOM domain.
type DOMQuerySelectorAllReply struct {
	NodeIDs []cdptype.DOMNodeID `json:"nodeIds"` // Query selector result.
}

// DOMSetNodeNameArgs represents the arguments for SetNodeName in the DOM domain.
type DOMSetNodeNameArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to set name for.
	Name   string            `json:"name"`   // New node's name.
}

// NewDOMSetNodeNameArgs initializes DOMSetNodeNameArgs with the required arguments.
func NewDOMSetNodeNameArgs(nodeID cdptype.DOMNodeID, name string) *DOMSetNodeNameArgs {
	args := new(DOMSetNodeNameArgs)
	args.NodeID = nodeID
	args.Name = name
	return args
}

// DOMSetNodeNameReply represents the return values for SetNodeName in the DOM domain.
type DOMSetNodeNameReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // New node's id.
}

// DOMSetNodeValueArgs represents the arguments for SetNodeValue in the DOM domain.
type DOMSetNodeValueArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to set value for.
	Value  string            `json:"value"`  // New node's value.
}

// NewDOMSetNodeValueArgs initializes DOMSetNodeValueArgs with the required arguments.
func NewDOMSetNodeValueArgs(nodeID cdptype.DOMNodeID, value string) *DOMSetNodeValueArgs {
	args := new(DOMSetNodeValueArgs)
	args.NodeID = nodeID
	args.Value = value
	return args
}

// DOMRemoveNodeArgs represents the arguments for RemoveNode in the DOM domain.
type DOMRemoveNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to remove.
}

// NewDOMRemoveNodeArgs initializes DOMRemoveNodeArgs with the required arguments.
func NewDOMRemoveNodeArgs(nodeID cdptype.DOMNodeID) *DOMRemoveNodeArgs {
	args := new(DOMRemoveNodeArgs)
	args.NodeID = nodeID
	return args
}

// DOMSetAttributeValueArgs represents the arguments for SetAttributeValue in the DOM domain.
type DOMSetAttributeValueArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the element to set attribute for.
	Name   string            `json:"name"`   // Attribute name.
	Value  string            `json:"value"`  // Attribute value.
}

// NewDOMSetAttributeValueArgs initializes DOMSetAttributeValueArgs with the required arguments.
func NewDOMSetAttributeValueArgs(nodeID cdptype.DOMNodeID, name string, value string) *DOMSetAttributeValueArgs {
	args := new(DOMSetAttributeValueArgs)
	args.NodeID = nodeID
	args.Name = name
	args.Value = value
	return args
}

// DOMSetAttributesAsTextArgs represents the arguments for SetAttributesAsText in the DOM domain.
type DOMSetAttributesAsTextArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"`         // Id of the element to set attributes for.
	Text   string            `json:"text"`           // Text with a number of attributes. Will parse this text using HTML parser.
	Name   *string           `json:"name,omitempty"` // Attribute name to replace with new attributes derived from text in case text parsed successfully.
}

// NewDOMSetAttributesAsTextArgs initializes DOMSetAttributesAsTextArgs with the required arguments.
func NewDOMSetAttributesAsTextArgs(nodeID cdptype.DOMNodeID, text string) *DOMSetAttributesAsTextArgs {
	args := new(DOMSetAttributesAsTextArgs)
	args.NodeID = nodeID
	args.Text = text
	return args
}

// SetName sets the Name optional argument. Attribute name to replace with new attributes derived from text in case text parsed successfully.
func (a *DOMSetAttributesAsTextArgs) SetName(name string) *DOMSetAttributesAsTextArgs {
	a.Name = &name
	return a
}

// DOMRemoveAttributeArgs represents the arguments for RemoveAttribute in the DOM domain.
type DOMRemoveAttributeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the element to remove attribute from.
	Name   string            `json:"name"`   // Name of the attribute to remove.
}

// NewDOMRemoveAttributeArgs initializes DOMRemoveAttributeArgs with the required arguments.
func NewDOMRemoveAttributeArgs(nodeID cdptype.DOMNodeID, name string) *DOMRemoveAttributeArgs {
	args := new(DOMRemoveAttributeArgs)
	args.NodeID = nodeID
	args.Name = name
	return args
}

// DOMGetOuterHTMLArgs represents the arguments for GetOuterHTML in the DOM domain.
type DOMGetOuterHTMLArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to get markup for.
}

// NewDOMGetOuterHTMLArgs initializes DOMGetOuterHTMLArgs with the required arguments.
func NewDOMGetOuterHTMLArgs(nodeID cdptype.DOMNodeID) *DOMGetOuterHTMLArgs {
	args := new(DOMGetOuterHTMLArgs)
	args.NodeID = nodeID
	return args
}

// DOMGetOuterHTMLReply represents the return values for GetOuterHTML in the DOM domain.
type DOMGetOuterHTMLReply struct {
	OuterHTML string `json:"outerHTML"` // Outer HTML markup.
}

// DOMSetOuterHTMLArgs represents the arguments for SetOuterHTML in the DOM domain.
type DOMSetOuterHTMLArgs struct {
	NodeID    cdptype.DOMNodeID `json:"nodeId"`    // Id of the node to set markup for.
	OuterHTML string            `json:"outerHTML"` // Outer HTML markup to set.
}

// NewDOMSetOuterHTMLArgs initializes DOMSetOuterHTMLArgs with the required arguments.
func NewDOMSetOuterHTMLArgs(nodeID cdptype.DOMNodeID, outerHTML string) *DOMSetOuterHTMLArgs {
	args := new(DOMSetOuterHTMLArgs)
	args.NodeID = nodeID
	args.OuterHTML = outerHTML
	return args
}

// DOMPerformSearchArgs represents the arguments for PerformSearch in the DOM domain.
type DOMPerformSearchArgs struct {
	Query                     string `json:"query"`                               // Plain text or query selector or XPath search query.
	IncludeUserAgentShadowDOM *bool  `json:"includeUserAgentShadowDOM,omitempty"` // True to search in user agent shadow DOM.
}

// NewDOMPerformSearchArgs initializes DOMPerformSearchArgs with the required arguments.
func NewDOMPerformSearchArgs(query string) *DOMPerformSearchArgs {
	args := new(DOMPerformSearchArgs)
	args.Query = query
	return args
}

// SetIncludeUserAgentShadowDOM sets the IncludeUserAgentShadowDOM optional argument. True to search in user agent shadow DOM.
func (a *DOMPerformSearchArgs) SetIncludeUserAgentShadowDOM(includeUserAgentShadowDOM bool) *DOMPerformSearchArgs {
	a.IncludeUserAgentShadowDOM = &includeUserAgentShadowDOM
	return a
}

// DOMPerformSearchReply represents the return values for PerformSearch in the DOM domain.
type DOMPerformSearchReply struct {
	SearchID    string `json:"searchId"`    // Unique search session identifier.
	ResultCount int    `json:"resultCount"` // Number of search results.
}

// DOMGetSearchResultsArgs represents the arguments for GetSearchResults in the DOM domain.
type DOMGetSearchResultsArgs struct {
	SearchID  string `json:"searchId"`  // Unique search session identifier.
	FromIndex int    `json:"fromIndex"` // Start index of the search result to be returned.
	ToIndex   int    `json:"toIndex"`   // End index of the search result to be returned.
}

// NewDOMGetSearchResultsArgs initializes DOMGetSearchResultsArgs with the required arguments.
func NewDOMGetSearchResultsArgs(searchID string, fromIndex int, toIndex int) *DOMGetSearchResultsArgs {
	args := new(DOMGetSearchResultsArgs)
	args.SearchID = searchID
	args.FromIndex = fromIndex
	args.ToIndex = toIndex
	return args
}

// DOMGetSearchResultsReply represents the return values for GetSearchResults in the DOM domain.
type DOMGetSearchResultsReply struct {
	NodeIDs []cdptype.DOMNodeID `json:"nodeIds"` // Ids of the search result nodes.
}

// DOMDiscardSearchResultsArgs represents the arguments for DiscardSearchResults in the DOM domain.
type DOMDiscardSearchResultsArgs struct {
	SearchID string `json:"searchId"` // Unique search session identifier.
}

// NewDOMDiscardSearchResultsArgs initializes DOMDiscardSearchResultsArgs with the required arguments.
func NewDOMDiscardSearchResultsArgs(searchID string) *DOMDiscardSearchResultsArgs {
	args := new(DOMDiscardSearchResultsArgs)
	args.SearchID = searchID
	return args
}

// DOMRequestNodeArgs represents the arguments for RequestNode in the DOM domain.
type DOMRequestNodeArgs struct {
	ObjectID cdptype.RuntimeRemoteObjectID `json:"objectId"` // JavaScript object id to convert into node.
}

// NewDOMRequestNodeArgs initializes DOMRequestNodeArgs with the required arguments.
func NewDOMRequestNodeArgs(objectID cdptype.RuntimeRemoteObjectID) *DOMRequestNodeArgs {
	args := new(DOMRequestNodeArgs)
	args.ObjectID = objectID
	return args
}

// DOMRequestNodeReply represents the return values for RequestNode in the DOM domain.
type DOMRequestNodeReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Node id for given object.
}

// DOMPushNodeByPathToFrontendArgs represents the arguments for PushNodeByPathToFrontend in the DOM domain.
type DOMPushNodeByPathToFrontendArgs struct {
	Path string `json:"path"` // Path to node in the proprietary format.
}

// NewDOMPushNodeByPathToFrontendArgs initializes DOMPushNodeByPathToFrontendArgs with the required arguments.
func NewDOMPushNodeByPathToFrontendArgs(path string) *DOMPushNodeByPathToFrontendArgs {
	args := new(DOMPushNodeByPathToFrontendArgs)
	args.Path = path
	return args
}

// DOMPushNodeByPathToFrontendReply represents the return values for PushNodeByPathToFrontend in the DOM domain.
type DOMPushNodeByPathToFrontendReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node for given path.
}

// DOMPushNodesByBackendIdsToFrontendArgs represents the arguments for PushNodesByBackendIdsToFrontend in the DOM domain.
type DOMPushNodesByBackendIdsToFrontendArgs struct {
	BackendNodeIDs []cdptype.DOMBackendNodeID `json:"backendNodeIds"` // The array of backend node ids.
}

// NewDOMPushNodesByBackendIdsToFrontendArgs initializes DOMPushNodesByBackendIdsToFrontendArgs with the required arguments.
func NewDOMPushNodesByBackendIdsToFrontendArgs(backendNodeIDs []cdptype.DOMBackendNodeID) *DOMPushNodesByBackendIdsToFrontendArgs {
	args := new(DOMPushNodesByBackendIdsToFrontendArgs)
	args.BackendNodeIDs = backendNodeIDs
	return args
}

// DOMPushNodesByBackendIdsToFrontendReply represents the return values for PushNodesByBackendIdsToFrontend in the DOM domain.
type DOMPushNodesByBackendIdsToFrontendReply struct {
	NodeIDs []cdptype.DOMNodeID `json:"nodeIds"` // The array of ids of pushed nodes that correspond to the backend ids specified in backendNodeIds.
}

// DOMSetInspectedNodeArgs represents the arguments for SetInspectedNode in the DOM domain.
type DOMSetInspectedNodeArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // DOM node id to be accessible by means of $x command line API.
}

// NewDOMSetInspectedNodeArgs initializes DOMSetInspectedNodeArgs with the required arguments.
func NewDOMSetInspectedNodeArgs(nodeID cdptype.DOMNodeID) *DOMSetInspectedNodeArgs {
	args := new(DOMSetInspectedNodeArgs)
	args.NodeID = nodeID
	return args
}

// DOMResolveNodeArgs represents the arguments for ResolveNode in the DOM domain.
type DOMResolveNodeArgs struct {
	NodeID      cdptype.DOMNodeID `json:"nodeId"`                // Id of the node to resolve.
	ObjectGroup *string           `json:"objectGroup,omitempty"` // Symbolic group name that can be used to release multiple objects.
}

// NewDOMResolveNodeArgs initializes DOMResolveNodeArgs with the required arguments.
func NewDOMResolveNodeArgs(nodeID cdptype.DOMNodeID) *DOMResolveNodeArgs {
	args := new(DOMResolveNodeArgs)
	args.NodeID = nodeID
	return args
}

// SetObjectGroup sets the ObjectGroup optional argument. Symbolic group name that can be used to release multiple objects.
func (a *DOMResolveNodeArgs) SetObjectGroup(objectGroup string) *DOMResolveNodeArgs {
	a.ObjectGroup = &objectGroup
	return a
}

// DOMResolveNodeReply represents the return values for ResolveNode in the DOM domain.
type DOMResolveNodeReply struct {
	Object cdptype.RuntimeRemoteObject `json:"object"` // JavaScript object wrapper for given node.
}

// DOMGetAttributesArgs represents the arguments for GetAttributes in the DOM domain.
type DOMGetAttributesArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to retrieve attibutes for.
}

// NewDOMGetAttributesArgs initializes DOMGetAttributesArgs with the required arguments.
func NewDOMGetAttributesArgs(nodeID cdptype.DOMNodeID) *DOMGetAttributesArgs {
	args := new(DOMGetAttributesArgs)
	args.NodeID = nodeID
	return args
}

// DOMGetAttributesReply represents the return values for GetAttributes in the DOM domain.
type DOMGetAttributesReply struct {
	Attributes []string `json:"attributes"` // An interleaved array of node attribute names and values.
}

// DOMCopyToArgs represents the arguments for CopyTo in the DOM domain.
type DOMCopyToArgs struct {
	NodeID             cdptype.DOMNodeID  `json:"nodeId"`                       // Id of the node to copy.
	TargetNodeID       cdptype.DOMNodeID  `json:"targetNodeId"`                 // Id of the element to drop the copy into.
	InsertBeforeNodeID *cdptype.DOMNodeID `json:"insertBeforeNodeId,omitempty"` // Drop the copy before this node (if absent, the copy becomes the last child of targetNodeId).
}

// NewDOMCopyToArgs initializes DOMCopyToArgs with the required arguments.
func NewDOMCopyToArgs(nodeID cdptype.DOMNodeID, targetNodeID cdptype.DOMNodeID) *DOMCopyToArgs {
	args := new(DOMCopyToArgs)
	args.NodeID = nodeID
	args.TargetNodeID = targetNodeID
	return args
}

// SetInsertBeforeNodeID sets the InsertBeforeNodeID optional argument. Drop the copy before this node (if absent, the copy becomes the last child of targetNodeId).
func (a *DOMCopyToArgs) SetInsertBeforeNodeID(insertBeforeNodeID cdptype.DOMNodeID) *DOMCopyToArgs {
	a.InsertBeforeNodeID = &insertBeforeNodeID
	return a
}

// DOMCopyToReply represents the return values for CopyTo in the DOM domain.
type DOMCopyToReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node clone.
}

// DOMMoveToArgs represents the arguments for MoveTo in the DOM domain.
type DOMMoveToArgs struct {
	NodeID             cdptype.DOMNodeID  `json:"nodeId"`                       // Id of the node to move.
	TargetNodeID       cdptype.DOMNodeID  `json:"targetNodeId"`                 // Id of the element to drop the moved node into.
	InsertBeforeNodeID *cdptype.DOMNodeID `json:"insertBeforeNodeId,omitempty"` // Drop node before this one (if absent, the moved node becomes the last child of targetNodeId).
}

// NewDOMMoveToArgs initializes DOMMoveToArgs with the required arguments.
func NewDOMMoveToArgs(nodeID cdptype.DOMNodeID, targetNodeID cdptype.DOMNodeID) *DOMMoveToArgs {
	args := new(DOMMoveToArgs)
	args.NodeID = nodeID
	args.TargetNodeID = targetNodeID
	return args
}

// SetInsertBeforeNodeID sets the InsertBeforeNodeID optional argument. Drop node before this one (if absent, the moved node becomes the last child of targetNodeId).
func (a *DOMMoveToArgs) SetInsertBeforeNodeID(insertBeforeNodeID cdptype.DOMNodeID) *DOMMoveToArgs {
	a.InsertBeforeNodeID = &insertBeforeNodeID
	return a
}

// DOMMoveToReply represents the return values for MoveTo in the DOM domain.
type DOMMoveToReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // New id of the moved node.
}

// DOMFocusArgs represents the arguments for Focus in the DOM domain.
type DOMFocusArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to focus.
}

// NewDOMFocusArgs initializes DOMFocusArgs with the required arguments.
func NewDOMFocusArgs(nodeID cdptype.DOMNodeID) *DOMFocusArgs {
	args := new(DOMFocusArgs)
	args.NodeID = nodeID
	return args
}

// DOMSetFileInputFilesArgs represents the arguments for SetFileInputFiles in the DOM domain.
type DOMSetFileInputFilesArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the file input node to set files for.
	Files  []string          `json:"files"`  // Array of file paths to set.
}

// NewDOMSetFileInputFilesArgs initializes DOMSetFileInputFilesArgs with the required arguments.
func NewDOMSetFileInputFilesArgs(nodeID cdptype.DOMNodeID, files []string) *DOMSetFileInputFilesArgs {
	args := new(DOMSetFileInputFilesArgs)
	args.NodeID = nodeID
	args.Files = files
	return args
}

// DOMGetBoxModelArgs represents the arguments for GetBoxModel in the DOM domain.
type DOMGetBoxModelArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to get box model for.
}

// NewDOMGetBoxModelArgs initializes DOMGetBoxModelArgs with the required arguments.
func NewDOMGetBoxModelArgs(nodeID cdptype.DOMNodeID) *DOMGetBoxModelArgs {
	args := new(DOMGetBoxModelArgs)
	args.NodeID = nodeID
	return args
}

// DOMGetBoxModelReply represents the return values for GetBoxModel in the DOM domain.
type DOMGetBoxModelReply struct {
	Model cdptype.DOMBoxModel `json:"model"` // Box model for the node.
}

// DOMGetNodeForLocationArgs represents the arguments for GetNodeForLocation in the DOM domain.
type DOMGetNodeForLocationArgs struct {
	X                         int   `json:"x"`                                   // X coordinate.
	Y                         int   `json:"y"`                                   // Y coordinate.
	IncludeUserAgentShadowDOM *bool `json:"includeUserAgentShadowDOM,omitempty"` // False to skip to the nearest non-UA shadow root ancestor (default: false).
}

// NewDOMGetNodeForLocationArgs initializes DOMGetNodeForLocationArgs with the required arguments.
func NewDOMGetNodeForLocationArgs(x int, y int) *DOMGetNodeForLocationArgs {
	args := new(DOMGetNodeForLocationArgs)
	args.X = x
	args.Y = y
	return args
}

// SetIncludeUserAgentShadowDOM sets the IncludeUserAgentShadowDOM optional argument. False to skip to the nearest non-UA shadow root ancestor (default: false).
func (a *DOMGetNodeForLocationArgs) SetIncludeUserAgentShadowDOM(includeUserAgentShadowDOM bool) *DOMGetNodeForLocationArgs {
	a.IncludeUserAgentShadowDOM = &includeUserAgentShadowDOM
	return a
}

// DOMGetNodeForLocationReply represents the return values for GetNodeForLocation in the DOM domain.
type DOMGetNodeForLocationReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node at given coordinates.
}

// DOMGetRelayoutBoundaryArgs represents the arguments for GetRelayoutBoundary in the DOM domain.
type DOMGetRelayoutBoundaryArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node.
}

// NewDOMGetRelayoutBoundaryArgs initializes DOMGetRelayoutBoundaryArgs with the required arguments.
func NewDOMGetRelayoutBoundaryArgs(nodeID cdptype.DOMNodeID) *DOMGetRelayoutBoundaryArgs {
	args := new(DOMGetRelayoutBoundaryArgs)
	args.NodeID = nodeID
	return args
}

// DOMGetRelayoutBoundaryReply represents the return values for GetRelayoutBoundary in the DOM domain.
type DOMGetRelayoutBoundaryReply struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Relayout boundary node id for the given node.
}

// DOMDebuggerSetDOMBreakpointArgs represents the arguments for SetDOMBreakpoint in the DOMDebugger domain.
type DOMDebuggerSetDOMBreakpointArgs struct {
	NodeID cdptype.DOMNodeID                    `json:"nodeId"` // Identifier of the node to set breakpoint on.
	Type   cdptype.DOMDebuggerDOMBreakpointType `json:"type"`   // Type of the operation to stop upon.
}

// NewDOMDebuggerSetDOMBreakpointArgs initializes DOMDebuggerSetDOMBreakpointArgs with the required arguments.
func NewDOMDebuggerSetDOMBreakpointArgs(nodeID cdptype.DOMNodeID, typ cdptype.DOMDebuggerDOMBreakpointType) *DOMDebuggerSetDOMBreakpointArgs {
	args := new(DOMDebuggerSetDOMBreakpointArgs)
	args.NodeID = nodeID
	args.Type = typ
	return args
}

// DOMDebuggerRemoveDOMBreakpointArgs represents the arguments for RemoveDOMBreakpoint in the DOMDebugger domain.
type DOMDebuggerRemoveDOMBreakpointArgs struct {
	NodeID cdptype.DOMNodeID                    `json:"nodeId"` // Identifier of the node to remove breakpoint from.
	Type   cdptype.DOMDebuggerDOMBreakpointType `json:"type"`   // Type of the breakpoint to remove.
}

// NewDOMDebuggerRemoveDOMBreakpointArgs initializes DOMDebuggerRemoveDOMBreakpointArgs with the required arguments.
func NewDOMDebuggerRemoveDOMBreakpointArgs(nodeID cdptype.DOMNodeID, typ cdptype.DOMDebuggerDOMBreakpointType) *DOMDebuggerRemoveDOMBreakpointArgs {
	args := new(DOMDebuggerRemoveDOMBreakpointArgs)
	args.NodeID = nodeID
	args.Type = typ
	return args
}

// DOMDebuggerSetEventListenerBreakpointArgs represents the arguments for SetEventListenerBreakpoint in the DOMDebugger domain.
type DOMDebuggerSetEventListenerBreakpointArgs struct {
	EventName  string  `json:"eventName"`            // DOM Event name to stop on (any DOM event will do).
	TargetName *string `json:"targetName,omitempty"` // EventTarget interface name to stop on. If equal to "*" or not provided, will stop on any EventTarget.
}

// NewDOMDebuggerSetEventListenerBreakpointArgs initializes DOMDebuggerSetEventListenerBreakpointArgs with the required arguments.
func NewDOMDebuggerSetEventListenerBreakpointArgs(eventName string) *DOMDebuggerSetEventListenerBreakpointArgs {
	args := new(DOMDebuggerSetEventListenerBreakpointArgs)
	args.EventName = eventName
	return args
}

// SetTargetName sets the TargetName optional argument. EventTarget interface name to stop on. If equal to "*" or not provided, will stop on any EventTarget.
func (a *DOMDebuggerSetEventListenerBreakpointArgs) SetTargetName(targetName string) *DOMDebuggerSetEventListenerBreakpointArgs {
	a.TargetName = &targetName
	return a
}

// DOMDebuggerRemoveEventListenerBreakpointArgs represents the arguments for RemoveEventListenerBreakpoint in the DOMDebugger domain.
type DOMDebuggerRemoveEventListenerBreakpointArgs struct {
	EventName  string  `json:"eventName"`            // Event name.
	TargetName *string `json:"targetName,omitempty"` // EventTarget interface name.
}

// NewDOMDebuggerRemoveEventListenerBreakpointArgs initializes DOMDebuggerRemoveEventListenerBreakpointArgs with the required arguments.
func NewDOMDebuggerRemoveEventListenerBreakpointArgs(eventName string) *DOMDebuggerRemoveEventListenerBreakpointArgs {
	args := new(DOMDebuggerRemoveEventListenerBreakpointArgs)
	args.EventName = eventName
	return args
}

// SetTargetName sets the TargetName optional argument. EventTarget interface name.
func (a *DOMDebuggerRemoveEventListenerBreakpointArgs) SetTargetName(targetName string) *DOMDebuggerRemoveEventListenerBreakpointArgs {
	a.TargetName = &targetName
	return a
}

// DOMDebuggerSetInstrumentationBreakpointArgs represents the arguments for SetInstrumentationBreakpoint in the DOMDebugger domain.
type DOMDebuggerSetInstrumentationBreakpointArgs struct {
	EventName string `json:"eventName"` // Instrumentation name to stop on.
}

// NewDOMDebuggerSetInstrumentationBreakpointArgs initializes DOMDebuggerSetInstrumentationBreakpointArgs with the required arguments.
func NewDOMDebuggerSetInstrumentationBreakpointArgs(eventName string) *DOMDebuggerSetInstrumentationBreakpointArgs {
	args := new(DOMDebuggerSetInstrumentationBreakpointArgs)
	args.EventName = eventName
	return args
}

// DOMDebuggerRemoveInstrumentationBreakpointArgs represents the arguments for RemoveInstrumentationBreakpoint in the DOMDebugger domain.
type DOMDebuggerRemoveInstrumentationBreakpointArgs struct {
	EventName string `json:"eventName"` // Instrumentation name to stop on.
}

// NewDOMDebuggerRemoveInstrumentationBreakpointArgs initializes DOMDebuggerRemoveInstrumentationBreakpointArgs with the required arguments.
func NewDOMDebuggerRemoveInstrumentationBreakpointArgs(eventName string) *DOMDebuggerRemoveInstrumentationBreakpointArgs {
	args := new(DOMDebuggerRemoveInstrumentationBreakpointArgs)
	args.EventName = eventName
	return args
}

// DOMDebuggerSetXHRBreakpointArgs represents the arguments for SetXHRBreakpoint in the DOMDebugger domain.
type DOMDebuggerSetXHRBreakpointArgs struct {
	URL string `json:"url"` // Resource URL substring. All XHRs having this substring in the URL will get stopped upon.
}

// NewDOMDebuggerSetXHRBreakpointArgs initializes DOMDebuggerSetXHRBreakpointArgs with the required arguments.
func NewDOMDebuggerSetXHRBreakpointArgs(url string) *DOMDebuggerSetXHRBreakpointArgs {
	args := new(DOMDebuggerSetXHRBreakpointArgs)
	args.URL = url
	return args
}

// DOMDebuggerRemoveXHRBreakpointArgs represents the arguments for RemoveXHRBreakpoint in the DOMDebugger domain.
type DOMDebuggerRemoveXHRBreakpointArgs struct {
	URL string `json:"url"` // Resource URL substring.
}

// NewDOMDebuggerRemoveXHRBreakpointArgs initializes DOMDebuggerRemoveXHRBreakpointArgs with the required arguments.
func NewDOMDebuggerRemoveXHRBreakpointArgs(url string) *DOMDebuggerRemoveXHRBreakpointArgs {
	args := new(DOMDebuggerRemoveXHRBreakpointArgs)
	args.URL = url
	return args
}

// DOMDebuggerGetEventListenersArgs represents the arguments for GetEventListeners in the DOMDebugger domain.
type DOMDebuggerGetEventListenersArgs struct {
	ObjectID cdptype.RuntimeRemoteObjectID `json:"objectId"`         // Identifier of the object to return listeners for.
	Depth    *int                          `json:"depth,omitempty"`  // The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce   *bool                         `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false). Reports listeners for all contexts if pierce is enabled.
}

// NewDOMDebuggerGetEventListenersArgs initializes DOMDebuggerGetEventListenersArgs with the required arguments.
func NewDOMDebuggerGetEventListenersArgs(objectID cdptype.RuntimeRemoteObjectID) *DOMDebuggerGetEventListenersArgs {
	args := new(DOMDebuggerGetEventListenersArgs)
	args.ObjectID = objectID
	return args
}

// SetDepth sets the Depth optional argument. The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
func (a *DOMDebuggerGetEventListenersArgs) SetDepth(depth int) *DOMDebuggerGetEventListenersArgs {
	a.Depth = &depth
	return a
}

// SetPierce sets the Pierce optional argument. Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false). Reports listeners for all contexts if pierce is enabled.
func (a *DOMDebuggerGetEventListenersArgs) SetPierce(pierce bool) *DOMDebuggerGetEventListenersArgs {
	a.Pierce = &pierce
	return a
}

// DOMDebuggerGetEventListenersReply represents the return values for GetEventListeners in the DOMDebugger domain.
type DOMDebuggerGetEventListenersReply struct {
	Listeners []cdptype.DOMDebuggerEventListener `json:"listeners"` // Array of relevant listeners.
}

// DOMSnapshotGetSnapshotArgs represents the arguments for GetSnapshot in the DOMSnapshot domain.
type DOMSnapshotGetSnapshotArgs struct {
	ComputedStyleWhitelist []string `json:"computedStyleWhitelist"` // Whitelist of computed styles to return.
}

// NewDOMSnapshotGetSnapshotArgs initializes DOMSnapshotGetSnapshotArgs with the required arguments.
func NewDOMSnapshotGetSnapshotArgs(computedStyleWhitelist []string) *DOMSnapshotGetSnapshotArgs {
	args := new(DOMSnapshotGetSnapshotArgs)
	args.ComputedStyleWhitelist = computedStyleWhitelist
	return args
}

// DOMSnapshotGetSnapshotReply represents the return values for GetSnapshot in the DOMSnapshot domain.
type DOMSnapshotGetSnapshotReply struct {
	DOMNodes        []cdptype.DOMSnapshotDOMNode        `json:"domNodes"`        // The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.
	LayoutTreeNodes []cdptype.DOMSnapshotLayoutTreeNode `json:"layoutTreeNodes"` // The nodes in the layout tree.
	ComputedStyles  []cdptype.DOMSnapshotComputedStyle  `json:"computedStyles"`  // Whitelisted ComputedStyle properties for each node in the layout tree.
}

// DOMStorageClearArgs represents the arguments for Clear in the DOMStorage domain.
type DOMStorageClearArgs struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
}

// NewDOMStorageClearArgs initializes DOMStorageClearArgs with the required arguments.
func NewDOMStorageClearArgs(storageID cdptype.DOMStorageStorageID) *DOMStorageClearArgs {
	args := new(DOMStorageClearArgs)
	args.StorageID = storageID
	return args
}

// DOMStorageGetDOMStorageItemsArgs represents the arguments for GetDOMStorageItems in the DOMStorage domain.
type DOMStorageGetDOMStorageItemsArgs struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
}

// NewDOMStorageGetDOMStorageItemsArgs initializes DOMStorageGetDOMStorageItemsArgs with the required arguments.
func NewDOMStorageGetDOMStorageItemsArgs(storageID cdptype.DOMStorageStorageID) *DOMStorageGetDOMStorageItemsArgs {
	args := new(DOMStorageGetDOMStorageItemsArgs)
	args.StorageID = storageID
	return args
}

// DOMStorageGetDOMStorageItemsReply represents the return values for GetDOMStorageItems in the DOMStorage domain.
type DOMStorageGetDOMStorageItemsReply struct {
	Entries []cdptype.DOMStorageItem `json:"entries"` //
}

// DOMStorageSetDOMStorageItemArgs represents the arguments for SetDOMStorageItem in the DOMStorage domain.
type DOMStorageSetDOMStorageItemArgs struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
	Key       string                      `json:"key"`       //
	Value     string                      `json:"value"`     //
}

// NewDOMStorageSetDOMStorageItemArgs initializes DOMStorageSetDOMStorageItemArgs with the required arguments.
func NewDOMStorageSetDOMStorageItemArgs(storageID cdptype.DOMStorageStorageID, key string, value string) *DOMStorageSetDOMStorageItemArgs {
	args := new(DOMStorageSetDOMStorageItemArgs)
	args.StorageID = storageID
	args.Key = key
	args.Value = value
	return args
}

// DOMStorageRemoveDOMStorageItemArgs represents the arguments for RemoveDOMStorageItem in the DOMStorage domain.
type DOMStorageRemoveDOMStorageItemArgs struct {
	StorageID cdptype.DOMStorageStorageID `json:"storageId"` //
	Key       string                      `json:"key"`       //
}

// NewDOMStorageRemoveDOMStorageItemArgs initializes DOMStorageRemoveDOMStorageItemArgs with the required arguments.
func NewDOMStorageRemoveDOMStorageItemArgs(storageID cdptype.DOMStorageStorageID, key string) *DOMStorageRemoveDOMStorageItemArgs {
	args := new(DOMStorageRemoveDOMStorageItemArgs)
	args.StorageID = storageID
	args.Key = key
	return args
}

// DatabaseGetDatabaseTableNamesArgs represents the arguments for GetDatabaseTableNames in the Database domain.
type DatabaseGetDatabaseTableNamesArgs struct {
	DatabaseID cdptype.DatabaseID `json:"databaseId"` //
}

// NewDatabaseGetDatabaseTableNamesArgs initializes DatabaseGetDatabaseTableNamesArgs with the required arguments.
func NewDatabaseGetDatabaseTableNamesArgs(databaseID cdptype.DatabaseID) *DatabaseGetDatabaseTableNamesArgs {
	args := new(DatabaseGetDatabaseTableNamesArgs)
	args.DatabaseID = databaseID
	return args
}

// DatabaseGetDatabaseTableNamesReply represents the return values for GetDatabaseTableNames in the Database domain.
type DatabaseGetDatabaseTableNamesReply struct {
	TableNames []string `json:"tableNames"` //
}

// DatabaseExecuteSQLArgs represents the arguments for ExecuteSQL in the Database domain.
type DatabaseExecuteSQLArgs struct {
	DatabaseID cdptype.DatabaseID `json:"databaseId"` //
	Query      string             `json:"query"`      //
}

// NewDatabaseExecuteSQLArgs initializes DatabaseExecuteSQLArgs with the required arguments.
func NewDatabaseExecuteSQLArgs(databaseID cdptype.DatabaseID, query string) *DatabaseExecuteSQLArgs {
	args := new(DatabaseExecuteSQLArgs)
	args.DatabaseID = databaseID
	args.Query = query
	return args
}

// DatabaseExecuteSQLReply represents the return values for ExecuteSQL in the Database domain.
type DatabaseExecuteSQLReply struct {
	ColumnNames []string               `json:"columnNames,omitempty"` //
	Values      []json.RawMessage      `json:"values,omitempty"`      //
	SQLError    *cdptype.DatabaseError `json:"sqlError,omitempty"`    //
}

// DebuggerSetBreakpointsActiveArgs represents the arguments for SetBreakpointsActive in the Debugger domain.
type DebuggerSetBreakpointsActiveArgs struct {
	Active bool `json:"active"` // New value for breakpoints active state.
}

// NewDebuggerSetBreakpointsActiveArgs initializes DebuggerSetBreakpointsActiveArgs with the required arguments.
func NewDebuggerSetBreakpointsActiveArgs(active bool) *DebuggerSetBreakpointsActiveArgs {
	args := new(DebuggerSetBreakpointsActiveArgs)
	args.Active = active
	return args
}

// DebuggerSetSkipAllPausesArgs represents the arguments for SetSkipAllPauses in the Debugger domain.
type DebuggerSetSkipAllPausesArgs struct {
	Skip bool `json:"skip"` // New value for skip pauses state.
}

// NewDebuggerSetSkipAllPausesArgs initializes DebuggerSetSkipAllPausesArgs with the required arguments.
func NewDebuggerSetSkipAllPausesArgs(skip bool) *DebuggerSetSkipAllPausesArgs {
	args := new(DebuggerSetSkipAllPausesArgs)
	args.Skip = skip
	return args
}

// DebuggerSetBreakpointByURLArgs represents the arguments for SetBreakpointByURL in the Debugger domain.
type DebuggerSetBreakpointByURLArgs struct {
	LineNumber   int     `json:"lineNumber"`             // Line number to set breakpoint at.
	URL          *string `json:"url,omitempty"`          // URL of the resources to set breakpoint on.
	URLRegex     *string `json:"urlRegex,omitempty"`     // Regex pattern for the URLs of the resources to set breakpoints on. Either url or urlRegex must be specified.
	ColumnNumber *int    `json:"columnNumber,omitempty"` // Offset in the line to set breakpoint at.
	Condition    *string `json:"condition,omitempty"`    // Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
}

// NewDebuggerSetBreakpointByURLArgs initializes DebuggerSetBreakpointByURLArgs with the required arguments.
func NewDebuggerSetBreakpointByURLArgs(lineNumber int) *DebuggerSetBreakpointByURLArgs {
	args := new(DebuggerSetBreakpointByURLArgs)
	args.LineNumber = lineNumber
	return args
}

// SetURL sets the URL optional argument. URL of the resources to set breakpoint on.
func (a *DebuggerSetBreakpointByURLArgs) SetURL(url string) *DebuggerSetBreakpointByURLArgs {
	a.URL = &url
	return a
}

// SetURLRegex sets the URLRegex optional argument. Regex pattern for the URLs of the resources to set breakpoints on. Either url or urlRegex must be specified.
func (a *DebuggerSetBreakpointByURLArgs) SetURLRegex(urlRegex string) *DebuggerSetBreakpointByURLArgs {
	a.URLRegex = &urlRegex
	return a
}

// SetColumnNumber sets the ColumnNumber optional argument. Offset in the line to set breakpoint at.
func (a *DebuggerSetBreakpointByURLArgs) SetColumnNumber(columnNumber int) *DebuggerSetBreakpointByURLArgs {
	a.ColumnNumber = &columnNumber
	return a
}

// SetCondition sets the Condition optional argument. Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
func (a *DebuggerSetBreakpointByURLArgs) SetCondition(condition string) *DebuggerSetBreakpointByURLArgs {
	a.Condition = &condition
	return a
}

// DebuggerSetBreakpointByURLReply represents the return values for SetBreakpointByURL in the Debugger domain.
type DebuggerSetBreakpointByURLReply struct {
	BreakpointID cdptype.DebuggerBreakpointID `json:"breakpointId"` // Id of the created breakpoint for further reference.
	Locations    []cdptype.DebuggerLocation   `json:"locations"`    // List of the locations this breakpoint resolved into upon addition.
}

// DebuggerSetBreakpointArgs represents the arguments for SetBreakpoint in the Debugger domain.
type DebuggerSetBreakpointArgs struct {
	Location  cdptype.DebuggerLocation `json:"location"`            // Location to set breakpoint in.
	Condition *string                  `json:"condition,omitempty"` // Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
}

// NewDebuggerSetBreakpointArgs initializes DebuggerSetBreakpointArgs with the required arguments.
func NewDebuggerSetBreakpointArgs(location cdptype.DebuggerLocation) *DebuggerSetBreakpointArgs {
	args := new(DebuggerSetBreakpointArgs)
	args.Location = location
	return args
}

// SetCondition sets the Condition optional argument. Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
func (a *DebuggerSetBreakpointArgs) SetCondition(condition string) *DebuggerSetBreakpointArgs {
	a.Condition = &condition
	return a
}

// DebuggerSetBreakpointReply represents the return values for SetBreakpoint in the Debugger domain.
type DebuggerSetBreakpointReply struct {
	BreakpointID   cdptype.DebuggerBreakpointID `json:"breakpointId"`   // Id of the created breakpoint for further reference.
	ActualLocation cdptype.DebuggerLocation     `json:"actualLocation"` // Location this breakpoint resolved into.
}

// DebuggerRemoveBreakpointArgs represents the arguments for RemoveBreakpoint in the Debugger domain.
type DebuggerRemoveBreakpointArgs struct {
	BreakpointID cdptype.DebuggerBreakpointID `json:"breakpointId"` //
}

// NewDebuggerRemoveBreakpointArgs initializes DebuggerRemoveBreakpointArgs with the required arguments.
func NewDebuggerRemoveBreakpointArgs(breakpointID cdptype.DebuggerBreakpointID) *DebuggerRemoveBreakpointArgs {
	args := new(DebuggerRemoveBreakpointArgs)
	args.BreakpointID = breakpointID
	return args
}

// DebuggerGetPossibleBreakpointsArgs represents the arguments for GetPossibleBreakpoints in the Debugger domain.
type DebuggerGetPossibleBreakpointsArgs struct {
	Start              cdptype.DebuggerLocation  `json:"start"`                        // Start of range to search possible breakpoint locations in.
	End                *cdptype.DebuggerLocation `json:"end,omitempty"`                // End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range.
	RestrictToFunction *bool                     `json:"restrictToFunction,omitempty"` // Only consider locations which are in the same (non-nested) function as start.
}

// NewDebuggerGetPossibleBreakpointsArgs initializes DebuggerGetPossibleBreakpointsArgs with the required arguments.
func NewDebuggerGetPossibleBreakpointsArgs(start cdptype.DebuggerLocation) *DebuggerGetPossibleBreakpointsArgs {
	args := new(DebuggerGetPossibleBreakpointsArgs)
	args.Start = start
	return args
}

// SetEnd sets the End optional argument. End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range.
func (a *DebuggerGetPossibleBreakpointsArgs) SetEnd(end cdptype.DebuggerLocation) *DebuggerGetPossibleBreakpointsArgs {
	a.End = &end
	return a
}

// SetRestrictToFunction sets the RestrictToFunction optional argument. Only consider locations which are in the same (non-nested) function as start.
func (a *DebuggerGetPossibleBreakpointsArgs) SetRestrictToFunction(restrictToFunction bool) *DebuggerGetPossibleBreakpointsArgs {
	a.RestrictToFunction = &restrictToFunction
	return a
}

// DebuggerGetPossibleBreakpointsReply represents the return values for GetPossibleBreakpoints in the Debugger domain.
type DebuggerGetPossibleBreakpointsReply struct {
	Locations []cdptype.DebuggerBreakLocation `json:"locations"` // List of the possible breakpoint locations.
}

// DebuggerContinueToLocationArgs represents the arguments for ContinueToLocation in the Debugger domain.
type DebuggerContinueToLocationArgs struct {
	Location         cdptype.DebuggerLocation `json:"location"`                   // Location to continue to.
	TargetCallFrames *string                  `json:"targetCallFrames,omitempty"` //
}

// NewDebuggerContinueToLocationArgs initializes DebuggerContinueToLocationArgs with the required arguments.
func NewDebuggerContinueToLocationArgs(location cdptype.DebuggerLocation) *DebuggerContinueToLocationArgs {
	args := new(DebuggerContinueToLocationArgs)
	args.Location = location
	return args
}

// SetTargetCallFrames sets the TargetCallFrames optional argument.
func (a *DebuggerContinueToLocationArgs) SetTargetCallFrames(targetCallFrames string) *DebuggerContinueToLocationArgs {
	a.TargetCallFrames = &targetCallFrames
	return a
}

// DebuggerSearchInContentArgs represents the arguments for SearchInContent in the Debugger domain.
type DebuggerSearchInContentArgs struct {
	ScriptID      cdptype.RuntimeScriptID `json:"scriptId"`                // Id of the script to search in.
	Query         string                  `json:"query"`                   // String to search for.
	CaseSensitive *bool                   `json:"caseSensitive,omitempty"` // If true, search is case sensitive.
	IsRegex       *bool                   `json:"isRegex,omitempty"`       // If true, treats string parameter as regex.
}

// NewDebuggerSearchInContentArgs initializes DebuggerSearchInContentArgs with the required arguments.
func NewDebuggerSearchInContentArgs(scriptID cdptype.RuntimeScriptID, query string) *DebuggerSearchInContentArgs {
	args := new(DebuggerSearchInContentArgs)
	args.ScriptID = scriptID
	args.Query = query
	return args
}

// SetCaseSensitive sets the CaseSensitive optional argument. If true, search is case sensitive.
func (a *DebuggerSearchInContentArgs) SetCaseSensitive(caseSensitive bool) *DebuggerSearchInContentArgs {
	a.CaseSensitive = &caseSensitive
	return a
}

// SetIsRegex sets the IsRegex optional argument. If true, treats string parameter as regex.
func (a *DebuggerSearchInContentArgs) SetIsRegex(isRegex bool) *DebuggerSearchInContentArgs {
	a.IsRegex = &isRegex
	return a
}

// DebuggerSearchInContentReply represents the return values for SearchInContent in the Debugger domain.
type DebuggerSearchInContentReply struct {
	Result []cdptype.DebuggerSearchMatch `json:"result"` // List of search matches.
}

// DebuggerSetScriptSourceArgs represents the arguments for SetScriptSource in the Debugger domain.
type DebuggerSetScriptSourceArgs struct {
	ScriptID     cdptype.RuntimeScriptID `json:"scriptId"`         // Id of the script to edit.
	ScriptSource string                  `json:"scriptSource"`     // New content of the script.
	DryRun       *bool                   `json:"dryRun,omitempty"` //  If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.
}

// NewDebuggerSetScriptSourceArgs initializes DebuggerSetScriptSourceArgs with the required arguments.
func NewDebuggerSetScriptSourceArgs(scriptID cdptype.RuntimeScriptID, scriptSource string) *DebuggerSetScriptSourceArgs {
	args := new(DebuggerSetScriptSourceArgs)
	args.ScriptID = scriptID
	args.ScriptSource = scriptSource
	return args
}

// SetDryRun sets the DryRun optional argument.  If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.
func (a *DebuggerSetScriptSourceArgs) SetDryRun(dryRun bool) *DebuggerSetScriptSourceArgs {
	a.DryRun = &dryRun
	return a
}

// DebuggerSetScriptSourceReply represents the return values for SetScriptSource in the Debugger domain.
type DebuggerSetScriptSourceReply struct {
	CallFrames       []cdptype.DebuggerCallFrame      `json:"callFrames,omitempty"`       // New stack trace in case editing has happened while VM was stopped.
	StackChanged     *bool                            `json:"stackChanged,omitempty"`     // Whether current call stack  was modified after applying the changes.
	AsyncStackTrace  *cdptype.RuntimeStackTrace       `json:"asyncStackTrace,omitempty"`  // Async stack trace, if any.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details if any.
}

// DebuggerRestartFrameArgs represents the arguments for RestartFrame in the Debugger domain.
type DebuggerRestartFrameArgs struct {
	CallFrameID cdptype.DebuggerCallFrameID `json:"callFrameId"` // Call frame identifier to evaluate on.
}

// NewDebuggerRestartFrameArgs initializes DebuggerRestartFrameArgs with the required arguments.
func NewDebuggerRestartFrameArgs(callFrameID cdptype.DebuggerCallFrameID) *DebuggerRestartFrameArgs {
	args := new(DebuggerRestartFrameArgs)
	args.CallFrameID = callFrameID
	return args
}

// DebuggerRestartFrameReply represents the return values for RestartFrame in the Debugger domain.
type DebuggerRestartFrameReply struct {
	CallFrames      []cdptype.DebuggerCallFrame `json:"callFrames"`                // New stack trace.
	AsyncStackTrace *cdptype.RuntimeStackTrace  `json:"asyncStackTrace,omitempty"` // Async stack trace, if any.
}

// DebuggerGetScriptSourceArgs represents the arguments for GetScriptSource in the Debugger domain.
type DebuggerGetScriptSourceArgs struct {
	ScriptID cdptype.RuntimeScriptID `json:"scriptId"` // Id of the script to get source for.
}

// NewDebuggerGetScriptSourceArgs initializes DebuggerGetScriptSourceArgs with the required arguments.
func NewDebuggerGetScriptSourceArgs(scriptID cdptype.RuntimeScriptID) *DebuggerGetScriptSourceArgs {
	args := new(DebuggerGetScriptSourceArgs)
	args.ScriptID = scriptID
	return args
}

// DebuggerGetScriptSourceReply represents the return values for GetScriptSource in the Debugger domain.
type DebuggerGetScriptSourceReply struct {
	ScriptSource string `json:"scriptSource"` // Script source.
}

// DebuggerSetPauseOnExceptionsArgs represents the arguments for SetPauseOnExceptions in the Debugger domain.
type DebuggerSetPauseOnExceptionsArgs struct {
	State string `json:"state"` // Pause on exceptions mode.
}

// NewDebuggerSetPauseOnExceptionsArgs initializes DebuggerSetPauseOnExceptionsArgs with the required arguments.
func NewDebuggerSetPauseOnExceptionsArgs(state string) *DebuggerSetPauseOnExceptionsArgs {
	args := new(DebuggerSetPauseOnExceptionsArgs)
	args.State = state
	return args
}

// DebuggerEvaluateOnCallFrameArgs represents the arguments for EvaluateOnCallFrame in the Debugger domain.
type DebuggerEvaluateOnCallFrameArgs struct {
	CallFrameID           cdptype.DebuggerCallFrameID `json:"callFrameId"`                     // Call frame identifier to evaluate on.
	Expression            string                      `json:"expression"`                      // Expression to evaluate.
	ObjectGroup           *string                     `json:"objectGroup,omitempty"`           // String object group name to put result into (allows rapid releasing resulting object handles using releaseObjectGroup).
	IncludeCommandLineAPI *bool                       `json:"includeCommandLineAPI,omitempty"` // Specifies whether command line API should be available to the evaluated expression, defaults to false.
	Silent                *bool                       `json:"silent,omitempty"`                // In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
	ReturnByValue         *bool                       `json:"returnByValue,omitempty"`         // Whether the result is expected to be a JSON object that should be sent by value.
	GeneratePreview       *bool                       `json:"generatePreview,omitempty"`       // Whether preview should be generated for the result.
	ThrowOnSideEffect     *bool                       `json:"throwOnSideEffect,omitempty"`     // Whether to throw an exception if side effect cannot be ruled out during evaluation.
}

// NewDebuggerEvaluateOnCallFrameArgs initializes DebuggerEvaluateOnCallFrameArgs with the required arguments.
func NewDebuggerEvaluateOnCallFrameArgs(callFrameID cdptype.DebuggerCallFrameID, expression string) *DebuggerEvaluateOnCallFrameArgs {
	args := new(DebuggerEvaluateOnCallFrameArgs)
	args.CallFrameID = callFrameID
	args.Expression = expression
	return args
}

// SetObjectGroup sets the ObjectGroup optional argument. String object group name to put result into (allows rapid releasing resulting object handles using releaseObjectGroup).
func (a *DebuggerEvaluateOnCallFrameArgs) SetObjectGroup(objectGroup string) *DebuggerEvaluateOnCallFrameArgs {
	a.ObjectGroup = &objectGroup
	return a
}

// SetIncludeCommandLineAPI sets the IncludeCommandLineAPI optional argument. Specifies whether command line API should be available to the evaluated expression, defaults to false.
func (a *DebuggerEvaluateOnCallFrameArgs) SetIncludeCommandLineAPI(includeCommandLineAPI bool) *DebuggerEvaluateOnCallFrameArgs {
	a.IncludeCommandLineAPI = &includeCommandLineAPI
	return a
}

// SetSilent sets the Silent optional argument. In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
func (a *DebuggerEvaluateOnCallFrameArgs) SetSilent(silent bool) *DebuggerEvaluateOnCallFrameArgs {
	a.Silent = &silent
	return a
}

// SetReturnByValue sets the ReturnByValue optional argument. Whether the result is expected to be a JSON object that should be sent by value.
func (a *DebuggerEvaluateOnCallFrameArgs) SetReturnByValue(returnByValue bool) *DebuggerEvaluateOnCallFrameArgs {
	a.ReturnByValue = &returnByValue
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the result.
func (a *DebuggerEvaluateOnCallFrameArgs) SetGeneratePreview(generatePreview bool) *DebuggerEvaluateOnCallFrameArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// SetThrowOnSideEffect sets the ThrowOnSideEffect optional argument. Whether to throw an exception if side effect cannot be ruled out during evaluation.
func (a *DebuggerEvaluateOnCallFrameArgs) SetThrowOnSideEffect(throwOnSideEffect bool) *DebuggerEvaluateOnCallFrameArgs {
	a.ThrowOnSideEffect = &throwOnSideEffect
	return a
}

// DebuggerEvaluateOnCallFrameReply represents the return values for EvaluateOnCallFrame in the Debugger domain.
type DebuggerEvaluateOnCallFrameReply struct {
	Result           cdptype.RuntimeRemoteObject      `json:"result"`                     // Object wrapper for the evaluation result.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details.
}

// DebuggerSetVariableValueArgs represents the arguments for SetVariableValue in the Debugger domain.
type DebuggerSetVariableValueArgs struct {
	ScopeNumber  int                         `json:"scopeNumber"`  // 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.
	VariableName string                      `json:"variableName"` // Variable name.
	NewValue     cdptype.RuntimeCallArgument `json:"newValue"`     // New variable value.
	CallFrameID  cdptype.DebuggerCallFrameID `json:"callFrameId"`  // Id of callframe that holds variable.
}

// NewDebuggerSetVariableValueArgs initializes DebuggerSetVariableValueArgs with the required arguments.
func NewDebuggerSetVariableValueArgs(scopeNumber int, variableName string, newValue cdptype.RuntimeCallArgument, callFrameID cdptype.DebuggerCallFrameID) *DebuggerSetVariableValueArgs {
	args := new(DebuggerSetVariableValueArgs)
	args.ScopeNumber = scopeNumber
	args.VariableName = variableName
	args.NewValue = newValue
	args.CallFrameID = callFrameID
	return args
}

// DebuggerSetAsyncCallStackDepthArgs represents the arguments for SetAsyncCallStackDepth in the Debugger domain.
type DebuggerSetAsyncCallStackDepthArgs struct {
	MaxDepth int `json:"maxDepth"` // Maximum depth of async call stacks. Setting to 0 will effectively disable collecting async call stacks (default).
}

// NewDebuggerSetAsyncCallStackDepthArgs initializes DebuggerSetAsyncCallStackDepthArgs with the required arguments.
func NewDebuggerSetAsyncCallStackDepthArgs(maxDepth int) *DebuggerSetAsyncCallStackDepthArgs {
	args := new(DebuggerSetAsyncCallStackDepthArgs)
	args.MaxDepth = maxDepth
	return args
}

// DebuggerSetBlackboxPatternsArgs represents the arguments for SetBlackboxPatterns in the Debugger domain.
type DebuggerSetBlackboxPatternsArgs struct {
	Patterns []string `json:"patterns"` // Array of regexps that will be used to check script url for blackbox state.
}

// NewDebuggerSetBlackboxPatternsArgs initializes DebuggerSetBlackboxPatternsArgs with the required arguments.
func NewDebuggerSetBlackboxPatternsArgs(patterns []string) *DebuggerSetBlackboxPatternsArgs {
	args := new(DebuggerSetBlackboxPatternsArgs)
	args.Patterns = patterns
	return args
}

// DebuggerSetBlackboxedRangesArgs represents the arguments for SetBlackboxedRanges in the Debugger domain.
type DebuggerSetBlackboxedRangesArgs struct {
	ScriptID  cdptype.RuntimeScriptID          `json:"scriptId"`  // Id of the script.
	Positions []cdptype.DebuggerScriptPosition `json:"positions"` //
}

// NewDebuggerSetBlackboxedRangesArgs initializes DebuggerSetBlackboxedRangesArgs with the required arguments.
func NewDebuggerSetBlackboxedRangesArgs(scriptID cdptype.RuntimeScriptID, positions []cdptype.DebuggerScriptPosition) *DebuggerSetBlackboxedRangesArgs {
	args := new(DebuggerSetBlackboxedRangesArgs)
	args.ScriptID = scriptID
	args.Positions = positions
	return args
}

// DeviceOrientationSetDeviceOrientationOverrideArgs represents the arguments for SetDeviceOrientationOverride in the DeviceOrientation domain.
type DeviceOrientationSetDeviceOrientationOverrideArgs struct {
	Alpha float64 `json:"alpha"` // Mock alpha
	Beta  float64 `json:"beta"`  // Mock beta
	Gamma float64 `json:"gamma"` // Mock gamma
}

// NewDeviceOrientationSetDeviceOrientationOverrideArgs initializes DeviceOrientationSetDeviceOrientationOverrideArgs with the required arguments.
func NewDeviceOrientationSetDeviceOrientationOverrideArgs(alpha float64, beta float64, gamma float64) *DeviceOrientationSetDeviceOrientationOverrideArgs {
	args := new(DeviceOrientationSetDeviceOrientationOverrideArgs)
	args.Alpha = alpha
	args.Beta = beta
	args.Gamma = gamma
	return args
}

// EmulationSetDeviceMetricsOverrideArgs represents the arguments for SetDeviceMetricsOverride in the Emulation domain.
type EmulationSetDeviceMetricsOverrideArgs struct {
	Width             int                                 `json:"width"`                       // Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	Height            int                                 `json:"height"`                      // Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	DeviceScaleFactor float64                             `json:"deviceScaleFactor"`           // Overriding device scale factor value. 0 disables the override.
	Mobile            bool                                `json:"mobile"`                      // Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
	FitWindow         bool                                `json:"fitWindow"`                   // Whether a view that exceeds the available browser window area should be scaled down to fit.
	Scale             *float64                            `json:"scale,omitempty"`             // Scale to apply to resulting view image. Ignored in |fitWindow| mode.
	OffsetX           *float64                            `json:"offsetX,omitempty"`           // Not used.
	OffsetY           *float64                            `json:"offsetY,omitempty"`           // Not used.
	ScreenWidth       *int                                `json:"screenWidth,omitempty"`       // Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	ScreenHeight      *int                                `json:"screenHeight,omitempty"`      // Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	PositionX         *int                                `json:"positionX,omitempty"`         // Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	PositionY         *int                                `json:"positionY,omitempty"`         // Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	ScreenOrientation *cdptype.EmulationScreenOrientation `json:"screenOrientation,omitempty"` // Screen orientation override.
}

// NewEmulationSetDeviceMetricsOverrideArgs initializes EmulationSetDeviceMetricsOverrideArgs with the required arguments.
func NewEmulationSetDeviceMetricsOverrideArgs(width int, height int, deviceScaleFactor float64, mobile bool, fitWindow bool) *EmulationSetDeviceMetricsOverrideArgs {
	args := new(EmulationSetDeviceMetricsOverrideArgs)
	args.Width = width
	args.Height = height
	args.DeviceScaleFactor = deviceScaleFactor
	args.Mobile = mobile
	args.FitWindow = fitWindow
	return args
}

// SetScale sets the Scale optional argument. Scale to apply to resulting view image. Ignored in |fitWindow| mode.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetScale(scale float64) *EmulationSetDeviceMetricsOverrideArgs {
	a.Scale = &scale
	return a
}

// SetOffsetX sets the OffsetX optional argument. Not used.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetOffsetX(offsetX float64) *EmulationSetDeviceMetricsOverrideArgs {
	a.OffsetX = &offsetX
	return a
}

// SetOffsetY sets the OffsetY optional argument. Not used.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetOffsetY(offsetY float64) *EmulationSetDeviceMetricsOverrideArgs {
	a.OffsetY = &offsetY
	return a
}

// SetScreenWidth sets the ScreenWidth optional argument. Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetScreenWidth(screenWidth int) *EmulationSetDeviceMetricsOverrideArgs {
	a.ScreenWidth = &screenWidth
	return a
}

// SetScreenHeight sets the ScreenHeight optional argument. Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetScreenHeight(screenHeight int) *EmulationSetDeviceMetricsOverrideArgs {
	a.ScreenHeight = &screenHeight
	return a
}

// SetPositionX sets the PositionX optional argument. Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetPositionX(positionX int) *EmulationSetDeviceMetricsOverrideArgs {
	a.PositionX = &positionX
	return a
}

// SetPositionY sets the PositionY optional argument. Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetPositionY(positionY int) *EmulationSetDeviceMetricsOverrideArgs {
	a.PositionY = &positionY
	return a
}

// SetScreenOrientation sets the ScreenOrientation optional argument. Screen orientation override.
func (a *EmulationSetDeviceMetricsOverrideArgs) SetScreenOrientation(screenOrientation cdptype.EmulationScreenOrientation) *EmulationSetDeviceMetricsOverrideArgs {
	a.ScreenOrientation = &screenOrientation
	return a
}

// EmulationForceViewportArgs represents the arguments for ForceViewport in the Emulation domain.
type EmulationForceViewportArgs struct {
	X     float64 `json:"x"`     // X coordinate of top-left corner of the area (CSS pixels).
	Y     float64 `json:"y"`     // Y coordinate of top-left corner of the area (CSS pixels).
	Scale float64 `json:"scale"` // Scale to apply to the area (relative to a page scale of 1.0).
}

// NewEmulationForceViewportArgs initializes EmulationForceViewportArgs with the required arguments.
func NewEmulationForceViewportArgs(x float64, y float64, scale float64) *EmulationForceViewportArgs {
	args := new(EmulationForceViewportArgs)
	args.X = x
	args.Y = y
	args.Scale = scale
	return args
}

// EmulationSetPageScaleFactorArgs represents the arguments for SetPageScaleFactor in the Emulation domain.
type EmulationSetPageScaleFactorArgs struct {
	PageScaleFactor float64 `json:"pageScaleFactor"` // Page scale factor.
}

// NewEmulationSetPageScaleFactorArgs initializes EmulationSetPageScaleFactorArgs with the required arguments.
func NewEmulationSetPageScaleFactorArgs(pageScaleFactor float64) *EmulationSetPageScaleFactorArgs {
	args := new(EmulationSetPageScaleFactorArgs)
	args.PageScaleFactor = pageScaleFactor
	return args
}

// EmulationSetVisibleSizeArgs represents the arguments for SetVisibleSize in the Emulation domain.
type EmulationSetVisibleSizeArgs struct {
	Width  int `json:"width"`  // Frame width (DIP).
	Height int `json:"height"` // Frame height (DIP).
}

// NewEmulationSetVisibleSizeArgs initializes EmulationSetVisibleSizeArgs with the required arguments.
func NewEmulationSetVisibleSizeArgs(width int, height int) *EmulationSetVisibleSizeArgs {
	args := new(EmulationSetVisibleSizeArgs)
	args.Width = width
	args.Height = height
	return args
}

// EmulationSetScriptExecutionDisabledArgs represents the arguments for SetScriptExecutionDisabled in the Emulation domain.
type EmulationSetScriptExecutionDisabledArgs struct {
	Value bool `json:"value"` // Whether script execution should be disabled in the page.
}

// NewEmulationSetScriptExecutionDisabledArgs initializes EmulationSetScriptExecutionDisabledArgs with the required arguments.
func NewEmulationSetScriptExecutionDisabledArgs(value bool) *EmulationSetScriptExecutionDisabledArgs {
	args := new(EmulationSetScriptExecutionDisabledArgs)
	args.Value = value
	return args
}

// EmulationSetGeolocationOverrideArgs represents the arguments for SetGeolocationOverride in the Emulation domain.
type EmulationSetGeolocationOverrideArgs struct {
	Latitude  *float64 `json:"latitude,omitempty"`  // Mock latitude
	Longitude *float64 `json:"longitude,omitempty"` // Mock longitude
	Accuracy  *float64 `json:"accuracy,omitempty"`  // Mock accuracy
}

// NewEmulationSetGeolocationOverrideArgs initializes EmulationSetGeolocationOverrideArgs with the required arguments.
func NewEmulationSetGeolocationOverrideArgs() *EmulationSetGeolocationOverrideArgs {
	args := new(EmulationSetGeolocationOverrideArgs)

	return args
}

// SetLatitude sets the Latitude optional argument. Mock latitude
func (a *EmulationSetGeolocationOverrideArgs) SetLatitude(latitude float64) *EmulationSetGeolocationOverrideArgs {
	a.Latitude = &latitude
	return a
}

// SetLongitude sets the Longitude optional argument. Mock longitude
func (a *EmulationSetGeolocationOverrideArgs) SetLongitude(longitude float64) *EmulationSetGeolocationOverrideArgs {
	a.Longitude = &longitude
	return a
}

// SetAccuracy sets the Accuracy optional argument. Mock accuracy
func (a *EmulationSetGeolocationOverrideArgs) SetAccuracy(accuracy float64) *EmulationSetGeolocationOverrideArgs {
	a.Accuracy = &accuracy
	return a
}

// EmulationSetTouchEmulationEnabledArgs represents the arguments for SetTouchEmulationEnabled in the Emulation domain.
type EmulationSetTouchEmulationEnabledArgs struct {
	Enabled       bool    `json:"enabled"`                 // Whether the touch event emulation should be enabled.
	Configuration *string `json:"configuration,omitempty"` // Touch/gesture events configuration. Default: current platform.
}

// NewEmulationSetTouchEmulationEnabledArgs initializes EmulationSetTouchEmulationEnabledArgs with the required arguments.
func NewEmulationSetTouchEmulationEnabledArgs(enabled bool) *EmulationSetTouchEmulationEnabledArgs {
	args := new(EmulationSetTouchEmulationEnabledArgs)
	args.Enabled = enabled
	return args
}

// SetConfiguration sets the Configuration optional argument. Touch/gesture events configuration. Default: current platform.
func (a *EmulationSetTouchEmulationEnabledArgs) SetConfiguration(configuration string) *EmulationSetTouchEmulationEnabledArgs {
	a.Configuration = &configuration
	return a
}

// EmulationSetEmulatedMediaArgs represents the arguments for SetEmulatedMedia in the Emulation domain.
type EmulationSetEmulatedMediaArgs struct {
	Media string `json:"media"` // Media type to emulate. Empty string disables the override.
}

// NewEmulationSetEmulatedMediaArgs initializes EmulationSetEmulatedMediaArgs with the required arguments.
func NewEmulationSetEmulatedMediaArgs(media string) *EmulationSetEmulatedMediaArgs {
	args := new(EmulationSetEmulatedMediaArgs)
	args.Media = media
	return args
}

// EmulationSetCPUThrottlingRateArgs represents the arguments for SetCPUThrottlingRate in the Emulation domain.
type EmulationSetCPUThrottlingRateArgs struct {
	Rate float64 `json:"rate"` // Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
}

// NewEmulationSetCPUThrottlingRateArgs initializes EmulationSetCPUThrottlingRateArgs with the required arguments.
func NewEmulationSetCPUThrottlingRateArgs(rate float64) *EmulationSetCPUThrottlingRateArgs {
	args := new(EmulationSetCPUThrottlingRateArgs)
	args.Rate = rate
	return args
}

// EmulationCanEmulateReply represents the return values for CanEmulate in the Emulation domain.
type EmulationCanEmulateReply struct {
	Result bool `json:"result"` // True if emulation is supported.
}

// EmulationSetVirtualTimePolicyArgs represents the arguments for SetVirtualTimePolicy in the Emulation domain.
type EmulationSetVirtualTimePolicyArgs struct {
	Policy cdptype.EmulationVirtualTimePolicy `json:"policy"`           //
	Budget *int                               `json:"budget,omitempty"` // If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
}

// NewEmulationSetVirtualTimePolicyArgs initializes EmulationSetVirtualTimePolicyArgs with the required arguments.
func NewEmulationSetVirtualTimePolicyArgs(policy cdptype.EmulationVirtualTimePolicy) *EmulationSetVirtualTimePolicyArgs {
	args := new(EmulationSetVirtualTimePolicyArgs)
	args.Policy = policy
	return args
}

// SetBudget sets the Budget optional argument. If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
func (a *EmulationSetVirtualTimePolicyArgs) SetBudget(budget int) *EmulationSetVirtualTimePolicyArgs {
	a.Budget = &budget
	return a
}

// EmulationSetDefaultBackgroundColorOverrideArgs represents the arguments for SetDefaultBackgroundColorOverride in the Emulation domain.
type EmulationSetDefaultBackgroundColorOverrideArgs struct {
	Color *cdptype.DOMRGBA `json:"color,omitempty"` // RGBA of the default background color. If not specified, any existing override will be cleared.
}

// NewEmulationSetDefaultBackgroundColorOverrideArgs initializes EmulationSetDefaultBackgroundColorOverrideArgs with the required arguments.
func NewEmulationSetDefaultBackgroundColorOverrideArgs() *EmulationSetDefaultBackgroundColorOverrideArgs {
	args := new(EmulationSetDefaultBackgroundColorOverrideArgs)

	return args
}

// SetColor sets the Color optional argument. RGBA of the default background color. If not specified, any existing override will be cleared.
func (a *EmulationSetDefaultBackgroundColorOverrideArgs) SetColor(color cdptype.DOMRGBA) *EmulationSetDefaultBackgroundColorOverrideArgs {
	a.Color = &color
	return a
}

// HeapProfilerStartTrackingHeapObjectsArgs represents the arguments for StartTrackingHeapObjects in the HeapProfiler domain.
type HeapProfilerStartTrackingHeapObjectsArgs struct {
	TrackAllocations *bool `json:"trackAllocations,omitempty"` //
}

// NewHeapProfilerStartTrackingHeapObjectsArgs initializes HeapProfilerStartTrackingHeapObjectsArgs with the required arguments.
func NewHeapProfilerStartTrackingHeapObjectsArgs() *HeapProfilerStartTrackingHeapObjectsArgs {
	args := new(HeapProfilerStartTrackingHeapObjectsArgs)

	return args
}

// SetTrackAllocations sets the TrackAllocations optional argument.
func (a *HeapProfilerStartTrackingHeapObjectsArgs) SetTrackAllocations(trackAllocations bool) *HeapProfilerStartTrackingHeapObjectsArgs {
	a.TrackAllocations = &trackAllocations
	return a
}

// HeapProfilerStopTrackingHeapObjectsArgs represents the arguments for StopTrackingHeapObjects in the HeapProfiler domain.
type HeapProfilerStopTrackingHeapObjectsArgs struct {
	ReportProgress *bool `json:"reportProgress,omitempty"` // If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.
}

// NewHeapProfilerStopTrackingHeapObjectsArgs initializes HeapProfilerStopTrackingHeapObjectsArgs with the required arguments.
func NewHeapProfilerStopTrackingHeapObjectsArgs() *HeapProfilerStopTrackingHeapObjectsArgs {
	args := new(HeapProfilerStopTrackingHeapObjectsArgs)

	return args
}

// SetReportProgress sets the ReportProgress optional argument. If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.
func (a *HeapProfilerStopTrackingHeapObjectsArgs) SetReportProgress(reportProgress bool) *HeapProfilerStopTrackingHeapObjectsArgs {
	a.ReportProgress = &reportProgress
	return a
}

// HeapProfilerTakeHeapSnapshotArgs represents the arguments for TakeHeapSnapshot in the HeapProfiler domain.
type HeapProfilerTakeHeapSnapshotArgs struct {
	ReportProgress *bool `json:"reportProgress,omitempty"` // If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.
}

// NewHeapProfilerTakeHeapSnapshotArgs initializes HeapProfilerTakeHeapSnapshotArgs with the required arguments.
func NewHeapProfilerTakeHeapSnapshotArgs() *HeapProfilerTakeHeapSnapshotArgs {
	args := new(HeapProfilerTakeHeapSnapshotArgs)

	return args
}

// SetReportProgress sets the ReportProgress optional argument. If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.
func (a *HeapProfilerTakeHeapSnapshotArgs) SetReportProgress(reportProgress bool) *HeapProfilerTakeHeapSnapshotArgs {
	a.ReportProgress = &reportProgress
	return a
}

// HeapProfilerGetObjectByHeapObjectIDArgs represents the arguments for GetObjectByHeapObjectID in the HeapProfiler domain.
type HeapProfilerGetObjectByHeapObjectIDArgs struct {
	ObjectID    cdptype.HeapProfilerHeapSnapshotObjectID `json:"objectId"`              //
	ObjectGroup *string                                  `json:"objectGroup,omitempty"` // Symbolic group name that can be used to release multiple objects.
}

// NewHeapProfilerGetObjectByHeapObjectIDArgs initializes HeapProfilerGetObjectByHeapObjectIDArgs with the required arguments.
func NewHeapProfilerGetObjectByHeapObjectIDArgs(objectID cdptype.HeapProfilerHeapSnapshotObjectID) *HeapProfilerGetObjectByHeapObjectIDArgs {
	args := new(HeapProfilerGetObjectByHeapObjectIDArgs)
	args.ObjectID = objectID
	return args
}

// SetObjectGroup sets the ObjectGroup optional argument. Symbolic group name that can be used to release multiple objects.
func (a *HeapProfilerGetObjectByHeapObjectIDArgs) SetObjectGroup(objectGroup string) *HeapProfilerGetObjectByHeapObjectIDArgs {
	a.ObjectGroup = &objectGroup
	return a
}

// HeapProfilerGetObjectByHeapObjectIDReply represents the return values for GetObjectByHeapObjectID in the HeapProfiler domain.
type HeapProfilerGetObjectByHeapObjectIDReply struct {
	Result cdptype.RuntimeRemoteObject `json:"result"` // Evaluation result.
}

// HeapProfilerAddInspectedHeapObjectArgs represents the arguments for AddInspectedHeapObject in the HeapProfiler domain.
type HeapProfilerAddInspectedHeapObjectArgs struct {
	HeapObjectID cdptype.HeapProfilerHeapSnapshotObjectID `json:"heapObjectId"` // Heap snapshot object id to be accessible by means of $x command line API.
}

// NewHeapProfilerAddInspectedHeapObjectArgs initializes HeapProfilerAddInspectedHeapObjectArgs with the required arguments.
func NewHeapProfilerAddInspectedHeapObjectArgs(heapObjectID cdptype.HeapProfilerHeapSnapshotObjectID) *HeapProfilerAddInspectedHeapObjectArgs {
	args := new(HeapProfilerAddInspectedHeapObjectArgs)
	args.HeapObjectID = heapObjectID
	return args
}

// HeapProfilerGetHeapObjectIDArgs represents the arguments for GetHeapObjectID in the HeapProfiler domain.
type HeapProfilerGetHeapObjectIDArgs struct {
	ObjectID cdptype.RuntimeRemoteObjectID `json:"objectId"` // Identifier of the object to get heap object id for.
}

// NewHeapProfilerGetHeapObjectIDArgs initializes HeapProfilerGetHeapObjectIDArgs with the required arguments.
func NewHeapProfilerGetHeapObjectIDArgs(objectID cdptype.RuntimeRemoteObjectID) *HeapProfilerGetHeapObjectIDArgs {
	args := new(HeapProfilerGetHeapObjectIDArgs)
	args.ObjectID = objectID
	return args
}

// HeapProfilerGetHeapObjectIDReply represents the return values for GetHeapObjectID in the HeapProfiler domain.
type HeapProfilerGetHeapObjectIDReply struct {
	HeapSnapshotObjectID cdptype.HeapProfilerHeapSnapshotObjectID `json:"heapSnapshotObjectId"` // Id of the heap snapshot object corresponding to the passed remote object id.
}

// HeapProfilerStartSamplingArgs represents the arguments for StartSampling in the HeapProfiler domain.
type HeapProfilerStartSamplingArgs struct {
	SamplingInterval *float64 `json:"samplingInterval,omitempty"` // Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.
}

// NewHeapProfilerStartSamplingArgs initializes HeapProfilerStartSamplingArgs with the required arguments.
func NewHeapProfilerStartSamplingArgs() *HeapProfilerStartSamplingArgs {
	args := new(HeapProfilerStartSamplingArgs)

	return args
}

// SetSamplingInterval sets the SamplingInterval optional argument. Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.
func (a *HeapProfilerStartSamplingArgs) SetSamplingInterval(samplingInterval float64) *HeapProfilerStartSamplingArgs {
	a.SamplingInterval = &samplingInterval
	return a
}

// HeapProfilerStopSamplingReply represents the return values for StopSampling in the HeapProfiler domain.
type HeapProfilerStopSamplingReply struct {
	Profile cdptype.HeapProfilerSamplingHeapProfile `json:"profile"` // Recorded sampling heap profile.
}

// IOReadArgs represents the arguments for Read in the IO domain.
type IOReadArgs struct {
	Handle cdptype.IOStreamHandle `json:"handle"`           // Handle of the stream to read.
	Offset *int                   `json:"offset,omitempty"` // Seek to the specified offset before reading (if not specificed, proceed with offset following the last read).
	Size   *int                   `json:"size,omitempty"`   // Maximum number of bytes to read (left upon the agent discretion if not specified).
}

// NewIOReadArgs initializes IOReadArgs with the required arguments.
func NewIOReadArgs(handle cdptype.IOStreamHandle) *IOReadArgs {
	args := new(IOReadArgs)
	args.Handle = handle
	return args
}

// SetOffset sets the Offset optional argument. Seek to the specified offset before reading (if not specificed, proceed with offset following the last read).
func (a *IOReadArgs) SetOffset(offset int) *IOReadArgs {
	a.Offset = &offset
	return a
}

// SetSize sets the Size optional argument. Maximum number of bytes to read (left upon the agent discretion if not specified).
func (a *IOReadArgs) SetSize(size int) *IOReadArgs {
	a.Size = &size
	return a
}

// IOReadReply represents the return values for Read in the IO domain.
type IOReadReply struct {
	Data string `json:"data"` // Data that were read.
	EOF  bool   `json:"eof"`  // Set if the end-of-file condition occurred while reading.
}

// IOCloseArgs represents the arguments for Close in the IO domain.
type IOCloseArgs struct {
	Handle cdptype.IOStreamHandle `json:"handle"` // Handle of the stream to close.
}

// NewIOCloseArgs initializes IOCloseArgs with the required arguments.
func NewIOCloseArgs(handle cdptype.IOStreamHandle) *IOCloseArgs {
	args := new(IOCloseArgs)
	args.Handle = handle
	return args
}

// IndexedDBRequestDatabaseNamesArgs represents the arguments for RequestDatabaseNames in the IndexedDB domain.
type IndexedDBRequestDatabaseNamesArgs struct {
	SecurityOrigin string `json:"securityOrigin"` // Security origin.
}

// NewIndexedDBRequestDatabaseNamesArgs initializes IndexedDBRequestDatabaseNamesArgs with the required arguments.
func NewIndexedDBRequestDatabaseNamesArgs(securityOrigin string) *IndexedDBRequestDatabaseNamesArgs {
	args := new(IndexedDBRequestDatabaseNamesArgs)
	args.SecurityOrigin = securityOrigin
	return args
}

// IndexedDBRequestDatabaseNamesReply represents the return values for RequestDatabaseNames in the IndexedDB domain.
type IndexedDBRequestDatabaseNamesReply struct {
	DatabaseNames []string `json:"databaseNames"` // Database names for origin.
}

// IndexedDBRequestDatabaseArgs represents the arguments for RequestDatabase in the IndexedDB domain.
type IndexedDBRequestDatabaseArgs struct {
	SecurityOrigin string `json:"securityOrigin"` // Security origin.
	DatabaseName   string `json:"databaseName"`   // Database name.
}

// NewIndexedDBRequestDatabaseArgs initializes IndexedDBRequestDatabaseArgs with the required arguments.
func NewIndexedDBRequestDatabaseArgs(securityOrigin string, databaseName string) *IndexedDBRequestDatabaseArgs {
	args := new(IndexedDBRequestDatabaseArgs)
	args.SecurityOrigin = securityOrigin
	args.DatabaseName = databaseName
	return args
}

// IndexedDBRequestDatabaseReply represents the return values for RequestDatabase in the IndexedDB domain.
type IndexedDBRequestDatabaseReply struct {
	DatabaseWithObjectStores cdptype.IndexedDBDatabaseWithObjectStores `json:"databaseWithObjectStores"` // Database with an array of object stores.
}

// IndexedDBRequestDataArgs represents the arguments for RequestData in the IndexedDB domain.
type IndexedDBRequestDataArgs struct {
	SecurityOrigin  string                     `json:"securityOrigin"`     // Security origin.
	DatabaseName    string                     `json:"databaseName"`       // Database name.
	ObjectStoreName string                     `json:"objectStoreName"`    // Object store name.
	IndexName       string                     `json:"indexName"`          // Index name, empty string for object store data requests.
	SkipCount       int                        `json:"skipCount"`          // Number of records to skip.
	PageSize        int                        `json:"pageSize"`           // Number of records to fetch.
	KeyRange        *cdptype.IndexedDBKeyRange `json:"keyRange,omitempty"` // Key range.
}

// NewIndexedDBRequestDataArgs initializes IndexedDBRequestDataArgs with the required arguments.
func NewIndexedDBRequestDataArgs(securityOrigin string, databaseName string, objectStoreName string, indexName string, skipCount int, pageSize int) *IndexedDBRequestDataArgs {
	args := new(IndexedDBRequestDataArgs)
	args.SecurityOrigin = securityOrigin
	args.DatabaseName = databaseName
	args.ObjectStoreName = objectStoreName
	args.IndexName = indexName
	args.SkipCount = skipCount
	args.PageSize = pageSize
	return args
}

// SetKeyRange sets the KeyRange optional argument. Key range.
func (a *IndexedDBRequestDataArgs) SetKeyRange(keyRange cdptype.IndexedDBKeyRange) *IndexedDBRequestDataArgs {
	a.KeyRange = &keyRange
	return a
}

// IndexedDBRequestDataReply represents the return values for RequestData in the IndexedDB domain.
type IndexedDBRequestDataReply struct {
	ObjectStoreDataEntries []cdptype.IndexedDBDataEntry `json:"objectStoreDataEntries"` // Array of object store data entries.
	HasMore                bool                         `json:"hasMore"`                // If true, there are more entries to fetch in the given range.
}

// IndexedDBClearObjectStoreArgs represents the arguments for ClearObjectStore in the IndexedDB domain.
type IndexedDBClearObjectStoreArgs struct {
	SecurityOrigin  string `json:"securityOrigin"`  // Security origin.
	DatabaseName    string `json:"databaseName"`    // Database name.
	ObjectStoreName string `json:"objectStoreName"` // Object store name.
}

// NewIndexedDBClearObjectStoreArgs initializes IndexedDBClearObjectStoreArgs with the required arguments.
func NewIndexedDBClearObjectStoreArgs(securityOrigin string, databaseName string, objectStoreName string) *IndexedDBClearObjectStoreArgs {
	args := new(IndexedDBClearObjectStoreArgs)
	args.SecurityOrigin = securityOrigin
	args.DatabaseName = databaseName
	args.ObjectStoreName = objectStoreName
	return args
}

// IndexedDBDeleteDatabaseArgs represents the arguments for DeleteDatabase in the IndexedDB domain.
type IndexedDBDeleteDatabaseArgs struct {
	SecurityOrigin string `json:"securityOrigin"` // Security origin.
	DatabaseName   string `json:"databaseName"`   // Database name.
}

// NewIndexedDBDeleteDatabaseArgs initializes IndexedDBDeleteDatabaseArgs with the required arguments.
func NewIndexedDBDeleteDatabaseArgs(securityOrigin string, databaseName string) *IndexedDBDeleteDatabaseArgs {
	args := new(IndexedDBDeleteDatabaseArgs)
	args.SecurityOrigin = securityOrigin
	args.DatabaseName = databaseName
	return args
}

// InputSetIgnoreInputEventsArgs represents the arguments for SetIgnoreInputEvents in the Input domain.
type InputSetIgnoreInputEventsArgs struct {
	Ignore bool `json:"ignore"` // Ignores input events processing when set to true.
}

// NewInputSetIgnoreInputEventsArgs initializes InputSetIgnoreInputEventsArgs with the required arguments.
func NewInputSetIgnoreInputEventsArgs(ignore bool) *InputSetIgnoreInputEventsArgs {
	args := new(InputSetIgnoreInputEventsArgs)
	args.Ignore = ignore
	return args
}

// InputDispatchKeyEventArgs represents the arguments for DispatchKeyEvent in the Input domain.
type InputDispatchKeyEventArgs struct {
	Type                  string            `json:"type"`                            // Type of the key event.
	Modifiers             *int              `json:"modifiers,omitempty"`             // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp             cdptype.Timestamp `json:"timestamp,omitempty"`             // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
	Text                  *string           `json:"text,omitempty"`                  // Text as generated by processing a virtual key code with a keyboard layout. Not needed for for keyUp and rawKeyDown events (default: "")
	UnmodifiedText        *string           `json:"unmodifiedText,omitempty"`        // Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
	KeyIdentifier         *string           `json:"keyIdentifier,omitempty"`         // Unique key identifier (e.g., 'U+0041') (default: "").
	Code                  *string           `json:"code,omitempty"`                  // Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
	Key                   *string           `json:"key,omitempty"`                   // Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
	WindowsVirtualKeyCode *int              `json:"windowsVirtualKeyCode,omitempty"` // Windows virtual key code (default: 0).
	NativeVirtualKeyCode  *int              `json:"nativeVirtualKeyCode,omitempty"`  // Native virtual key code (default: 0).
	AutoRepeat            *bool             `json:"autoRepeat,omitempty"`            // Whether the event was generated from auto repeat (default: false).
	IsKeypad              *bool             `json:"isKeypad,omitempty"`              // Whether the event was generated from the keypad (default: false).
	IsSystemKey           *bool             `json:"isSystemKey,omitempty"`           // Whether the event was a system key event (default: false).
}

// NewInputDispatchKeyEventArgs initializes InputDispatchKeyEventArgs with the required arguments.
func NewInputDispatchKeyEventArgs(typ string) *InputDispatchKeyEventArgs {
	args := new(InputDispatchKeyEventArgs)
	args.Type = typ
	return args
}

// SetModifiers sets the Modifiers optional argument. Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
func (a *InputDispatchKeyEventArgs) SetModifiers(modifiers int) *InputDispatchKeyEventArgs {
	a.Modifiers = &modifiers
	return a
}

// SetTimestamp sets the Timestamp optional argument. Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
func (a *InputDispatchKeyEventArgs) SetTimestamp(timestamp cdptype.Timestamp) *InputDispatchKeyEventArgs {
	a.Timestamp = timestamp
	return a
}

// SetText sets the Text optional argument. Text as generated by processing a virtual key code with a keyboard layout. Not needed for for keyUp and rawKeyDown events (default: "")
func (a *InputDispatchKeyEventArgs) SetText(text string) *InputDispatchKeyEventArgs {
	a.Text = &text
	return a
}

// SetUnmodifiedText sets the UnmodifiedText optional argument. Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
func (a *InputDispatchKeyEventArgs) SetUnmodifiedText(unmodifiedText string) *InputDispatchKeyEventArgs {
	a.UnmodifiedText = &unmodifiedText
	return a
}

// SetKeyIdentifier sets the KeyIdentifier optional argument. Unique key identifier (e.g., 'U+0041') (default: "").
func (a *InputDispatchKeyEventArgs) SetKeyIdentifier(keyIdentifier string) *InputDispatchKeyEventArgs {
	a.KeyIdentifier = &keyIdentifier
	return a
}

// SetCode sets the Code optional argument. Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
func (a *InputDispatchKeyEventArgs) SetCode(code string) *InputDispatchKeyEventArgs {
	a.Code = &code
	return a
}

// SetKey sets the Key optional argument. Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
func (a *InputDispatchKeyEventArgs) SetKey(key string) *InputDispatchKeyEventArgs {
	a.Key = &key
	return a
}

// SetWindowsVirtualKeyCode sets the WindowsVirtualKeyCode optional argument. Windows virtual key code (default: 0).
func (a *InputDispatchKeyEventArgs) SetWindowsVirtualKeyCode(windowsVirtualKeyCode int) *InputDispatchKeyEventArgs {
	a.WindowsVirtualKeyCode = &windowsVirtualKeyCode
	return a
}

// SetNativeVirtualKeyCode sets the NativeVirtualKeyCode optional argument. Native virtual key code (default: 0).
func (a *InputDispatchKeyEventArgs) SetNativeVirtualKeyCode(nativeVirtualKeyCode int) *InputDispatchKeyEventArgs {
	a.NativeVirtualKeyCode = &nativeVirtualKeyCode
	return a
}

// SetAutoRepeat sets the AutoRepeat optional argument. Whether the event was generated from auto repeat (default: false).
func (a *InputDispatchKeyEventArgs) SetAutoRepeat(autoRepeat bool) *InputDispatchKeyEventArgs {
	a.AutoRepeat = &autoRepeat
	return a
}

// SetIsKeypad sets the IsKeypad optional argument. Whether the event was generated from the keypad (default: false).
func (a *InputDispatchKeyEventArgs) SetIsKeypad(isKeypad bool) *InputDispatchKeyEventArgs {
	a.IsKeypad = &isKeypad
	return a
}

// SetIsSystemKey sets the IsSystemKey optional argument. Whether the event was a system key event (default: false).
func (a *InputDispatchKeyEventArgs) SetIsSystemKey(isSystemKey bool) *InputDispatchKeyEventArgs {
	a.IsSystemKey = &isSystemKey
	return a
}

// InputDispatchMouseEventArgs represents the arguments for DispatchMouseEvent in the Input domain.
type InputDispatchMouseEventArgs struct {
	Type       string            `json:"type"`                 // Type of the mouse event.
	X          int               `json:"x"`                    // X coordinate of the event relative to the main frame's viewport.
	Y          int               `json:"y"`                    // Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
	Modifiers  *int              `json:"modifiers,omitempty"`  // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp  cdptype.Timestamp `json:"timestamp,omitempty"`  // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
	Button     *string           `json:"button,omitempty"`     // Mouse button (default: "none").
	ClickCount *int              `json:"clickCount,omitempty"` // Number of times the mouse button was clicked (default: 0).
}

// NewInputDispatchMouseEventArgs initializes InputDispatchMouseEventArgs with the required arguments.
func NewInputDispatchMouseEventArgs(typ string, x int, y int) *InputDispatchMouseEventArgs {
	args := new(InputDispatchMouseEventArgs)
	args.Type = typ
	args.X = x
	args.Y = y
	return args
}

// SetModifiers sets the Modifiers optional argument. Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
func (a *InputDispatchMouseEventArgs) SetModifiers(modifiers int) *InputDispatchMouseEventArgs {
	a.Modifiers = &modifiers
	return a
}

// SetTimestamp sets the Timestamp optional argument. Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
func (a *InputDispatchMouseEventArgs) SetTimestamp(timestamp cdptype.Timestamp) *InputDispatchMouseEventArgs {
	a.Timestamp = timestamp
	return a
}

// SetButton sets the Button optional argument. Mouse button (default: "none").
func (a *InputDispatchMouseEventArgs) SetButton(button string) *InputDispatchMouseEventArgs {
	a.Button = &button
	return a
}

// SetClickCount sets the ClickCount optional argument. Number of times the mouse button was clicked (default: 0).
func (a *InputDispatchMouseEventArgs) SetClickCount(clickCount int) *InputDispatchMouseEventArgs {
	a.ClickCount = &clickCount
	return a
}

// InputDispatchTouchEventArgs represents the arguments for DispatchTouchEvent in the Input domain.
type InputDispatchTouchEventArgs struct {
	Type        string                    `json:"type"`                // Type of the touch event.
	TouchPoints []cdptype.InputTouchPoint `json:"touchPoints"`         // Touch points.
	Modifiers   *int                      `json:"modifiers,omitempty"` // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	Timestamp   cdptype.Timestamp         `json:"timestamp,omitempty"` // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
}

// NewInputDispatchTouchEventArgs initializes InputDispatchTouchEventArgs with the required arguments.
func NewInputDispatchTouchEventArgs(typ string, touchPoints []cdptype.InputTouchPoint) *InputDispatchTouchEventArgs {
	args := new(InputDispatchTouchEventArgs)
	args.Type = typ
	args.TouchPoints = touchPoints
	return args
}

// SetModifiers sets the Modifiers optional argument. Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
func (a *InputDispatchTouchEventArgs) SetModifiers(modifiers int) *InputDispatchTouchEventArgs {
	a.Modifiers = &modifiers
	return a
}

// SetTimestamp sets the Timestamp optional argument. Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
func (a *InputDispatchTouchEventArgs) SetTimestamp(timestamp cdptype.Timestamp) *InputDispatchTouchEventArgs {
	a.Timestamp = timestamp
	return a
}

// InputEmulateTouchFromMouseEventArgs represents the arguments for EmulateTouchFromMouseEvent in the Input domain.
type InputEmulateTouchFromMouseEventArgs struct {
	Type       string            `json:"type"`                 // Type of the mouse event.
	X          int               `json:"x"`                    // X coordinate of the mouse pointer in DIP.
	Y          int               `json:"y"`                    // Y coordinate of the mouse pointer in DIP.
	Timestamp  cdptype.Timestamp `json:"timestamp"`            // Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970.
	Button     string            `json:"button"`               // Mouse button.
	DeltaX     *float64          `json:"deltaX,omitempty"`     // X delta in DIP for mouse wheel event (default: 0).
	DeltaY     *float64          `json:"deltaY,omitempty"`     // Y delta in DIP for mouse wheel event (default: 0).
	Modifiers  *int              `json:"modifiers,omitempty"`  // Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
	ClickCount *int              `json:"clickCount,omitempty"` // Number of times the mouse button was clicked (default: 0).
}

// NewInputEmulateTouchFromMouseEventArgs initializes InputEmulateTouchFromMouseEventArgs with the required arguments.
func NewInputEmulateTouchFromMouseEventArgs(typ string, x int, y int, timestamp cdptype.Timestamp, button string) *InputEmulateTouchFromMouseEventArgs {
	args := new(InputEmulateTouchFromMouseEventArgs)
	args.Type = typ
	args.X = x
	args.Y = y
	args.Timestamp = timestamp
	args.Button = button
	return args
}

// SetDeltaX sets the DeltaX optional argument. X delta in DIP for mouse wheel event (default: 0).
func (a *InputEmulateTouchFromMouseEventArgs) SetDeltaX(deltaX float64) *InputEmulateTouchFromMouseEventArgs {
	a.DeltaX = &deltaX
	return a
}

// SetDeltaY sets the DeltaY optional argument. Y delta in DIP for mouse wheel event (default: 0).
func (a *InputEmulateTouchFromMouseEventArgs) SetDeltaY(deltaY float64) *InputEmulateTouchFromMouseEventArgs {
	a.DeltaY = &deltaY
	return a
}

// SetModifiers sets the Modifiers optional argument. Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
func (a *InputEmulateTouchFromMouseEventArgs) SetModifiers(modifiers int) *InputEmulateTouchFromMouseEventArgs {
	a.Modifiers = &modifiers
	return a
}

// SetClickCount sets the ClickCount optional argument. Number of times the mouse button was clicked (default: 0).
func (a *InputEmulateTouchFromMouseEventArgs) SetClickCount(clickCount int) *InputEmulateTouchFromMouseEventArgs {
	a.ClickCount = &clickCount
	return a
}

// InputSynthesizePinchGestureArgs represents the arguments for SynthesizePinchGesture in the Input domain.
type InputSynthesizePinchGestureArgs struct {
	X                 int                            `json:"x"`                           // X coordinate of the start of the gesture in CSS pixels.
	Y                 int                            `json:"y"`                           // Y coordinate of the start of the gesture in CSS pixels.
	ScaleFactor       float64                        `json:"scaleFactor"`                 // Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
	RelativeSpeed     *int                           `json:"relativeSpeed,omitempty"`     // Relative pointer speed in pixels per second (default: 800).
	GestureSourceType cdptype.InputGestureSourceType `json:"gestureSourceType,omitempty"` // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}

// NewInputSynthesizePinchGestureArgs initializes InputSynthesizePinchGestureArgs with the required arguments.
func NewInputSynthesizePinchGestureArgs(x int, y int, scaleFactor float64) *InputSynthesizePinchGestureArgs {
	args := new(InputSynthesizePinchGestureArgs)
	args.X = x
	args.Y = y
	args.ScaleFactor = scaleFactor
	return args
}

// SetRelativeSpeed sets the RelativeSpeed optional argument. Relative pointer speed in pixels per second (default: 800).
func (a *InputSynthesizePinchGestureArgs) SetRelativeSpeed(relativeSpeed int) *InputSynthesizePinchGestureArgs {
	a.RelativeSpeed = &relativeSpeed
	return a
}

// SetGestureSourceType sets the GestureSourceType optional argument. Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
func (a *InputSynthesizePinchGestureArgs) SetGestureSourceType(gestureSourceType cdptype.InputGestureSourceType) *InputSynthesizePinchGestureArgs {
	a.GestureSourceType = gestureSourceType
	return a
}

// InputSynthesizeScrollGestureArgs represents the arguments for SynthesizeScrollGesture in the Input domain.
type InputSynthesizeScrollGestureArgs struct {
	X                     int                            `json:"x"`                               // X coordinate of the start of the gesture in CSS pixels.
	Y                     int                            `json:"y"`                               // Y coordinate of the start of the gesture in CSS pixels.
	XDistance             *int                           `json:"xDistance,omitempty"`             // The distance to scroll along the X axis (positive to scroll left).
	YDistance             *int                           `json:"yDistance,omitempty"`             // The distance to scroll along the Y axis (positive to scroll up).
	XOverscroll           *int                           `json:"xOverscroll,omitempty"`           // The number of additional pixels to scroll back along the X axis, in addition to the given distance.
	YOverscroll           *int                           `json:"yOverscroll,omitempty"`           // The number of additional pixels to scroll back along the Y axis, in addition to the given distance.
	PreventFling          *bool                          `json:"preventFling,omitempty"`          // Prevent fling (default: true).
	Speed                 *int                           `json:"speed,omitempty"`                 // Swipe speed in pixels per second (default: 800).
	GestureSourceType     cdptype.InputGestureSourceType `json:"gestureSourceType,omitempty"`     // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
	RepeatCount           *int                           `json:"repeatCount,omitempty"`           // The number of times to repeat the gesture (default: 0).
	RepeatDelayMs         *int                           `json:"repeatDelayMs,omitempty"`         // The number of milliseconds delay between each repeat. (default: 250).
	InteractionMarkerName *string                        `json:"interactionMarkerName,omitempty"` // The name of the interaction markers to generate, if not empty (default: "").
}

// NewInputSynthesizeScrollGestureArgs initializes InputSynthesizeScrollGestureArgs with the required arguments.
func NewInputSynthesizeScrollGestureArgs(x int, y int) *InputSynthesizeScrollGestureArgs {
	args := new(InputSynthesizeScrollGestureArgs)
	args.X = x
	args.Y = y
	return args
}

// SetXDistance sets the XDistance optional argument. The distance to scroll along the X axis (positive to scroll left).
func (a *InputSynthesizeScrollGestureArgs) SetXDistance(xDistance int) *InputSynthesizeScrollGestureArgs {
	a.XDistance = &xDistance
	return a
}

// SetYDistance sets the YDistance optional argument. The distance to scroll along the Y axis (positive to scroll up).
func (a *InputSynthesizeScrollGestureArgs) SetYDistance(yDistance int) *InputSynthesizeScrollGestureArgs {
	a.YDistance = &yDistance
	return a
}

// SetXOverscroll sets the XOverscroll optional argument. The number of additional pixels to scroll back along the X axis, in addition to the given distance.
func (a *InputSynthesizeScrollGestureArgs) SetXOverscroll(xOverscroll int) *InputSynthesizeScrollGestureArgs {
	a.XOverscroll = &xOverscroll
	return a
}

// SetYOverscroll sets the YOverscroll optional argument. The number of additional pixels to scroll back along the Y axis, in addition to the given distance.
func (a *InputSynthesizeScrollGestureArgs) SetYOverscroll(yOverscroll int) *InputSynthesizeScrollGestureArgs {
	a.YOverscroll = &yOverscroll
	return a
}

// SetPreventFling sets the PreventFling optional argument. Prevent fling (default: true).
func (a *InputSynthesizeScrollGestureArgs) SetPreventFling(preventFling bool) *InputSynthesizeScrollGestureArgs {
	a.PreventFling = &preventFling
	return a
}

// SetSpeed sets the Speed optional argument. Swipe speed in pixels per second (default: 800).
func (a *InputSynthesizeScrollGestureArgs) SetSpeed(speed int) *InputSynthesizeScrollGestureArgs {
	a.Speed = &speed
	return a
}

// SetGestureSourceType sets the GestureSourceType optional argument. Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
func (a *InputSynthesizeScrollGestureArgs) SetGestureSourceType(gestureSourceType cdptype.InputGestureSourceType) *InputSynthesizeScrollGestureArgs {
	a.GestureSourceType = gestureSourceType
	return a
}

// SetRepeatCount sets the RepeatCount optional argument. The number of times to repeat the gesture (default: 0).
func (a *InputSynthesizeScrollGestureArgs) SetRepeatCount(repeatCount int) *InputSynthesizeScrollGestureArgs {
	a.RepeatCount = &repeatCount
	return a
}

// SetRepeatDelayMs sets the RepeatDelayMs optional argument. The number of milliseconds delay between each repeat. (default: 250).
func (a *InputSynthesizeScrollGestureArgs) SetRepeatDelayMs(repeatDelayMs int) *InputSynthesizeScrollGestureArgs {
	a.RepeatDelayMs = &repeatDelayMs
	return a
}

// SetInteractionMarkerName sets the InteractionMarkerName optional argument. The name of the interaction markers to generate, if not empty (default: "").
func (a *InputSynthesizeScrollGestureArgs) SetInteractionMarkerName(interactionMarkerName string) *InputSynthesizeScrollGestureArgs {
	a.InteractionMarkerName = &interactionMarkerName
	return a
}

// InputSynthesizeTapGestureArgs represents the arguments for SynthesizeTapGesture in the Input domain.
type InputSynthesizeTapGestureArgs struct {
	X                 int                            `json:"x"`                           // X coordinate of the start of the gesture in CSS pixels.
	Y                 int                            `json:"y"`                           // Y coordinate of the start of the gesture in CSS pixels.
	Duration          *int                           `json:"duration,omitempty"`          // Duration between touchdown and touchup events in ms (default: 50).
	TapCount          *int                           `json:"tapCount,omitempty"`          // Number of times to perform the tap (e.g. 2 for double tap, default: 1).
	GestureSourceType cdptype.InputGestureSourceType `json:"gestureSourceType,omitempty"` // Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
}

// NewInputSynthesizeTapGestureArgs initializes InputSynthesizeTapGestureArgs with the required arguments.
func NewInputSynthesizeTapGestureArgs(x int, y int) *InputSynthesizeTapGestureArgs {
	args := new(InputSynthesizeTapGestureArgs)
	args.X = x
	args.Y = y
	return args
}

// SetDuration sets the Duration optional argument. Duration between touchdown and touchup events in ms (default: 50).
func (a *InputSynthesizeTapGestureArgs) SetDuration(duration int) *InputSynthesizeTapGestureArgs {
	a.Duration = &duration
	return a
}

// SetTapCount sets the TapCount optional argument. Number of times to perform the tap (e.g. 2 for double tap, default: 1).
func (a *InputSynthesizeTapGestureArgs) SetTapCount(tapCount int) *InputSynthesizeTapGestureArgs {
	a.TapCount = &tapCount
	return a
}

// SetGestureSourceType sets the GestureSourceType optional argument. Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
func (a *InputSynthesizeTapGestureArgs) SetGestureSourceType(gestureSourceType cdptype.InputGestureSourceType) *InputSynthesizeTapGestureArgs {
	a.GestureSourceType = gestureSourceType
	return a
}

// LayerTreeCompositingReasonsArgs represents the arguments for CompositingReasons in the LayerTree domain.
type LayerTreeCompositingReasonsArgs struct {
	LayerID cdptype.LayerTreeLayerID `json:"layerId"` // The id of the layer for which we want to get the reasons it was composited.
}

// NewLayerTreeCompositingReasonsArgs initializes LayerTreeCompositingReasonsArgs with the required arguments.
func NewLayerTreeCompositingReasonsArgs(layerID cdptype.LayerTreeLayerID) *LayerTreeCompositingReasonsArgs {
	args := new(LayerTreeCompositingReasonsArgs)
	args.LayerID = layerID
	return args
}

// LayerTreeCompositingReasonsReply represents the return values for CompositingReasons in the LayerTree domain.
type LayerTreeCompositingReasonsReply struct {
	CompositingReasons []string `json:"compositingReasons"` // A list of strings specifying reasons for the given layer to become composited.
}

// LayerTreeMakeSnapshotArgs represents the arguments for MakeSnapshot in the LayerTree domain.
type LayerTreeMakeSnapshotArgs struct {
	LayerID cdptype.LayerTreeLayerID `json:"layerId"` // The id of the layer.
}

// NewLayerTreeMakeSnapshotArgs initializes LayerTreeMakeSnapshotArgs with the required arguments.
func NewLayerTreeMakeSnapshotArgs(layerID cdptype.LayerTreeLayerID) *LayerTreeMakeSnapshotArgs {
	args := new(LayerTreeMakeSnapshotArgs)
	args.LayerID = layerID
	return args
}

// LayerTreeMakeSnapshotReply represents the return values for MakeSnapshot in the LayerTree domain.
type LayerTreeMakeSnapshotReply struct {
	SnapshotID cdptype.LayerTreeSnapshotID `json:"snapshotId"` // The id of the layer snapshot.
}

// LayerTreeLoadSnapshotArgs represents the arguments for LoadSnapshot in the LayerTree domain.
type LayerTreeLoadSnapshotArgs struct {
	Tiles []cdptype.LayerTreePictureTile `json:"tiles"` // An array of tiles composing the snapshot.
}

// NewLayerTreeLoadSnapshotArgs initializes LayerTreeLoadSnapshotArgs with the required arguments.
func NewLayerTreeLoadSnapshotArgs(tiles []cdptype.LayerTreePictureTile) *LayerTreeLoadSnapshotArgs {
	args := new(LayerTreeLoadSnapshotArgs)
	args.Tiles = tiles
	return args
}

// LayerTreeLoadSnapshotReply represents the return values for LoadSnapshot in the LayerTree domain.
type LayerTreeLoadSnapshotReply struct {
	SnapshotID cdptype.LayerTreeSnapshotID `json:"snapshotId"` // The id of the snapshot.
}

// LayerTreeReleaseSnapshotArgs represents the arguments for ReleaseSnapshot in the LayerTree domain.
type LayerTreeReleaseSnapshotArgs struct {
	SnapshotID cdptype.LayerTreeSnapshotID `json:"snapshotId"` // The id of the layer snapshot.
}

// NewLayerTreeReleaseSnapshotArgs initializes LayerTreeReleaseSnapshotArgs with the required arguments.
func NewLayerTreeReleaseSnapshotArgs(snapshotID cdptype.LayerTreeSnapshotID) *LayerTreeReleaseSnapshotArgs {
	args := new(LayerTreeReleaseSnapshotArgs)
	args.SnapshotID = snapshotID
	return args
}

// LayerTreeProfileSnapshotArgs represents the arguments for ProfileSnapshot in the LayerTree domain.
type LayerTreeProfileSnapshotArgs struct {
	SnapshotID     cdptype.LayerTreeSnapshotID `json:"snapshotId"`               // The id of the layer snapshot.
	MinRepeatCount *int                        `json:"minRepeatCount,omitempty"` // The maximum number of times to replay the snapshot (1, if not specified).
	MinDuration    *float64                    `json:"minDuration,omitempty"`    // The minimum duration (in seconds) to replay the snapshot.
	ClipRect       *cdptype.DOMRect            `json:"clipRect,omitempty"`       // The clip rectangle to apply when replaying the snapshot.
}

// NewLayerTreeProfileSnapshotArgs initializes LayerTreeProfileSnapshotArgs with the required arguments.
func NewLayerTreeProfileSnapshotArgs(snapshotID cdptype.LayerTreeSnapshotID) *LayerTreeProfileSnapshotArgs {
	args := new(LayerTreeProfileSnapshotArgs)
	args.SnapshotID = snapshotID
	return args
}

// SetMinRepeatCount sets the MinRepeatCount optional argument. The maximum number of times to replay the snapshot (1, if not specified).
func (a *LayerTreeProfileSnapshotArgs) SetMinRepeatCount(minRepeatCount int) *LayerTreeProfileSnapshotArgs {
	a.MinRepeatCount = &minRepeatCount
	return a
}

// SetMinDuration sets the MinDuration optional argument. The minimum duration (in seconds) to replay the snapshot.
func (a *LayerTreeProfileSnapshotArgs) SetMinDuration(minDuration float64) *LayerTreeProfileSnapshotArgs {
	a.MinDuration = &minDuration
	return a
}

// SetClipRect sets the ClipRect optional argument. The clip rectangle to apply when replaying the snapshot.
func (a *LayerTreeProfileSnapshotArgs) SetClipRect(clipRect cdptype.DOMRect) *LayerTreeProfileSnapshotArgs {
	a.ClipRect = &clipRect
	return a
}

// LayerTreeProfileSnapshotReply represents the return values for ProfileSnapshot in the LayerTree domain.
type LayerTreeProfileSnapshotReply struct {
	Timings []cdptype.LayerTreePaintProfile `json:"timings"` // The array of paint profiles, one per run.
}

// LayerTreeReplaySnapshotArgs represents the arguments for ReplaySnapshot in the LayerTree domain.
type LayerTreeReplaySnapshotArgs struct {
	SnapshotID cdptype.LayerTreeSnapshotID `json:"snapshotId"`         // The id of the layer snapshot.
	FromStep   *int                        `json:"fromStep,omitempty"` // The first step to replay from (replay from the very start if not specified).
	ToStep     *int                        `json:"toStep,omitempty"`   // The last step to replay to (replay till the end if not specified).
	Scale      *float64                    `json:"scale,omitempty"`    // The scale to apply while replaying (defaults to 1).
}

// NewLayerTreeReplaySnapshotArgs initializes LayerTreeReplaySnapshotArgs with the required arguments.
func NewLayerTreeReplaySnapshotArgs(snapshotID cdptype.LayerTreeSnapshotID) *LayerTreeReplaySnapshotArgs {
	args := new(LayerTreeReplaySnapshotArgs)
	args.SnapshotID = snapshotID
	return args
}

// SetFromStep sets the FromStep optional argument. The first step to replay from (replay from the very start if not specified).
func (a *LayerTreeReplaySnapshotArgs) SetFromStep(fromStep int) *LayerTreeReplaySnapshotArgs {
	a.FromStep = &fromStep
	return a
}

// SetToStep sets the ToStep optional argument. The last step to replay to (replay till the end if not specified).
func (a *LayerTreeReplaySnapshotArgs) SetToStep(toStep int) *LayerTreeReplaySnapshotArgs {
	a.ToStep = &toStep
	return a
}

// SetScale sets the Scale optional argument. The scale to apply while replaying (defaults to 1).
func (a *LayerTreeReplaySnapshotArgs) SetScale(scale float64) *LayerTreeReplaySnapshotArgs {
	a.Scale = &scale
	return a
}

// LayerTreeReplaySnapshotReply represents the return values for ReplaySnapshot in the LayerTree domain.
type LayerTreeReplaySnapshotReply struct {
	DataURL string `json:"dataURL"` // A data: URL for resulting image.
}

// LayerTreeSnapshotCommandLogArgs represents the arguments for SnapshotCommandLog in the LayerTree domain.
type LayerTreeSnapshotCommandLogArgs struct {
	SnapshotID cdptype.LayerTreeSnapshotID `json:"snapshotId"` // The id of the layer snapshot.
}

// NewLayerTreeSnapshotCommandLogArgs initializes LayerTreeSnapshotCommandLogArgs with the required arguments.
func NewLayerTreeSnapshotCommandLogArgs(snapshotID cdptype.LayerTreeSnapshotID) *LayerTreeSnapshotCommandLogArgs {
	args := new(LayerTreeSnapshotCommandLogArgs)
	args.SnapshotID = snapshotID
	return args
}

// LayerTreeSnapshotCommandLogReply represents the return values for SnapshotCommandLog in the LayerTree domain.
type LayerTreeSnapshotCommandLogReply struct {
	CommandLog []json.RawMessage `json:"commandLog"` // The array of canvas function calls.
}

// LogStartViolationsReportArgs represents the arguments for StartViolationsReport in the Log domain.
type LogStartViolationsReportArgs struct {
	Config []cdptype.LogViolationSetting `json:"config"` // Configuration for violations.
}

// NewLogStartViolationsReportArgs initializes LogStartViolationsReportArgs with the required arguments.
func NewLogStartViolationsReportArgs(config []cdptype.LogViolationSetting) *LogStartViolationsReportArgs {
	args := new(LogStartViolationsReportArgs)
	args.Config = config
	return args
}

// MemoryGetDOMCountersReply represents the return values for GetDOMCounters in the Memory domain.
type MemoryGetDOMCountersReply struct {
	Documents        int `json:"documents"`        //
	Nodes            int `json:"nodes"`            //
	JsEventListeners int `json:"jsEventListeners"` //
}

// MemorySetPressureNotificationsSuppressedArgs represents the arguments for SetPressureNotificationsSuppressed in the Memory domain.
type MemorySetPressureNotificationsSuppressedArgs struct {
	Suppressed bool `json:"suppressed"` // If true, memory pressure notifications will be suppressed.
}

// NewMemorySetPressureNotificationsSuppressedArgs initializes MemorySetPressureNotificationsSuppressedArgs with the required arguments.
func NewMemorySetPressureNotificationsSuppressedArgs(suppressed bool) *MemorySetPressureNotificationsSuppressedArgs {
	args := new(MemorySetPressureNotificationsSuppressedArgs)
	args.Suppressed = suppressed
	return args
}

// MemorySimulatePressureNotificationArgs represents the arguments for SimulatePressureNotification in the Memory domain.
type MemorySimulatePressureNotificationArgs struct {
	Level cdptype.MemoryPressureLevel `json:"level"` // Memory pressure level of the notification.
}

// NewMemorySimulatePressureNotificationArgs initializes MemorySimulatePressureNotificationArgs with the required arguments.
func NewMemorySimulatePressureNotificationArgs(level cdptype.MemoryPressureLevel) *MemorySimulatePressureNotificationArgs {
	args := new(MemorySimulatePressureNotificationArgs)
	args.Level = level
	return args
}

// NetworkEnableArgs represents the arguments for Enable in the Network domain.
type NetworkEnableArgs struct {
	MaxTotalBufferSize    *int `json:"maxTotalBufferSize,omitempty"`    // Buffer size in bytes to use when preserving network payloads (XHRs, etc).
	MaxResourceBufferSize *int `json:"maxResourceBufferSize,omitempty"` // Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).
}

// NewNetworkEnableArgs initializes NetworkEnableArgs with the required arguments.
func NewNetworkEnableArgs() *NetworkEnableArgs {
	args := new(NetworkEnableArgs)

	return args
}

// SetMaxTotalBufferSize sets the MaxTotalBufferSize optional argument. Buffer size in bytes to use when preserving network payloads (XHRs, etc).
func (a *NetworkEnableArgs) SetMaxTotalBufferSize(maxTotalBufferSize int) *NetworkEnableArgs {
	a.MaxTotalBufferSize = &maxTotalBufferSize
	return a
}

// SetMaxResourceBufferSize sets the MaxResourceBufferSize optional argument. Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).
func (a *NetworkEnableArgs) SetMaxResourceBufferSize(maxResourceBufferSize int) *NetworkEnableArgs {
	a.MaxResourceBufferSize = &maxResourceBufferSize
	return a
}

// NetworkSetUserAgentOverrideArgs represents the arguments for SetUserAgentOverride in the Network domain.
type NetworkSetUserAgentOverrideArgs struct {
	UserAgent string `json:"userAgent"` // User agent to use.
}

// NewNetworkSetUserAgentOverrideArgs initializes NetworkSetUserAgentOverrideArgs with the required arguments.
func NewNetworkSetUserAgentOverrideArgs(userAgent string) *NetworkSetUserAgentOverrideArgs {
	args := new(NetworkSetUserAgentOverrideArgs)
	args.UserAgent = userAgent
	return args
}

// NetworkSetExtraHTTPHeadersArgs represents the arguments for SetExtraHTTPHeaders in the Network domain.
type NetworkSetExtraHTTPHeadersArgs struct {
	Headers cdptype.NetworkHeaders `json:"headers"` // Map with extra HTTP headers.
}

// NewNetworkSetExtraHTTPHeadersArgs initializes NetworkSetExtraHTTPHeadersArgs with the required arguments.
func NewNetworkSetExtraHTTPHeadersArgs(headers cdptype.NetworkHeaders) *NetworkSetExtraHTTPHeadersArgs {
	args := new(NetworkSetExtraHTTPHeadersArgs)
	args.Headers = headers
	return args
}

// NetworkGetResponseBodyArgs represents the arguments for GetResponseBody in the Network domain.
type NetworkGetResponseBodyArgs struct {
	RequestID cdptype.NetworkRequestID `json:"requestId"` // Identifier of the network request to get content for.
}

// NewNetworkGetResponseBodyArgs initializes NetworkGetResponseBodyArgs with the required arguments.
func NewNetworkGetResponseBodyArgs(requestID cdptype.NetworkRequestID) *NetworkGetResponseBodyArgs {
	args := new(NetworkGetResponseBodyArgs)
	args.RequestID = requestID
	return args
}

// NetworkGetResponseBodyReply represents the return values for GetResponseBody in the Network domain.
type NetworkGetResponseBodyReply struct {
	Body          string `json:"body"`          // Response body.
	Base64Encoded bool   `json:"base64Encoded"` // True, if content was sent as base64.
}

// NetworkSetBlockedURLsArgs represents the arguments for SetBlockedURLs in the Network domain.
type NetworkSetBlockedURLsArgs struct {
	URLs []string `json:"urls"` // URL patterns to block. Wildcards ('*') are allowed.
}

// NewNetworkSetBlockedURLsArgs initializes NetworkSetBlockedURLsArgs with the required arguments.
func NewNetworkSetBlockedURLsArgs(urls []string) *NetworkSetBlockedURLsArgs {
	args := new(NetworkSetBlockedURLsArgs)
	args.URLs = urls
	return args
}

// NetworkReplayXHRArgs represents the arguments for ReplayXHR in the Network domain.
type NetworkReplayXHRArgs struct {
	RequestID cdptype.NetworkRequestID `json:"requestId"` // Identifier of XHR to replay.
}

// NewNetworkReplayXHRArgs initializes NetworkReplayXHRArgs with the required arguments.
func NewNetworkReplayXHRArgs(requestID cdptype.NetworkRequestID) *NetworkReplayXHRArgs {
	args := new(NetworkReplayXHRArgs)
	args.RequestID = requestID
	return args
}

// NetworkCanClearBrowserCacheReply represents the return values for CanClearBrowserCache in the Network domain.
type NetworkCanClearBrowserCacheReply struct {
	Result bool `json:"result"` // True if browser cache can be cleared.
}

// NetworkCanClearBrowserCookiesReply represents the return values for CanClearBrowserCookies in the Network domain.
type NetworkCanClearBrowserCookiesReply struct {
	Result bool `json:"result"` // True if browser cookies can be cleared.
}

// NetworkGetCookiesArgs represents the arguments for GetCookies in the Network domain.
type NetworkGetCookiesArgs struct {
	URLs []string `json:"urls,omitempty"` // The list of URLs for which applicable cookies will be fetched
}

// NewNetworkGetCookiesArgs initializes NetworkGetCookiesArgs with the required arguments.
func NewNetworkGetCookiesArgs() *NetworkGetCookiesArgs {
	args := new(NetworkGetCookiesArgs)

	return args
}

// SetURLs sets the URLs optional argument. The list of URLs for which applicable cookies will be fetched
func (a *NetworkGetCookiesArgs) SetURLs(urls []string) *NetworkGetCookiesArgs {
	a.URLs = urls
	return a
}

// NetworkGetCookiesReply represents the return values for GetCookies in the Network domain.
type NetworkGetCookiesReply struct {
	Cookies []cdptype.NetworkCookie `json:"cookies"` // Array of cookie objects.
}

// NetworkGetAllCookiesReply represents the return values for GetAllCookies in the Network domain.
type NetworkGetAllCookiesReply struct {
	Cookies []cdptype.NetworkCookie `json:"cookies"` // Array of cookie objects.
}

// NetworkDeleteCookieArgs represents the arguments for DeleteCookie in the Network domain.
type NetworkDeleteCookieArgs struct {
	CookieName string `json:"cookieName"` // Name of the cookie to remove.
	URL        string `json:"url"`        // URL to match cooke domain and path.
}

// NewNetworkDeleteCookieArgs initializes NetworkDeleteCookieArgs with the required arguments.
func NewNetworkDeleteCookieArgs(cookieName string, url string) *NetworkDeleteCookieArgs {
	args := new(NetworkDeleteCookieArgs)
	args.CookieName = cookieName
	args.URL = url
	return args
}

// NetworkSetCookieArgs represents the arguments for SetCookie in the Network domain.
type NetworkSetCookieArgs struct {
	URL            string                        `json:"url"`                      // The request-URI to associate with the setting of the cookie. This value can affect the default domain and path values of the created cookie.
	Name           string                        `json:"name"`                     // The name of the cookie.
	Value          string                        `json:"value"`                    // The value of the cookie.
	Domain         *string                       `json:"domain,omitempty"`         // If omitted, the cookie becomes a host-only cookie.
	Path           *string                       `json:"path,omitempty"`           // Defaults to the path portion of the url parameter.
	Secure         *bool                         `json:"secure,omitempty"`         // Defaults ot false.
	HTTPOnly       *bool                         `json:"httpOnly,omitempty"`       // Defaults to false.
	SameSite       cdptype.NetworkCookieSameSite `json:"sameSite,omitempty"`       // Defaults to browser default behavior.
	ExpirationDate cdptype.NetworkTimestamp      `json:"expirationDate,omitempty"` // If omitted, the cookie becomes a session cookie.
}

// NewNetworkSetCookieArgs initializes NetworkSetCookieArgs with the required arguments.
func NewNetworkSetCookieArgs(url string, name string, value string) *NetworkSetCookieArgs {
	args := new(NetworkSetCookieArgs)
	args.URL = url
	args.Name = name
	args.Value = value
	return args
}

// SetDomain sets the Domain optional argument. If omitted, the cookie becomes a host-only cookie.
func (a *NetworkSetCookieArgs) SetDomain(domain string) *NetworkSetCookieArgs {
	a.Domain = &domain
	return a
}

// SetPath sets the Path optional argument. Defaults to the path portion of the url parameter.
func (a *NetworkSetCookieArgs) SetPath(path string) *NetworkSetCookieArgs {
	a.Path = &path
	return a
}

// SetSecure sets the Secure optional argument. Defaults ot false.
func (a *NetworkSetCookieArgs) SetSecure(secure bool) *NetworkSetCookieArgs {
	a.Secure = &secure
	return a
}

// SetHTTPOnly sets the HTTPOnly optional argument. Defaults to false.
func (a *NetworkSetCookieArgs) SetHTTPOnly(httpOnly bool) *NetworkSetCookieArgs {
	a.HTTPOnly = &httpOnly
	return a
}

// SetSameSite sets the SameSite optional argument. Defaults to browser default behavior.
func (a *NetworkSetCookieArgs) SetSameSite(sameSite cdptype.NetworkCookieSameSite) *NetworkSetCookieArgs {
	a.SameSite = sameSite
	return a
}

// SetExpirationDate sets the ExpirationDate optional argument. If omitted, the cookie becomes a session cookie.
func (a *NetworkSetCookieArgs) SetExpirationDate(expirationDate cdptype.NetworkTimestamp) *NetworkSetCookieArgs {
	a.ExpirationDate = expirationDate
	return a
}

// NetworkSetCookieReply represents the return values for SetCookie in the Network domain.
type NetworkSetCookieReply struct {
	Success bool `json:"success"` // True if successfully set cookie.
}

// NetworkCanEmulateNetworkConditionsReply represents the return values for CanEmulateNetworkConditions in the Network domain.
type NetworkCanEmulateNetworkConditionsReply struct {
	Result bool `json:"result"` // True if emulation of network conditions is supported.
}

// NetworkEmulateNetworkConditionsArgs represents the arguments for EmulateNetworkConditions in the Network domain.
type NetworkEmulateNetworkConditionsArgs struct {
	Offline            bool                          `json:"offline"`                  // True to emulate internet disconnection.
	Latency            float64                       `json:"latency"`                  // Additional latency (ms).
	DownloadThroughput float64                       `json:"downloadThroughput"`       // Maximal aggregated download throughput.
	UploadThroughput   float64                       `json:"uploadThroughput"`         // Maximal aggregated upload throughput.
	ConnectionType     cdptype.NetworkConnectionType `json:"connectionType,omitempty"` // Connection type if known.
}

// NewNetworkEmulateNetworkConditionsArgs initializes NetworkEmulateNetworkConditionsArgs with the required arguments.
func NewNetworkEmulateNetworkConditionsArgs(offline bool, latency float64, downloadThroughput float64, uploadThroughput float64) *NetworkEmulateNetworkConditionsArgs {
	args := new(NetworkEmulateNetworkConditionsArgs)
	args.Offline = offline
	args.Latency = latency
	args.DownloadThroughput = downloadThroughput
	args.UploadThroughput = uploadThroughput
	return args
}

// SetConnectionType sets the ConnectionType optional argument. Connection type if known.
func (a *NetworkEmulateNetworkConditionsArgs) SetConnectionType(connectionType cdptype.NetworkConnectionType) *NetworkEmulateNetworkConditionsArgs {
	a.ConnectionType = connectionType
	return a
}

// NetworkSetCacheDisabledArgs represents the arguments for SetCacheDisabled in the Network domain.
type NetworkSetCacheDisabledArgs struct {
	CacheDisabled bool `json:"cacheDisabled"` // Cache disabled state.
}

// NewNetworkSetCacheDisabledArgs initializes NetworkSetCacheDisabledArgs with the required arguments.
func NewNetworkSetCacheDisabledArgs(cacheDisabled bool) *NetworkSetCacheDisabledArgs {
	args := new(NetworkSetCacheDisabledArgs)
	args.CacheDisabled = cacheDisabled
	return args
}

// NetworkSetBypassServiceWorkerArgs represents the arguments for SetBypassServiceWorker in the Network domain.
type NetworkSetBypassServiceWorkerArgs struct {
	Bypass bool `json:"bypass"` // Bypass service worker and load from network.
}

// NewNetworkSetBypassServiceWorkerArgs initializes NetworkSetBypassServiceWorkerArgs with the required arguments.
func NewNetworkSetBypassServiceWorkerArgs(bypass bool) *NetworkSetBypassServiceWorkerArgs {
	args := new(NetworkSetBypassServiceWorkerArgs)
	args.Bypass = bypass
	return args
}

// NetworkSetDataSizeLimitsForTestArgs represents the arguments for SetDataSizeLimitsForTest in the Network domain.
type NetworkSetDataSizeLimitsForTestArgs struct {
	MaxTotalSize    int `json:"maxTotalSize"`    // Maximum total buffer size.
	MaxResourceSize int `json:"maxResourceSize"` // Maximum per-resource size.
}

// NewNetworkSetDataSizeLimitsForTestArgs initializes NetworkSetDataSizeLimitsForTestArgs with the required arguments.
func NewNetworkSetDataSizeLimitsForTestArgs(maxTotalSize int, maxResourceSize int) *NetworkSetDataSizeLimitsForTestArgs {
	args := new(NetworkSetDataSizeLimitsForTestArgs)
	args.MaxTotalSize = maxTotalSize
	args.MaxResourceSize = maxResourceSize
	return args
}

// NetworkGetCertificateArgs represents the arguments for GetCertificate in the Network domain.
type NetworkGetCertificateArgs struct {
	Origin string `json:"origin"` // Origin to get certificate for.
}

// NewNetworkGetCertificateArgs initializes NetworkGetCertificateArgs with the required arguments.
func NewNetworkGetCertificateArgs(origin string) *NetworkGetCertificateArgs {
	args := new(NetworkGetCertificateArgs)
	args.Origin = origin
	return args
}

// NetworkGetCertificateReply represents the return values for GetCertificate in the Network domain.
type NetworkGetCertificateReply struct {
	TableNames []string `json:"tableNames"` //
}

// NetworkEnableRequestInterceptionArgs represents the arguments for EnableRequestInterception in the Network domain.
type NetworkEnableRequestInterceptionArgs struct {
	Enabled bool `json:"enabled"` // Whether or not HTTP requests should be intercepted and Network.requestIntercepted events sent.
}

// NewNetworkEnableRequestInterceptionArgs initializes NetworkEnableRequestInterceptionArgs with the required arguments.
func NewNetworkEnableRequestInterceptionArgs(enabled bool) *NetworkEnableRequestInterceptionArgs {
	args := new(NetworkEnableRequestInterceptionArgs)
	args.Enabled = enabled
	return args
}

// NetworkContinueInterceptedRequestArgs represents the arguments for ContinueInterceptedRequest in the Network domain.
type NetworkContinueInterceptedRequestArgs struct {
	InterceptionID        cdptype.NetworkInterceptionID         `json:"interceptionId"`                  //
	ErrorReason           cdptype.NetworkErrorReason            `json:"errorReason,omitempty"`           // If set this causes the request to fail with the given reason. Must not be set in response to an authChallenge.
	RawResponse           *string                               `json:"rawResponse,omitempty"`           // If set the requests completes using with the provided base64 encoded raw response, including HTTP status line and headers etc... Must not be set in response to an authChallenge.
	URL                   *string                               `json:"url,omitempty"`                   // If set the request url will be modified in a way that's not observable by page. Must not be set in response to an authChallenge.
	Method                *string                               `json:"method,omitempty"`                // If set this allows the request method to be overridden. Must not be set in response to an authChallenge.
	PostData              *string                               `json:"postData,omitempty"`              // If set this allows postData to be set. Must not be set in response to an authChallenge.
	Headers               cdptype.NetworkHeaders                `json:"headers,omitempty"`               // If set this allows the request headers to be changed. Must not be set in response to an authChallenge.
	AuthChallengeResponse *cdptype.NetworkAuthChallengeResponse `json:"authChallengeResponse,omitempty"` // Response to a requestIntercepted with an authChallenge. Must not be set otherwise.
}

// NewNetworkContinueInterceptedRequestArgs initializes NetworkContinueInterceptedRequestArgs with the required arguments.
func NewNetworkContinueInterceptedRequestArgs(interceptionID cdptype.NetworkInterceptionID) *NetworkContinueInterceptedRequestArgs {
	args := new(NetworkContinueInterceptedRequestArgs)
	args.InterceptionID = interceptionID
	return args
}

// SetErrorReason sets the ErrorReason optional argument. If set this causes the request to fail with the given reason. Must not be set in response to an authChallenge.
func (a *NetworkContinueInterceptedRequestArgs) SetErrorReason(errorReason cdptype.NetworkErrorReason) *NetworkContinueInterceptedRequestArgs {
	a.ErrorReason = errorReason
	return a
}

// SetRawResponse sets the RawResponse optional argument. If set the requests completes using with the provided base64 encoded raw response, including HTTP status line and headers etc... Must not be set in response to an authChallenge.
func (a *NetworkContinueInterceptedRequestArgs) SetRawResponse(rawResponse string) *NetworkContinueInterceptedRequestArgs {
	a.RawResponse = &rawResponse
	return a
}

// SetURL sets the URL optional argument. If set the request url will be modified in a way that's not observable by page. Must not be set in response to an authChallenge.
func (a *NetworkContinueInterceptedRequestArgs) SetURL(url string) *NetworkContinueInterceptedRequestArgs {
	a.URL = &url
	return a
}

// SetMethod sets the Method optional argument. If set this allows the request method to be overridden. Must not be set in response to an authChallenge.
func (a *NetworkContinueInterceptedRequestArgs) SetMethod(method string) *NetworkContinueInterceptedRequestArgs {
	a.Method = &method
	return a
}

// SetPostData sets the PostData optional argument. If set this allows postData to be set. Must not be set in response to an authChallenge.
func (a *NetworkContinueInterceptedRequestArgs) SetPostData(postData string) *NetworkContinueInterceptedRequestArgs {
	a.PostData = &postData
	return a
}

// SetHeaders sets the Headers optional argument. If set this allows the request headers to be changed. Must not be set in response to an authChallenge.
func (a *NetworkContinueInterceptedRequestArgs) SetHeaders(headers cdptype.NetworkHeaders) *NetworkContinueInterceptedRequestArgs {
	a.Headers = headers
	return a
}

// SetAuthChallengeResponse sets the AuthChallengeResponse optional argument. Response to a requestIntercepted with an authChallenge. Must not be set otherwise.
func (a *NetworkContinueInterceptedRequestArgs) SetAuthChallengeResponse(authChallengeResponse cdptype.NetworkAuthChallengeResponse) *NetworkContinueInterceptedRequestArgs {
	a.AuthChallengeResponse = &authChallengeResponse
	return a
}

// OverlaySetShowPaintRectsArgs represents the arguments for SetShowPaintRects in the Overlay domain.
type OverlaySetShowPaintRectsArgs struct {
	Result bool `json:"result"` // True for showing paint rectangles
}

// NewOverlaySetShowPaintRectsArgs initializes OverlaySetShowPaintRectsArgs with the required arguments.
func NewOverlaySetShowPaintRectsArgs(result bool) *OverlaySetShowPaintRectsArgs {
	args := new(OverlaySetShowPaintRectsArgs)
	args.Result = result
	return args
}

// OverlaySetShowDebugBordersArgs represents the arguments for SetShowDebugBorders in the Overlay domain.
type OverlaySetShowDebugBordersArgs struct {
	Show bool `json:"show"` // True for showing debug borders
}

// NewOverlaySetShowDebugBordersArgs initializes OverlaySetShowDebugBordersArgs with the required arguments.
func NewOverlaySetShowDebugBordersArgs(show bool) *OverlaySetShowDebugBordersArgs {
	args := new(OverlaySetShowDebugBordersArgs)
	args.Show = show
	return args
}

// OverlaySetShowFPSCounterArgs represents the arguments for SetShowFPSCounter in the Overlay domain.
type OverlaySetShowFPSCounterArgs struct {
	Show bool `json:"show"` // True for showing the FPS counter
}

// NewOverlaySetShowFPSCounterArgs initializes OverlaySetShowFPSCounterArgs with the required arguments.
func NewOverlaySetShowFPSCounterArgs(show bool) *OverlaySetShowFPSCounterArgs {
	args := new(OverlaySetShowFPSCounterArgs)
	args.Show = show
	return args
}

// OverlaySetShowScrollBottleneckRectsArgs represents the arguments for SetShowScrollBottleneckRects in the Overlay domain.
type OverlaySetShowScrollBottleneckRectsArgs struct {
	Show bool `json:"show"` // True for showing scroll bottleneck rects
}

// NewOverlaySetShowScrollBottleneckRectsArgs initializes OverlaySetShowScrollBottleneckRectsArgs with the required arguments.
func NewOverlaySetShowScrollBottleneckRectsArgs(show bool) *OverlaySetShowScrollBottleneckRectsArgs {
	args := new(OverlaySetShowScrollBottleneckRectsArgs)
	args.Show = show
	return args
}

// OverlaySetShowViewportSizeOnResizeArgs represents the arguments for SetShowViewportSizeOnResize in the Overlay domain.
type OverlaySetShowViewportSizeOnResizeArgs struct {
	Show bool `json:"show"` // Whether to paint size or not.
}

// NewOverlaySetShowViewportSizeOnResizeArgs initializes OverlaySetShowViewportSizeOnResizeArgs with the required arguments.
func NewOverlaySetShowViewportSizeOnResizeArgs(show bool) *OverlaySetShowViewportSizeOnResizeArgs {
	args := new(OverlaySetShowViewportSizeOnResizeArgs)
	args.Show = show
	return args
}

// OverlaySetPausedInDebuggerMessageArgs represents the arguments for SetPausedInDebuggerMessage in the Overlay domain.
type OverlaySetPausedInDebuggerMessageArgs struct {
	Message *string `json:"message,omitempty"` // The message to display, also triggers resume and step over controls.
}

// NewOverlaySetPausedInDebuggerMessageArgs initializes OverlaySetPausedInDebuggerMessageArgs with the required arguments.
func NewOverlaySetPausedInDebuggerMessageArgs() *OverlaySetPausedInDebuggerMessageArgs {
	args := new(OverlaySetPausedInDebuggerMessageArgs)

	return args
}

// SetMessage sets the Message optional argument. The message to display, also triggers resume and step over controls.
func (a *OverlaySetPausedInDebuggerMessageArgs) SetMessage(message string) *OverlaySetPausedInDebuggerMessageArgs {
	a.Message = &message
	return a
}

// OverlaySetSuspendedArgs represents the arguments for SetSuspended in the Overlay domain.
type OverlaySetSuspendedArgs struct {
	Suspended bool `json:"suspended"` // Whether overlay should be suspended and not consume any resources until resumed.
}

// NewOverlaySetSuspendedArgs initializes OverlaySetSuspendedArgs with the required arguments.
func NewOverlaySetSuspendedArgs(suspended bool) *OverlaySetSuspendedArgs {
	args := new(OverlaySetSuspendedArgs)
	args.Suspended = suspended
	return args
}

// OverlaySetInspectModeArgs represents the arguments for SetInspectMode in the Overlay domain.
type OverlaySetInspectModeArgs struct {
	Mode            cdptype.OverlayInspectMode      `json:"mode"`                      // Set an inspection mode.
	HighlightConfig *cdptype.OverlayHighlightConfig `json:"highlightConfig,omitempty"` // A descriptor for the highlight appearance of hovered-over nodes. May be omitted if enabled == false.
}

// NewOverlaySetInspectModeArgs initializes OverlaySetInspectModeArgs with the required arguments.
func NewOverlaySetInspectModeArgs(mode cdptype.OverlayInspectMode) *OverlaySetInspectModeArgs {
	args := new(OverlaySetInspectModeArgs)
	args.Mode = mode
	return args
}

// SetHighlightConfig sets the HighlightConfig optional argument. A descriptor for the highlight appearance of hovered-over nodes. May be omitted if enabled == false.
func (a *OverlaySetInspectModeArgs) SetHighlightConfig(highlightConfig cdptype.OverlayHighlightConfig) *OverlaySetInspectModeArgs {
	a.HighlightConfig = &highlightConfig
	return a
}

// OverlayHighlightRectArgs represents the arguments for HighlightRect in the Overlay domain.
type OverlayHighlightRectArgs struct {
	X            int              `json:"x"`                      // X coordinate
	Y            int              `json:"y"`                      // Y coordinate
	Width        int              `json:"width"`                  // Rectangle width
	Height       int              `json:"height"`                 // Rectangle height
	Color        *cdptype.DOMRGBA `json:"color,omitempty"`        // The highlight fill color (default: transparent).
	OutlineColor *cdptype.DOMRGBA `json:"outlineColor,omitempty"` // The highlight outline color (default: transparent).
}

// NewOverlayHighlightRectArgs initializes OverlayHighlightRectArgs with the required arguments.
func NewOverlayHighlightRectArgs(x int, y int, width int, height int) *OverlayHighlightRectArgs {
	args := new(OverlayHighlightRectArgs)
	args.X = x
	args.Y = y
	args.Width = width
	args.Height = height
	return args
}

// SetColor sets the Color optional argument. The highlight fill color (default: transparent).
func (a *OverlayHighlightRectArgs) SetColor(color cdptype.DOMRGBA) *OverlayHighlightRectArgs {
	a.Color = &color
	return a
}

// SetOutlineColor sets the OutlineColor optional argument. The highlight outline color (default: transparent).
func (a *OverlayHighlightRectArgs) SetOutlineColor(outlineColor cdptype.DOMRGBA) *OverlayHighlightRectArgs {
	a.OutlineColor = &outlineColor
	return a
}

// OverlayHighlightQuadArgs represents the arguments for HighlightQuad in the Overlay domain.
type OverlayHighlightQuadArgs struct {
	Quad         cdptype.DOMQuad  `json:"quad"`                   // Quad to highlight
	Color        *cdptype.DOMRGBA `json:"color,omitempty"`        // The highlight fill color (default: transparent).
	OutlineColor *cdptype.DOMRGBA `json:"outlineColor,omitempty"` // The highlight outline color (default: transparent).
}

// NewOverlayHighlightQuadArgs initializes OverlayHighlightQuadArgs with the required arguments.
func NewOverlayHighlightQuadArgs(quad cdptype.DOMQuad) *OverlayHighlightQuadArgs {
	args := new(OverlayHighlightQuadArgs)
	args.Quad = quad
	return args
}

// SetColor sets the Color optional argument. The highlight fill color (default: transparent).
func (a *OverlayHighlightQuadArgs) SetColor(color cdptype.DOMRGBA) *OverlayHighlightQuadArgs {
	a.Color = &color
	return a
}

// SetOutlineColor sets the OutlineColor optional argument. The highlight outline color (default: transparent).
func (a *OverlayHighlightQuadArgs) SetOutlineColor(outlineColor cdptype.DOMRGBA) *OverlayHighlightQuadArgs {
	a.OutlineColor = &outlineColor
	return a
}

// OverlayHighlightNodeArgs represents the arguments for HighlightNode in the Overlay domain.
type OverlayHighlightNodeArgs struct {
	HighlightConfig cdptype.OverlayHighlightConfig `json:"highlightConfig"`         // A descriptor for the highlight appearance.
	NodeID          *cdptype.DOMNodeID             `json:"nodeId,omitempty"`        // Identifier of the node to highlight.
	BackendNodeID   *cdptype.DOMBackendNodeID      `json:"backendNodeId,omitempty"` // Identifier of the backend node to highlight.
	ObjectID        *cdptype.RuntimeRemoteObjectID `json:"objectId,omitempty"`      // JavaScript object id of the node to be highlighted.
}

// NewOverlayHighlightNodeArgs initializes OverlayHighlightNodeArgs with the required arguments.
func NewOverlayHighlightNodeArgs(highlightConfig cdptype.OverlayHighlightConfig) *OverlayHighlightNodeArgs {
	args := new(OverlayHighlightNodeArgs)
	args.HighlightConfig = highlightConfig
	return args
}

// SetNodeID sets the NodeID optional argument. Identifier of the node to highlight.
func (a *OverlayHighlightNodeArgs) SetNodeID(nodeID cdptype.DOMNodeID) *OverlayHighlightNodeArgs {
	a.NodeID = &nodeID
	return a
}

// SetBackendNodeID sets the BackendNodeID optional argument. Identifier of the backend node to highlight.
func (a *OverlayHighlightNodeArgs) SetBackendNodeID(backendNodeID cdptype.DOMBackendNodeID) *OverlayHighlightNodeArgs {
	a.BackendNodeID = &backendNodeID
	return a
}

// SetObjectID sets the ObjectID optional argument. JavaScript object id of the node to be highlighted.
func (a *OverlayHighlightNodeArgs) SetObjectID(objectID cdptype.RuntimeRemoteObjectID) *OverlayHighlightNodeArgs {
	a.ObjectID = &objectID
	return a
}

// OverlayHighlightFrameArgs represents the arguments for HighlightFrame in the Overlay domain.
type OverlayHighlightFrameArgs struct {
	FrameID             cdptype.PageFrameID `json:"frameId"`                       // Identifier of the frame to highlight.
	ContentColor        *cdptype.DOMRGBA    `json:"contentColor,omitempty"`        // The content box highlight fill color (default: transparent).
	ContentOutlineColor *cdptype.DOMRGBA    `json:"contentOutlineColor,omitempty"` // The content box highlight outline color (default: transparent).
}

// NewOverlayHighlightFrameArgs initializes OverlayHighlightFrameArgs with the required arguments.
func NewOverlayHighlightFrameArgs(frameID cdptype.PageFrameID) *OverlayHighlightFrameArgs {
	args := new(OverlayHighlightFrameArgs)
	args.FrameID = frameID
	return args
}

// SetContentColor sets the ContentColor optional argument. The content box highlight fill color (default: transparent).
func (a *OverlayHighlightFrameArgs) SetContentColor(contentColor cdptype.DOMRGBA) *OverlayHighlightFrameArgs {
	a.ContentColor = &contentColor
	return a
}

// SetContentOutlineColor sets the ContentOutlineColor optional argument. The content box highlight outline color (default: transparent).
func (a *OverlayHighlightFrameArgs) SetContentOutlineColor(contentOutlineColor cdptype.DOMRGBA) *OverlayHighlightFrameArgs {
	a.ContentOutlineColor = &contentOutlineColor
	return a
}

// OverlayGetHighlightObjectForTestArgs represents the arguments for GetHighlightObjectForTest in the Overlay domain.
type OverlayGetHighlightObjectForTestArgs struct {
	NodeID cdptype.DOMNodeID `json:"nodeId"` // Id of the node to get highlight object for.
}

// NewOverlayGetHighlightObjectForTestArgs initializes OverlayGetHighlightObjectForTestArgs with the required arguments.
func NewOverlayGetHighlightObjectForTestArgs(nodeID cdptype.DOMNodeID) *OverlayGetHighlightObjectForTestArgs {
	args := new(OverlayGetHighlightObjectForTestArgs)
	args.NodeID = nodeID
	return args
}

// OverlayGetHighlightObjectForTestReply represents the return values for GetHighlightObjectForTest in the Overlay domain.
type OverlayGetHighlightObjectForTestReply struct {
	Highlight json.RawMessage `json:"highlight"` // Highlight data for the node.
}

// PageAddScriptToEvaluateOnLoadArgs represents the arguments for AddScriptToEvaluateOnLoad in the Page domain.
type PageAddScriptToEvaluateOnLoadArgs struct {
	ScriptSource string `json:"scriptSource"` //
}

// NewPageAddScriptToEvaluateOnLoadArgs initializes PageAddScriptToEvaluateOnLoadArgs with the required arguments.
func NewPageAddScriptToEvaluateOnLoadArgs(scriptSource string) *PageAddScriptToEvaluateOnLoadArgs {
	args := new(PageAddScriptToEvaluateOnLoadArgs)
	args.ScriptSource = scriptSource
	return args
}

// PageAddScriptToEvaluateOnLoadReply represents the return values for AddScriptToEvaluateOnLoad in the Page domain.
type PageAddScriptToEvaluateOnLoadReply struct {
	Identifier cdptype.PageScriptIdentifier `json:"identifier"` // Identifier of the added script.
}

// PageRemoveScriptToEvaluateOnLoadArgs represents the arguments for RemoveScriptToEvaluateOnLoad in the Page domain.
type PageRemoveScriptToEvaluateOnLoadArgs struct {
	Identifier cdptype.PageScriptIdentifier `json:"identifier"` //
}

// NewPageRemoveScriptToEvaluateOnLoadArgs initializes PageRemoveScriptToEvaluateOnLoadArgs with the required arguments.
func NewPageRemoveScriptToEvaluateOnLoadArgs(identifier cdptype.PageScriptIdentifier) *PageRemoveScriptToEvaluateOnLoadArgs {
	args := new(PageRemoveScriptToEvaluateOnLoadArgs)
	args.Identifier = identifier
	return args
}

// PageSetAutoAttachToCreatedPagesArgs represents the arguments for SetAutoAttachToCreatedPages in the Page domain.
type PageSetAutoAttachToCreatedPagesArgs struct {
	AutoAttach bool `json:"autoAttach"` // If true, browser will open a new inspector window for every page created from this one.
}

// NewPageSetAutoAttachToCreatedPagesArgs initializes PageSetAutoAttachToCreatedPagesArgs with the required arguments.
func NewPageSetAutoAttachToCreatedPagesArgs(autoAttach bool) *PageSetAutoAttachToCreatedPagesArgs {
	args := new(PageSetAutoAttachToCreatedPagesArgs)
	args.AutoAttach = autoAttach
	return args
}

// PageReloadArgs represents the arguments for Reload in the Page domain.
type PageReloadArgs struct {
	IgnoreCache            *bool   `json:"ignoreCache,omitempty"`            // If true, browser cache is ignored (as if the user pressed Shift+refresh).
	ScriptToEvaluateOnLoad *string `json:"scriptToEvaluateOnLoad,omitempty"` // If set, the script will be injected into all frames of the inspected page after reload.
}

// NewPageReloadArgs initializes PageReloadArgs with the required arguments.
func NewPageReloadArgs() *PageReloadArgs {
	args := new(PageReloadArgs)

	return args
}

// SetIgnoreCache sets the IgnoreCache optional argument. If true, browser cache is ignored (as if the user pressed Shift+refresh).
func (a *PageReloadArgs) SetIgnoreCache(ignoreCache bool) *PageReloadArgs {
	a.IgnoreCache = &ignoreCache
	return a
}

// SetScriptToEvaluateOnLoad sets the ScriptToEvaluateOnLoad optional argument. If set, the script will be injected into all frames of the inspected page after reload.
func (a *PageReloadArgs) SetScriptToEvaluateOnLoad(scriptToEvaluateOnLoad string) *PageReloadArgs {
	a.ScriptToEvaluateOnLoad = &scriptToEvaluateOnLoad
	return a
}

// PageNavigateArgs represents the arguments for Navigate in the Page domain.
type PageNavigateArgs struct {
	URL            string                     `json:"url"`                      // URL to navigate the page to.
	Referrer       *string                    `json:"referrer,omitempty"`       // Referrer URL.
	TransitionType cdptype.PageTransitionType `json:"transitionType,omitempty"` // Intended transition type.
}

// NewPageNavigateArgs initializes PageNavigateArgs with the required arguments.
func NewPageNavigateArgs(url string) *PageNavigateArgs {
	args := new(PageNavigateArgs)
	args.URL = url
	return args
}

// SetReferrer sets the Referrer optional argument. Referrer URL.
func (a *PageNavigateArgs) SetReferrer(referrer string) *PageNavigateArgs {
	a.Referrer = &referrer
	return a
}

// SetTransitionType sets the TransitionType optional argument. Intended transition type.
func (a *PageNavigateArgs) SetTransitionType(transitionType cdptype.PageTransitionType) *PageNavigateArgs {
	a.TransitionType = transitionType
	return a
}

// PageNavigateReply represents the return values for Navigate in the Page domain.
type PageNavigateReply struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Frame id that will be navigated.
}

// PageGetNavigationHistoryReply represents the return values for GetNavigationHistory in the Page domain.
type PageGetNavigationHistoryReply struct {
	CurrentIndex int                           `json:"currentIndex"` // Index of the current navigation history entry.
	Entries      []cdptype.PageNavigationEntry `json:"entries"`      // Array of navigation history entries.
}

// PageNavigateToHistoryEntryArgs represents the arguments for NavigateToHistoryEntry in the Page domain.
type PageNavigateToHistoryEntryArgs struct {
	EntryID int `json:"entryId"` // Unique id of the entry to navigate to.
}

// NewPageNavigateToHistoryEntryArgs initializes PageNavigateToHistoryEntryArgs with the required arguments.
func NewPageNavigateToHistoryEntryArgs(entryID int) *PageNavigateToHistoryEntryArgs {
	args := new(PageNavigateToHistoryEntryArgs)
	args.EntryID = entryID
	return args
}

// PageGetCookiesReply represents the return values for GetCookies in the Page domain.
type PageGetCookiesReply struct {
	Cookies []cdptype.NetworkCookie `json:"cookies"` // Array of cookie objects.
}

// PageDeleteCookieArgs represents the arguments for DeleteCookie in the Page domain.
type PageDeleteCookieArgs struct {
	CookieName string `json:"cookieName"` // Name of the cookie to remove.
	URL        string `json:"url"`        // URL to match cooke domain and path.
}

// NewPageDeleteCookieArgs initializes PageDeleteCookieArgs with the required arguments.
func NewPageDeleteCookieArgs(cookieName string, url string) *PageDeleteCookieArgs {
	args := new(PageDeleteCookieArgs)
	args.CookieName = cookieName
	args.URL = url
	return args
}

// PageGetResourceTreeReply represents the return values for GetResourceTree in the Page domain.
type PageGetResourceTreeReply struct {
	FrameTree cdptype.PageFrameResourceTree `json:"frameTree"` // Present frame / resource tree structure.
}

// PageGetResourceContentArgs represents the arguments for GetResourceContent in the Page domain.
type PageGetResourceContentArgs struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Frame id to get resource for.
	URL     string              `json:"url"`     // URL of the resource to get content for.
}

// NewPageGetResourceContentArgs initializes PageGetResourceContentArgs with the required arguments.
func NewPageGetResourceContentArgs(frameID cdptype.PageFrameID, url string) *PageGetResourceContentArgs {
	args := new(PageGetResourceContentArgs)
	args.FrameID = frameID
	args.URL = url
	return args
}

// PageGetResourceContentReply represents the return values for GetResourceContent in the Page domain.
type PageGetResourceContentReply struct {
	Content       string `json:"content"`       // Resource content.
	Base64Encoded bool   `json:"base64Encoded"` // True, if content was served as base64.
}

// PageSearchInResourceArgs represents the arguments for SearchInResource in the Page domain.
type PageSearchInResourceArgs struct {
	FrameID       cdptype.PageFrameID `json:"frameId"`                 // Frame id for resource to search in.
	URL           string              `json:"url"`                     // URL of the resource to search in.
	Query         string              `json:"query"`                   // String to search for.
	CaseSensitive *bool               `json:"caseSensitive,omitempty"` // If true, search is case sensitive.
	IsRegex       *bool               `json:"isRegex,omitempty"`       // If true, treats string parameter as regex.
}

// NewPageSearchInResourceArgs initializes PageSearchInResourceArgs with the required arguments.
func NewPageSearchInResourceArgs(frameID cdptype.PageFrameID, url string, query string) *PageSearchInResourceArgs {
	args := new(PageSearchInResourceArgs)
	args.FrameID = frameID
	args.URL = url
	args.Query = query
	return args
}

// SetCaseSensitive sets the CaseSensitive optional argument. If true, search is case sensitive.
func (a *PageSearchInResourceArgs) SetCaseSensitive(caseSensitive bool) *PageSearchInResourceArgs {
	a.CaseSensitive = &caseSensitive
	return a
}

// SetIsRegex sets the IsRegex optional argument. If true, treats string parameter as regex.
func (a *PageSearchInResourceArgs) SetIsRegex(isRegex bool) *PageSearchInResourceArgs {
	a.IsRegex = &isRegex
	return a
}

// PageSearchInResourceReply represents the return values for SearchInResource in the Page domain.
type PageSearchInResourceReply struct {
	Result []cdptype.DebuggerSearchMatch `json:"result"` // List of search matches.
}

// PageSetDocumentContentArgs represents the arguments for SetDocumentContent in the Page domain.
type PageSetDocumentContentArgs struct {
	FrameID cdptype.PageFrameID `json:"frameId"` // Frame id to set HTML for.
	HTML    string              `json:"html"`    // HTML content to set.
}

// NewPageSetDocumentContentArgs initializes PageSetDocumentContentArgs with the required arguments.
func NewPageSetDocumentContentArgs(frameID cdptype.PageFrameID, html string) *PageSetDocumentContentArgs {
	args := new(PageSetDocumentContentArgs)
	args.FrameID = frameID
	args.HTML = html
	return args
}

// PageSetDeviceMetricsOverrideArgs represents the arguments for SetDeviceMetricsOverride in the Page domain.
type PageSetDeviceMetricsOverrideArgs struct {
	Width             int                                 `json:"width"`                       // Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	Height            int                                 `json:"height"`                      // Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	DeviceScaleFactor float64                             `json:"deviceScaleFactor"`           // Overriding device scale factor value. 0 disables the override.
	Mobile            bool                                `json:"mobile"`                      // Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
	FitWindow         bool                                `json:"fitWindow"`                   // Whether a view that exceeds the available browser window area should be scaled down to fit.
	Scale             *float64                            `json:"scale,omitempty"`             // Scale to apply to resulting view image. Ignored in |fitWindow| mode.
	OffsetX           *float64                            `json:"offsetX,omitempty"`           // X offset to shift resulting view image by. Ignored in |fitWindow| mode.
	OffsetY           *float64                            `json:"offsetY,omitempty"`           // Y offset to shift resulting view image by. Ignored in |fitWindow| mode.
	ScreenWidth       *int                                `json:"screenWidth,omitempty"`       // Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	ScreenHeight      *int                                `json:"screenHeight,omitempty"`      // Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	PositionX         *int                                `json:"positionX,omitempty"`         // Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	PositionY         *int                                `json:"positionY,omitempty"`         // Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
	ScreenOrientation *cdptype.EmulationScreenOrientation `json:"screenOrientation,omitempty"` // Screen orientation override.
}

// NewPageSetDeviceMetricsOverrideArgs initializes PageSetDeviceMetricsOverrideArgs with the required arguments.
func NewPageSetDeviceMetricsOverrideArgs(width int, height int, deviceScaleFactor float64, mobile bool, fitWindow bool) *PageSetDeviceMetricsOverrideArgs {
	args := new(PageSetDeviceMetricsOverrideArgs)
	args.Width = width
	args.Height = height
	args.DeviceScaleFactor = deviceScaleFactor
	args.Mobile = mobile
	args.FitWindow = fitWindow
	return args
}

// SetScale sets the Scale optional argument. Scale to apply to resulting view image. Ignored in |fitWindow| mode.
func (a *PageSetDeviceMetricsOverrideArgs) SetScale(scale float64) *PageSetDeviceMetricsOverrideArgs {
	a.Scale = &scale
	return a
}

// SetOffsetX sets the OffsetX optional argument. X offset to shift resulting view image by. Ignored in |fitWindow| mode.
func (a *PageSetDeviceMetricsOverrideArgs) SetOffsetX(offsetX float64) *PageSetDeviceMetricsOverrideArgs {
	a.OffsetX = &offsetX
	return a
}

// SetOffsetY sets the OffsetY optional argument. Y offset to shift resulting view image by. Ignored in |fitWindow| mode.
func (a *PageSetDeviceMetricsOverrideArgs) SetOffsetY(offsetY float64) *PageSetDeviceMetricsOverrideArgs {
	a.OffsetY = &offsetY
	return a
}

// SetScreenWidth sets the ScreenWidth optional argument. Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *PageSetDeviceMetricsOverrideArgs) SetScreenWidth(screenWidth int) *PageSetDeviceMetricsOverrideArgs {
	a.ScreenWidth = &screenWidth
	return a
}

// SetScreenHeight sets the ScreenHeight optional argument. Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *PageSetDeviceMetricsOverrideArgs) SetScreenHeight(screenHeight int) *PageSetDeviceMetricsOverrideArgs {
	a.ScreenHeight = &screenHeight
	return a
}

// SetPositionX sets the PositionX optional argument. Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *PageSetDeviceMetricsOverrideArgs) SetPositionX(positionX int) *PageSetDeviceMetricsOverrideArgs {
	a.PositionX = &positionX
	return a
}

// SetPositionY sets the PositionY optional argument. Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
func (a *PageSetDeviceMetricsOverrideArgs) SetPositionY(positionY int) *PageSetDeviceMetricsOverrideArgs {
	a.PositionY = &positionY
	return a
}

// SetScreenOrientation sets the ScreenOrientation optional argument. Screen orientation override.
func (a *PageSetDeviceMetricsOverrideArgs) SetScreenOrientation(screenOrientation cdptype.EmulationScreenOrientation) *PageSetDeviceMetricsOverrideArgs {
	a.ScreenOrientation = &screenOrientation
	return a
}

// PageSetGeolocationOverrideArgs represents the arguments for SetGeolocationOverride in the Page domain.
type PageSetGeolocationOverrideArgs struct {
	Latitude  *float64 `json:"latitude,omitempty"`  // Mock latitude
	Longitude *float64 `json:"longitude,omitempty"` // Mock longitude
	Accuracy  *float64 `json:"accuracy,omitempty"`  // Mock accuracy
}

// NewPageSetGeolocationOverrideArgs initializes PageSetGeolocationOverrideArgs with the required arguments.
func NewPageSetGeolocationOverrideArgs() *PageSetGeolocationOverrideArgs {
	args := new(PageSetGeolocationOverrideArgs)

	return args
}

// SetLatitude sets the Latitude optional argument. Mock latitude
func (a *PageSetGeolocationOverrideArgs) SetLatitude(latitude float64) *PageSetGeolocationOverrideArgs {
	a.Latitude = &latitude
	return a
}

// SetLongitude sets the Longitude optional argument. Mock longitude
func (a *PageSetGeolocationOverrideArgs) SetLongitude(longitude float64) *PageSetGeolocationOverrideArgs {
	a.Longitude = &longitude
	return a
}

// SetAccuracy sets the Accuracy optional argument. Mock accuracy
func (a *PageSetGeolocationOverrideArgs) SetAccuracy(accuracy float64) *PageSetGeolocationOverrideArgs {
	a.Accuracy = &accuracy
	return a
}

// PageSetDeviceOrientationOverrideArgs represents the arguments for SetDeviceOrientationOverride in the Page domain.
type PageSetDeviceOrientationOverrideArgs struct {
	Alpha float64 `json:"alpha"` // Mock alpha
	Beta  float64 `json:"beta"`  // Mock beta
	Gamma float64 `json:"gamma"` // Mock gamma
}

// NewPageSetDeviceOrientationOverrideArgs initializes PageSetDeviceOrientationOverrideArgs with the required arguments.
func NewPageSetDeviceOrientationOverrideArgs(alpha float64, beta float64, gamma float64) *PageSetDeviceOrientationOverrideArgs {
	args := new(PageSetDeviceOrientationOverrideArgs)
	args.Alpha = alpha
	args.Beta = beta
	args.Gamma = gamma
	return args
}

// PageSetTouchEmulationEnabledArgs represents the arguments for SetTouchEmulationEnabled in the Page domain.
type PageSetTouchEmulationEnabledArgs struct {
	Enabled       bool    `json:"enabled"`                 // Whether the touch event emulation should be enabled.
	Configuration *string `json:"configuration,omitempty"` // Touch/gesture events configuration. Default: current platform.
}

// NewPageSetTouchEmulationEnabledArgs initializes PageSetTouchEmulationEnabledArgs with the required arguments.
func NewPageSetTouchEmulationEnabledArgs(enabled bool) *PageSetTouchEmulationEnabledArgs {
	args := new(PageSetTouchEmulationEnabledArgs)
	args.Enabled = enabled
	return args
}

// SetConfiguration sets the Configuration optional argument. Touch/gesture events configuration. Default: current platform.
func (a *PageSetTouchEmulationEnabledArgs) SetConfiguration(configuration string) *PageSetTouchEmulationEnabledArgs {
	a.Configuration = &configuration
	return a
}

// PageCaptureScreenshotArgs represents the arguments for CaptureScreenshot in the Page domain.
type PageCaptureScreenshotArgs struct {
	Format      *string `json:"format,omitempty"`      // Image compression format (defaults to png).
	Quality     *int    `json:"quality,omitempty"`     // Compression quality from range [0..100] (jpeg only).
	FromSurface *bool   `json:"fromSurface,omitempty"` // Capture the screenshot from the surface, rather than the view. Defaults to true.
}

// NewPageCaptureScreenshotArgs initializes PageCaptureScreenshotArgs with the required arguments.
func NewPageCaptureScreenshotArgs() *PageCaptureScreenshotArgs {
	args := new(PageCaptureScreenshotArgs)

	return args
}

// SetFormat sets the Format optional argument. Image compression format (defaults to png).
func (a *PageCaptureScreenshotArgs) SetFormat(format string) *PageCaptureScreenshotArgs {
	a.Format = &format
	return a
}

// SetQuality sets the Quality optional argument. Compression quality from range [0..100] (jpeg only).
func (a *PageCaptureScreenshotArgs) SetQuality(quality int) *PageCaptureScreenshotArgs {
	a.Quality = &quality
	return a
}

// SetFromSurface sets the FromSurface optional argument. Capture the screenshot from the surface, rather than the view. Defaults to true.
func (a *PageCaptureScreenshotArgs) SetFromSurface(fromSurface bool) *PageCaptureScreenshotArgs {
	a.FromSurface = &fromSurface
	return a
}

// PageCaptureScreenshotReply represents the return values for CaptureScreenshot in the Page domain.
type PageCaptureScreenshotReply struct {
	Data string `json:"data"` // Base64-encoded image data.
}

// PagePrintToPDFArgs represents the arguments for PrintToPDF in the Page domain.
type PagePrintToPDFArgs struct {
	Landscape           *bool    `json:"landscape,omitempty"`           // Paper orientation. Defaults to false.
	DisplayHeaderFooter *bool    `json:"displayHeaderFooter,omitempty"` // Display header and footer. Defaults to false.
	PrintBackground     *bool    `json:"printBackground,omitempty"`     // Print background graphics. Defaults to false.
	Scale               *float64 `json:"scale,omitempty"`               // Scale of the webpage rendering. Defaults to 1.
	PaperWidth          *float64 `json:"paperWidth,omitempty"`          // Paper width in inches. Defaults to 8.5 inches.
	PaperHeight         *float64 `json:"paperHeight,omitempty"`         // Paper height in inches. Defaults to 11 inches.
	MarginTop           *float64 `json:"marginTop,omitempty"`           // Top margin in inches. Defaults to 1cm (~0.4 inches).
	MarginBottom        *float64 `json:"marginBottom,omitempty"`        // Bottom margin in inches. Defaults to 1cm (~0.4 inches).
	MarginLeft          *float64 `json:"marginLeft,omitempty"`          // Left margin in inches. Defaults to 1cm (~0.4 inches).
	MarginRight         *float64 `json:"marginRight,omitempty"`         // Right margin in inches. Defaults to 1cm (~0.4 inches).
	PageRanges          *string  `json:"pageRanges,omitempty"`          // Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.
}

// NewPagePrintToPDFArgs initializes PagePrintToPDFArgs with the required arguments.
func NewPagePrintToPDFArgs() *PagePrintToPDFArgs {
	args := new(PagePrintToPDFArgs)

	return args
}

// SetLandscape sets the Landscape optional argument. Paper orientation. Defaults to false.
func (a *PagePrintToPDFArgs) SetLandscape(landscape bool) *PagePrintToPDFArgs {
	a.Landscape = &landscape
	return a
}

// SetDisplayHeaderFooter sets the DisplayHeaderFooter optional argument. Display header and footer. Defaults to false.
func (a *PagePrintToPDFArgs) SetDisplayHeaderFooter(displayHeaderFooter bool) *PagePrintToPDFArgs {
	a.DisplayHeaderFooter = &displayHeaderFooter
	return a
}

// SetPrintBackground sets the PrintBackground optional argument. Print background graphics. Defaults to false.
func (a *PagePrintToPDFArgs) SetPrintBackground(printBackground bool) *PagePrintToPDFArgs {
	a.PrintBackground = &printBackground
	return a
}

// SetScale sets the Scale optional argument. Scale of the webpage rendering. Defaults to 1.
func (a *PagePrintToPDFArgs) SetScale(scale float64) *PagePrintToPDFArgs {
	a.Scale = &scale
	return a
}

// SetPaperWidth sets the PaperWidth optional argument. Paper width in inches. Defaults to 8.5 inches.
func (a *PagePrintToPDFArgs) SetPaperWidth(paperWidth float64) *PagePrintToPDFArgs {
	a.PaperWidth = &paperWidth
	return a
}

// SetPaperHeight sets the PaperHeight optional argument. Paper height in inches. Defaults to 11 inches.
func (a *PagePrintToPDFArgs) SetPaperHeight(paperHeight float64) *PagePrintToPDFArgs {
	a.PaperHeight = &paperHeight
	return a
}

// SetMarginTop sets the MarginTop optional argument. Top margin in inches. Defaults to 1cm (~0.4 inches).
func (a *PagePrintToPDFArgs) SetMarginTop(marginTop float64) *PagePrintToPDFArgs {
	a.MarginTop = &marginTop
	return a
}

// SetMarginBottom sets the MarginBottom optional argument. Bottom margin in inches. Defaults to 1cm (~0.4 inches).
func (a *PagePrintToPDFArgs) SetMarginBottom(marginBottom float64) *PagePrintToPDFArgs {
	a.MarginBottom = &marginBottom
	return a
}

// SetMarginLeft sets the MarginLeft optional argument. Left margin in inches. Defaults to 1cm (~0.4 inches).
func (a *PagePrintToPDFArgs) SetMarginLeft(marginLeft float64) *PagePrintToPDFArgs {
	a.MarginLeft = &marginLeft
	return a
}

// SetMarginRight sets the MarginRight optional argument. Right margin in inches. Defaults to 1cm (~0.4 inches).
func (a *PagePrintToPDFArgs) SetMarginRight(marginRight float64) *PagePrintToPDFArgs {
	a.MarginRight = &marginRight
	return a
}

// SetPageRanges sets the PageRanges optional argument. Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.
func (a *PagePrintToPDFArgs) SetPageRanges(pageRanges string) *PagePrintToPDFArgs {
	a.PageRanges = &pageRanges
	return a
}

// PagePrintToPDFReply represents the return values for PrintToPDF in the Page domain.
type PagePrintToPDFReply struct {
	Data string `json:"data"` // Base64-encoded pdf data.
}

// PageStartScreencastArgs represents the arguments for StartScreencast in the Page domain.
type PageStartScreencastArgs struct {
	Format        *string `json:"format,omitempty"`        // Image compression format.
	Quality       *int    `json:"quality,omitempty"`       // Compression quality from range [0..100].
	MaxWidth      *int    `json:"maxWidth,omitempty"`      // Maximum screenshot width.
	MaxHeight     *int    `json:"maxHeight,omitempty"`     // Maximum screenshot height.
	EveryNthFrame *int    `json:"everyNthFrame,omitempty"` // Send every n-th frame.
}

// NewPageStartScreencastArgs initializes PageStartScreencastArgs with the required arguments.
func NewPageStartScreencastArgs() *PageStartScreencastArgs {
	args := new(PageStartScreencastArgs)

	return args
}

// SetFormat sets the Format optional argument. Image compression format.
func (a *PageStartScreencastArgs) SetFormat(format string) *PageStartScreencastArgs {
	a.Format = &format
	return a
}

// SetQuality sets the Quality optional argument. Compression quality from range [0..100].
func (a *PageStartScreencastArgs) SetQuality(quality int) *PageStartScreencastArgs {
	a.Quality = &quality
	return a
}

// SetMaxWidth sets the MaxWidth optional argument. Maximum screenshot width.
func (a *PageStartScreencastArgs) SetMaxWidth(maxWidth int) *PageStartScreencastArgs {
	a.MaxWidth = &maxWidth
	return a
}

// SetMaxHeight sets the MaxHeight optional argument. Maximum screenshot height.
func (a *PageStartScreencastArgs) SetMaxHeight(maxHeight int) *PageStartScreencastArgs {
	a.MaxHeight = &maxHeight
	return a
}

// SetEveryNthFrame sets the EveryNthFrame optional argument. Send every n-th frame.
func (a *PageStartScreencastArgs) SetEveryNthFrame(everyNthFrame int) *PageStartScreencastArgs {
	a.EveryNthFrame = &everyNthFrame
	return a
}

// PageScreencastFrameAckArgs represents the arguments for ScreencastFrameAck in the Page domain.
type PageScreencastFrameAckArgs struct {
	SessionID int `json:"sessionId"` // Frame number.
}

// NewPageScreencastFrameAckArgs initializes PageScreencastFrameAckArgs with the required arguments.
func NewPageScreencastFrameAckArgs(sessionID int) *PageScreencastFrameAckArgs {
	args := new(PageScreencastFrameAckArgs)
	args.SessionID = sessionID
	return args
}

// PageHandleJavaScriptDialogArgs represents the arguments for HandleJavaScriptDialog in the Page domain.
type PageHandleJavaScriptDialogArgs struct {
	Accept     bool    `json:"accept"`               // Whether to accept or dismiss the dialog.
	PromptText *string `json:"promptText,omitempty"` // The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.
}

// NewPageHandleJavaScriptDialogArgs initializes PageHandleJavaScriptDialogArgs with the required arguments.
func NewPageHandleJavaScriptDialogArgs(accept bool) *PageHandleJavaScriptDialogArgs {
	args := new(PageHandleJavaScriptDialogArgs)
	args.Accept = accept
	return args
}

// SetPromptText sets the PromptText optional argument. The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.
func (a *PageHandleJavaScriptDialogArgs) SetPromptText(promptText string) *PageHandleJavaScriptDialogArgs {
	a.PromptText = &promptText
	return a
}

// PageGetAppManifestReply represents the return values for GetAppManifest in the Page domain.
type PageGetAppManifestReply struct {
	URL    string                         `json:"url"`            // Manifest location.
	Errors []cdptype.PageAppManifestError `json:"errors"`         //
	Data   *string                        `json:"data,omitempty"` // Manifest content.
}

// PageSetControlNavigationsArgs represents the arguments for SetControlNavigations in the Page domain.
type PageSetControlNavigationsArgs struct {
	Enabled bool `json:"enabled"` //
}

// NewPageSetControlNavigationsArgs initializes PageSetControlNavigationsArgs with the required arguments.
func NewPageSetControlNavigationsArgs(enabled bool) *PageSetControlNavigationsArgs {
	args := new(PageSetControlNavigationsArgs)
	args.Enabled = enabled
	return args
}

// PageProcessNavigationArgs represents the arguments for ProcessNavigation in the Page domain.
type PageProcessNavigationArgs struct {
	Response     cdptype.PageNavigationResponse `json:"response"`     //
	NavigationID int                            `json:"navigationId"` //
}

// NewPageProcessNavigationArgs initializes PageProcessNavigationArgs with the required arguments.
func NewPageProcessNavigationArgs(response cdptype.PageNavigationResponse, navigationID int) *PageProcessNavigationArgs {
	args := new(PageProcessNavigationArgs)
	args.Response = response
	args.NavigationID = navigationID
	return args
}

// PageGetLayoutMetricsReply represents the return values for GetLayoutMetrics in the Page domain.
type PageGetLayoutMetricsReply struct {
	LayoutViewport cdptype.PageLayoutViewport `json:"layoutViewport"` // Metrics relating to the layout viewport.
	VisualViewport cdptype.PageVisualViewport `json:"visualViewport"` // Metrics relating to the visual viewport.
	ContentSize    cdptype.DOMRect            `json:"contentSize"`    // Size of scrollable area.
}

// PageCreateIsolatedWorldArgs represents the arguments for CreateIsolatedWorld in the Page domain.
type PageCreateIsolatedWorldArgs struct {
	FrameID             cdptype.PageFrameID `json:"frameId"`                       // Id of the frame in which the isolated world should be created.
	WorldName           *string             `json:"worldName,omitempty"`           // An optional name which is reported in the Execution Context.
	GrantUniveralAccess *bool               `json:"grantUniveralAccess,omitempty"` // Whether or not universal access should be granted to the isolated world. This is a powerful option, use with caution.
}

// NewPageCreateIsolatedWorldArgs initializes PageCreateIsolatedWorldArgs with the required arguments.
func NewPageCreateIsolatedWorldArgs(frameID cdptype.PageFrameID) *PageCreateIsolatedWorldArgs {
	args := new(PageCreateIsolatedWorldArgs)
	args.FrameID = frameID
	return args
}

// SetWorldName sets the WorldName optional argument. An optional name which is reported in the Execution Context.
func (a *PageCreateIsolatedWorldArgs) SetWorldName(worldName string) *PageCreateIsolatedWorldArgs {
	a.WorldName = &worldName
	return a
}

// SetGrantUniveralAccess sets the GrantUniveralAccess optional argument. Whether or not universal access should be granted to the isolated world. This is a powerful option, use with caution.
func (a *PageCreateIsolatedWorldArgs) SetGrantUniveralAccess(grantUniveralAccess bool) *PageCreateIsolatedWorldArgs {
	a.GrantUniveralAccess = &grantUniveralAccess
	return a
}

// PageCreateIsolatedWorldReply represents the return values for CreateIsolatedWorld in the Page domain.
type PageCreateIsolatedWorldReply struct {
	ExecutionContextID cdptype.RuntimeExecutionContextID `json:"executionContextId"` // Execution context of the isolated world.
}

// ProfilerSetSamplingIntervalArgs represents the arguments for SetSamplingInterval in the Profiler domain.
type ProfilerSetSamplingIntervalArgs struct {
	Interval int `json:"interval"` // New sampling interval in microseconds.
}

// NewProfilerSetSamplingIntervalArgs initializes ProfilerSetSamplingIntervalArgs with the required arguments.
func NewProfilerSetSamplingIntervalArgs(interval int) *ProfilerSetSamplingIntervalArgs {
	args := new(ProfilerSetSamplingIntervalArgs)
	args.Interval = interval
	return args
}

// ProfilerStopReply represents the return values for Stop in the Profiler domain.
type ProfilerStopReply struct {
	Profile cdptype.ProfilerProfile `json:"profile"` // Recorded profile.
}

// ProfilerStartPreciseCoverageArgs represents the arguments for StartPreciseCoverage in the Profiler domain.
type ProfilerStartPreciseCoverageArgs struct {
	CallCount *bool `json:"callCount,omitempty"` // Collect accurate call counts beyond simple 'covered' or 'not covered'.
}

// NewProfilerStartPreciseCoverageArgs initializes ProfilerStartPreciseCoverageArgs with the required arguments.
func NewProfilerStartPreciseCoverageArgs() *ProfilerStartPreciseCoverageArgs {
	args := new(ProfilerStartPreciseCoverageArgs)

	return args
}

// SetCallCount sets the CallCount optional argument. Collect accurate call counts beyond simple 'covered' or 'not covered'.
func (a *ProfilerStartPreciseCoverageArgs) SetCallCount(callCount bool) *ProfilerStartPreciseCoverageArgs {
	a.CallCount = &callCount
	return a
}

// ProfilerTakePreciseCoverageReply represents the return values for TakePreciseCoverage in the Profiler domain.
type ProfilerTakePreciseCoverageReply struct {
	Result []cdptype.ProfilerScriptCoverage `json:"result"` // Coverage data for the current isolate.
}

// ProfilerGetBestEffortCoverageReply represents the return values for GetBestEffortCoverage in the Profiler domain.
type ProfilerGetBestEffortCoverageReply struct {
	Result []cdptype.ProfilerScriptCoverage `json:"result"` // Coverage data for the current isolate.
}

// RuntimeEvaluateArgs represents the arguments for Evaluate in the Runtime domain.
type RuntimeEvaluateArgs struct {
	Expression            string                             `json:"expression"`                      // Expression to evaluate.
	ObjectGroup           *string                            `json:"objectGroup,omitempty"`           // Symbolic group name that can be used to release multiple objects.
	IncludeCommandLineAPI *bool                              `json:"includeCommandLineAPI,omitempty"` // Determines whether Command Line API should be available during the evaluation.
	Silent                *bool                              `json:"silent,omitempty"`                // In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
	ContextID             *cdptype.RuntimeExecutionContextID `json:"contextId,omitempty"`             // Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
	ReturnByValue         *bool                              `json:"returnByValue,omitempty"`         // Whether the result is expected to be a JSON object that should be sent by value.
	GeneratePreview       *bool                              `json:"generatePreview,omitempty"`       // Whether preview should be generated for the result.
	UserGesture           *bool                              `json:"userGesture,omitempty"`           // Whether execution should be treated as initiated by user in the UI.
	AwaitPromise          *bool                              `json:"awaitPromise,omitempty"`          // Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
}

// NewRuntimeEvaluateArgs initializes RuntimeEvaluateArgs with the required arguments.
func NewRuntimeEvaluateArgs(expression string) *RuntimeEvaluateArgs {
	args := new(RuntimeEvaluateArgs)
	args.Expression = expression
	return args
}

// SetObjectGroup sets the ObjectGroup optional argument. Symbolic group name that can be used to release multiple objects.
func (a *RuntimeEvaluateArgs) SetObjectGroup(objectGroup string) *RuntimeEvaluateArgs {
	a.ObjectGroup = &objectGroup
	return a
}

// SetIncludeCommandLineAPI sets the IncludeCommandLineAPI optional argument. Determines whether Command Line API should be available during the evaluation.
func (a *RuntimeEvaluateArgs) SetIncludeCommandLineAPI(includeCommandLineAPI bool) *RuntimeEvaluateArgs {
	a.IncludeCommandLineAPI = &includeCommandLineAPI
	return a
}

// SetSilent sets the Silent optional argument. In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
func (a *RuntimeEvaluateArgs) SetSilent(silent bool) *RuntimeEvaluateArgs {
	a.Silent = &silent
	return a
}

// SetContextID sets the ContextID optional argument. Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
func (a *RuntimeEvaluateArgs) SetContextID(contextID cdptype.RuntimeExecutionContextID) *RuntimeEvaluateArgs {
	a.ContextID = &contextID
	return a
}

// SetReturnByValue sets the ReturnByValue optional argument. Whether the result is expected to be a JSON object that should be sent by value.
func (a *RuntimeEvaluateArgs) SetReturnByValue(returnByValue bool) *RuntimeEvaluateArgs {
	a.ReturnByValue = &returnByValue
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the result.
func (a *RuntimeEvaluateArgs) SetGeneratePreview(generatePreview bool) *RuntimeEvaluateArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// SetUserGesture sets the UserGesture optional argument. Whether execution should be treated as initiated by user in the UI.
func (a *RuntimeEvaluateArgs) SetUserGesture(userGesture bool) *RuntimeEvaluateArgs {
	a.UserGesture = &userGesture
	return a
}

// SetAwaitPromise sets the AwaitPromise optional argument. Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
func (a *RuntimeEvaluateArgs) SetAwaitPromise(awaitPromise bool) *RuntimeEvaluateArgs {
	a.AwaitPromise = &awaitPromise
	return a
}

// RuntimeEvaluateReply represents the return values for Evaluate in the Runtime domain.
type RuntimeEvaluateReply struct {
	Result           cdptype.RuntimeRemoteObject      `json:"result"`                     // Evaluation result.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details.
}

// RuntimeAwaitPromiseArgs represents the arguments for AwaitPromise in the Runtime domain.
type RuntimeAwaitPromiseArgs struct {
	PromiseObjectID cdptype.RuntimeRemoteObjectID `json:"promiseObjectId"`           // Identifier of the promise.
	ReturnByValue   *bool                         `json:"returnByValue,omitempty"`   // Whether the result is expected to be a JSON object that should be sent by value.
	GeneratePreview *bool                         `json:"generatePreview,omitempty"` // Whether preview should be generated for the result.
}

// NewRuntimeAwaitPromiseArgs initializes RuntimeAwaitPromiseArgs with the required arguments.
func NewRuntimeAwaitPromiseArgs(promiseObjectID cdptype.RuntimeRemoteObjectID) *RuntimeAwaitPromiseArgs {
	args := new(RuntimeAwaitPromiseArgs)
	args.PromiseObjectID = promiseObjectID
	return args
}

// SetReturnByValue sets the ReturnByValue optional argument. Whether the result is expected to be a JSON object that should be sent by value.
func (a *RuntimeAwaitPromiseArgs) SetReturnByValue(returnByValue bool) *RuntimeAwaitPromiseArgs {
	a.ReturnByValue = &returnByValue
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the result.
func (a *RuntimeAwaitPromiseArgs) SetGeneratePreview(generatePreview bool) *RuntimeAwaitPromiseArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// RuntimeAwaitPromiseReply represents the return values for AwaitPromise in the Runtime domain.
type RuntimeAwaitPromiseReply struct {
	Result           cdptype.RuntimeRemoteObject      `json:"result"`                     // Promise result. Will contain rejected value if promise was rejected.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details if stack strace is available.
}

// RuntimeCallFunctionOnArgs represents the arguments for CallFunctionOn in the Runtime domain.
type RuntimeCallFunctionOnArgs struct {
	ObjectID            cdptype.RuntimeRemoteObjectID `json:"objectId"`                  // Identifier of the object to call function on.
	FunctionDeclaration string                        `json:"functionDeclaration"`       // Declaration of the function to call.
	Arguments           []cdptype.RuntimeCallArgument `json:"arguments,omitempty"`       // Call arguments. All call arguments must belong to the same JavaScript world as the target object.
	Silent              *bool                         `json:"silent,omitempty"`          // In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
	ReturnByValue       *bool                         `json:"returnByValue,omitempty"`   // Whether the result is expected to be a JSON object which should be sent by value.
	GeneratePreview     *bool                         `json:"generatePreview,omitempty"` // Whether preview should be generated for the result.
	UserGesture         *bool                         `json:"userGesture,omitempty"`     // Whether execution should be treated as initiated by user in the UI.
	AwaitPromise        *bool                         `json:"awaitPromise,omitempty"`    // Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
}

// NewRuntimeCallFunctionOnArgs initializes RuntimeCallFunctionOnArgs with the required arguments.
func NewRuntimeCallFunctionOnArgs(objectID cdptype.RuntimeRemoteObjectID, functionDeclaration string) *RuntimeCallFunctionOnArgs {
	args := new(RuntimeCallFunctionOnArgs)
	args.ObjectID = objectID
	args.FunctionDeclaration = functionDeclaration
	return args
}

// SetArguments sets the Arguments optional argument. Call arguments. All call arguments must belong to the same JavaScript world as the target object.
func (a *RuntimeCallFunctionOnArgs) SetArguments(arguments []cdptype.RuntimeCallArgument) *RuntimeCallFunctionOnArgs {
	a.Arguments = arguments
	return a
}

// SetSilent sets the Silent optional argument. In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
func (a *RuntimeCallFunctionOnArgs) SetSilent(silent bool) *RuntimeCallFunctionOnArgs {
	a.Silent = &silent
	return a
}

// SetReturnByValue sets the ReturnByValue optional argument. Whether the result is expected to be a JSON object which should be sent by value.
func (a *RuntimeCallFunctionOnArgs) SetReturnByValue(returnByValue bool) *RuntimeCallFunctionOnArgs {
	a.ReturnByValue = &returnByValue
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the result.
func (a *RuntimeCallFunctionOnArgs) SetGeneratePreview(generatePreview bool) *RuntimeCallFunctionOnArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// SetUserGesture sets the UserGesture optional argument. Whether execution should be treated as initiated by user in the UI.
func (a *RuntimeCallFunctionOnArgs) SetUserGesture(userGesture bool) *RuntimeCallFunctionOnArgs {
	a.UserGesture = &userGesture
	return a
}

// SetAwaitPromise sets the AwaitPromise optional argument. Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
func (a *RuntimeCallFunctionOnArgs) SetAwaitPromise(awaitPromise bool) *RuntimeCallFunctionOnArgs {
	a.AwaitPromise = &awaitPromise
	return a
}

// RuntimeCallFunctionOnReply represents the return values for CallFunctionOn in the Runtime domain.
type RuntimeCallFunctionOnReply struct {
	Result           cdptype.RuntimeRemoteObject      `json:"result"`                     // Call result.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details.
}

// RuntimeGetPropertiesArgs represents the arguments for GetProperties in the Runtime domain.
type RuntimeGetPropertiesArgs struct {
	ObjectID               cdptype.RuntimeRemoteObjectID `json:"objectId"`                         // Identifier of the object to return properties for.
	OwnProperties          *bool                         `json:"ownProperties,omitempty"`          // If true, returns properties belonging only to the element itself, not to its prototype chain.
	AccessorPropertiesOnly *bool                         `json:"accessorPropertiesOnly,omitempty"` // If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.
	GeneratePreview        *bool                         `json:"generatePreview,omitempty"`        // Whether preview should be generated for the results.
}

// NewRuntimeGetPropertiesArgs initializes RuntimeGetPropertiesArgs with the required arguments.
func NewRuntimeGetPropertiesArgs(objectID cdptype.RuntimeRemoteObjectID) *RuntimeGetPropertiesArgs {
	args := new(RuntimeGetPropertiesArgs)
	args.ObjectID = objectID
	return args
}

// SetOwnProperties sets the OwnProperties optional argument. If true, returns properties belonging only to the element itself, not to its prototype chain.
func (a *RuntimeGetPropertiesArgs) SetOwnProperties(ownProperties bool) *RuntimeGetPropertiesArgs {
	a.OwnProperties = &ownProperties
	return a
}

// SetAccessorPropertiesOnly sets the AccessorPropertiesOnly optional argument. If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.
func (a *RuntimeGetPropertiesArgs) SetAccessorPropertiesOnly(accessorPropertiesOnly bool) *RuntimeGetPropertiesArgs {
	a.AccessorPropertiesOnly = &accessorPropertiesOnly
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the results.
func (a *RuntimeGetPropertiesArgs) SetGeneratePreview(generatePreview bool) *RuntimeGetPropertiesArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// RuntimeGetPropertiesReply represents the return values for GetProperties in the Runtime domain.
type RuntimeGetPropertiesReply struct {
	Result             []cdptype.RuntimePropertyDescriptor         `json:"result"`                       // Object properties.
	InternalProperties []cdptype.RuntimeInternalPropertyDescriptor `json:"internalProperties,omitempty"` // Internal object properties (only of the element itself).
	ExceptionDetails   *cdptype.RuntimeExceptionDetails            `json:"exceptionDetails,omitempty"`   // Exception details.
}

// RuntimeReleaseObjectArgs represents the arguments for ReleaseObject in the Runtime domain.
type RuntimeReleaseObjectArgs struct {
	ObjectID cdptype.RuntimeRemoteObjectID `json:"objectId"` // Identifier of the object to release.
}

// NewRuntimeReleaseObjectArgs initializes RuntimeReleaseObjectArgs with the required arguments.
func NewRuntimeReleaseObjectArgs(objectID cdptype.RuntimeRemoteObjectID) *RuntimeReleaseObjectArgs {
	args := new(RuntimeReleaseObjectArgs)
	args.ObjectID = objectID
	return args
}

// RuntimeReleaseObjectGroupArgs represents the arguments for ReleaseObjectGroup in the Runtime domain.
type RuntimeReleaseObjectGroupArgs struct {
	ObjectGroup string `json:"objectGroup"` // Symbolic object group name.
}

// NewRuntimeReleaseObjectGroupArgs initializes RuntimeReleaseObjectGroupArgs with the required arguments.
func NewRuntimeReleaseObjectGroupArgs(objectGroup string) *RuntimeReleaseObjectGroupArgs {
	args := new(RuntimeReleaseObjectGroupArgs)
	args.ObjectGroup = objectGroup
	return args
}

// RuntimeSetCustomObjectFormatterEnabledArgs represents the arguments for SetCustomObjectFormatterEnabled in the Runtime domain.
type RuntimeSetCustomObjectFormatterEnabledArgs struct {
	Enabled bool `json:"enabled"` //
}

// NewRuntimeSetCustomObjectFormatterEnabledArgs initializes RuntimeSetCustomObjectFormatterEnabledArgs with the required arguments.
func NewRuntimeSetCustomObjectFormatterEnabledArgs(enabled bool) *RuntimeSetCustomObjectFormatterEnabledArgs {
	args := new(RuntimeSetCustomObjectFormatterEnabledArgs)
	args.Enabled = enabled
	return args
}

// RuntimeCompileScriptArgs represents the arguments for CompileScript in the Runtime domain.
type RuntimeCompileScriptArgs struct {
	Expression         string                             `json:"expression"`                   // Expression to compile.
	SourceURL          string                             `json:"sourceURL"`                    // Source url to be set for the script.
	PersistScript      bool                               `json:"persistScript"`                // Specifies whether the compiled script should be persisted.
	ExecutionContextID *cdptype.RuntimeExecutionContextID `json:"executionContextId,omitempty"` // Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
}

// NewRuntimeCompileScriptArgs initializes RuntimeCompileScriptArgs with the required arguments.
func NewRuntimeCompileScriptArgs(expression string, sourceURL string, persistScript bool) *RuntimeCompileScriptArgs {
	args := new(RuntimeCompileScriptArgs)
	args.Expression = expression
	args.SourceURL = sourceURL
	args.PersistScript = persistScript
	return args
}

// SetExecutionContextID sets the ExecutionContextID optional argument. Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
func (a *RuntimeCompileScriptArgs) SetExecutionContextID(executionContextID cdptype.RuntimeExecutionContextID) *RuntimeCompileScriptArgs {
	a.ExecutionContextID = &executionContextID
	return a
}

// RuntimeCompileScriptReply represents the return values for CompileScript in the Runtime domain.
type RuntimeCompileScriptReply struct {
	ScriptID         *cdptype.RuntimeScriptID         `json:"scriptId,omitempty"`         // Id of the script.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details.
}

// RuntimeRunScriptArgs represents the arguments for RunScript in the Runtime domain.
type RuntimeRunScriptArgs struct {
	ScriptID              cdptype.RuntimeScriptID            `json:"scriptId"`                        // Id of the script to run.
	ExecutionContextID    *cdptype.RuntimeExecutionContextID `json:"executionContextId,omitempty"`    // Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
	ObjectGroup           *string                            `json:"objectGroup,omitempty"`           // Symbolic group name that can be used to release multiple objects.
	Silent                *bool                              `json:"silent,omitempty"`                // In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
	IncludeCommandLineAPI *bool                              `json:"includeCommandLineAPI,omitempty"` // Determines whether Command Line API should be available during the evaluation.
	ReturnByValue         *bool                              `json:"returnByValue,omitempty"`         // Whether the result is expected to be a JSON object which should be sent by value.
	GeneratePreview       *bool                              `json:"generatePreview,omitempty"`       // Whether preview should be generated for the result.
	AwaitPromise          *bool                              `json:"awaitPromise,omitempty"`          // Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
}

// NewRuntimeRunScriptArgs initializes RuntimeRunScriptArgs with the required arguments.
func NewRuntimeRunScriptArgs(scriptID cdptype.RuntimeScriptID) *RuntimeRunScriptArgs {
	args := new(RuntimeRunScriptArgs)
	args.ScriptID = scriptID
	return args
}

// SetExecutionContextID sets the ExecutionContextID optional argument. Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.
func (a *RuntimeRunScriptArgs) SetExecutionContextID(executionContextID cdptype.RuntimeExecutionContextID) *RuntimeRunScriptArgs {
	a.ExecutionContextID = &executionContextID
	return a
}

// SetObjectGroup sets the ObjectGroup optional argument. Symbolic group name that can be used to release multiple objects.
func (a *RuntimeRunScriptArgs) SetObjectGroup(objectGroup string) *RuntimeRunScriptArgs {
	a.ObjectGroup = &objectGroup
	return a
}

// SetSilent sets the Silent optional argument. In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides setPauseOnException state.
func (a *RuntimeRunScriptArgs) SetSilent(silent bool) *RuntimeRunScriptArgs {
	a.Silent = &silent
	return a
}

// SetIncludeCommandLineAPI sets the IncludeCommandLineAPI optional argument. Determines whether Command Line API should be available during the evaluation.
func (a *RuntimeRunScriptArgs) SetIncludeCommandLineAPI(includeCommandLineAPI bool) *RuntimeRunScriptArgs {
	a.IncludeCommandLineAPI = &includeCommandLineAPI
	return a
}

// SetReturnByValue sets the ReturnByValue optional argument. Whether the result is expected to be a JSON object which should be sent by value.
func (a *RuntimeRunScriptArgs) SetReturnByValue(returnByValue bool) *RuntimeRunScriptArgs {
	a.ReturnByValue = &returnByValue
	return a
}

// SetGeneratePreview sets the GeneratePreview optional argument. Whether preview should be generated for the result.
func (a *RuntimeRunScriptArgs) SetGeneratePreview(generatePreview bool) *RuntimeRunScriptArgs {
	a.GeneratePreview = &generatePreview
	return a
}

// SetAwaitPromise sets the AwaitPromise optional argument. Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error.
func (a *RuntimeRunScriptArgs) SetAwaitPromise(awaitPromise bool) *RuntimeRunScriptArgs {
	a.AwaitPromise = &awaitPromise
	return a
}

// RuntimeRunScriptReply represents the return values for RunScript in the Runtime domain.
type RuntimeRunScriptReply struct {
	Result           cdptype.RuntimeRemoteObject      `json:"result"`                     // Run result.
	ExceptionDetails *cdptype.RuntimeExceptionDetails `json:"exceptionDetails,omitempty"` // Exception details.
}

// SchemaGetDomainsReply represents the return values for GetDomains in the Schema domain.
type SchemaGetDomainsReply struct {
	Domains []cdptype.SchemaDomain `json:"domains"` // List of supported domains.
}

// SecurityHandleCertificateErrorArgs represents the arguments for HandleCertificateError in the Security domain.
type SecurityHandleCertificateErrorArgs struct {
	EventID int                                    `json:"eventId"` // The ID of the event.
	Action  cdptype.SecurityCertificateErrorAction `json:"action"`  // The action to take on the certificate error.
}

// NewSecurityHandleCertificateErrorArgs initializes SecurityHandleCertificateErrorArgs with the required arguments.
func NewSecurityHandleCertificateErrorArgs(eventID int, action cdptype.SecurityCertificateErrorAction) *SecurityHandleCertificateErrorArgs {
	args := new(SecurityHandleCertificateErrorArgs)
	args.EventID = eventID
	args.Action = action
	return args
}

// SecuritySetOverrideCertificateErrorsArgs represents the arguments for SetOverrideCertificateErrors in the Security domain.
type SecuritySetOverrideCertificateErrorsArgs struct {
	Override bool `json:"override"` // If true, certificate errors will be overridden.
}

// NewSecuritySetOverrideCertificateErrorsArgs initializes SecuritySetOverrideCertificateErrorsArgs with the required arguments.
func NewSecuritySetOverrideCertificateErrorsArgs(override bool) *SecuritySetOverrideCertificateErrorsArgs {
	args := new(SecuritySetOverrideCertificateErrorsArgs)
	args.Override = override
	return args
}

// ServiceWorkerUnregisterArgs represents the arguments for Unregister in the ServiceWorker domain.
type ServiceWorkerUnregisterArgs struct {
	ScopeURL string `json:"scopeURL"` //
}

// NewServiceWorkerUnregisterArgs initializes ServiceWorkerUnregisterArgs with the required arguments.
func NewServiceWorkerUnregisterArgs(scopeURL string) *ServiceWorkerUnregisterArgs {
	args := new(ServiceWorkerUnregisterArgs)
	args.ScopeURL = scopeURL
	return args
}

// ServiceWorkerUpdateRegistrationArgs represents the arguments for UpdateRegistration in the ServiceWorker domain.
type ServiceWorkerUpdateRegistrationArgs struct {
	ScopeURL string `json:"scopeURL"` //
}

// NewServiceWorkerUpdateRegistrationArgs initializes ServiceWorkerUpdateRegistrationArgs with the required arguments.
func NewServiceWorkerUpdateRegistrationArgs(scopeURL string) *ServiceWorkerUpdateRegistrationArgs {
	args := new(ServiceWorkerUpdateRegistrationArgs)
	args.ScopeURL = scopeURL
	return args
}

// ServiceWorkerStartWorkerArgs represents the arguments for StartWorker in the ServiceWorker domain.
type ServiceWorkerStartWorkerArgs struct {
	ScopeURL string `json:"scopeURL"` //
}

// NewServiceWorkerStartWorkerArgs initializes ServiceWorkerStartWorkerArgs with the required arguments.
func NewServiceWorkerStartWorkerArgs(scopeURL string) *ServiceWorkerStartWorkerArgs {
	args := new(ServiceWorkerStartWorkerArgs)
	args.ScopeURL = scopeURL
	return args
}

// ServiceWorkerSkipWaitingArgs represents the arguments for SkipWaiting in the ServiceWorker domain.
type ServiceWorkerSkipWaitingArgs struct {
	ScopeURL string `json:"scopeURL"` //
}

// NewServiceWorkerSkipWaitingArgs initializes ServiceWorkerSkipWaitingArgs with the required arguments.
func NewServiceWorkerSkipWaitingArgs(scopeURL string) *ServiceWorkerSkipWaitingArgs {
	args := new(ServiceWorkerSkipWaitingArgs)
	args.ScopeURL = scopeURL
	return args
}

// ServiceWorkerStopWorkerArgs represents the arguments for StopWorker in the ServiceWorker domain.
type ServiceWorkerStopWorkerArgs struct {
	VersionID string `json:"versionId"` //
}

// NewServiceWorkerStopWorkerArgs initializes ServiceWorkerStopWorkerArgs with the required arguments.
func NewServiceWorkerStopWorkerArgs(versionID string) *ServiceWorkerStopWorkerArgs {
	args := new(ServiceWorkerStopWorkerArgs)
	args.VersionID = versionID
	return args
}

// ServiceWorkerInspectWorkerArgs represents the arguments for InspectWorker in the ServiceWorker domain.
type ServiceWorkerInspectWorkerArgs struct {
	VersionID string `json:"versionId"` //
}

// NewServiceWorkerInspectWorkerArgs initializes ServiceWorkerInspectWorkerArgs with the required arguments.
func NewServiceWorkerInspectWorkerArgs(versionID string) *ServiceWorkerInspectWorkerArgs {
	args := new(ServiceWorkerInspectWorkerArgs)
	args.VersionID = versionID
	return args
}

// ServiceWorkerSetForceUpdateOnPageLoadArgs represents the arguments for SetForceUpdateOnPageLoad in the ServiceWorker domain.
type ServiceWorkerSetForceUpdateOnPageLoadArgs struct {
	ForceUpdateOnPageLoad bool `json:"forceUpdateOnPageLoad"` //
}

// NewServiceWorkerSetForceUpdateOnPageLoadArgs initializes ServiceWorkerSetForceUpdateOnPageLoadArgs with the required arguments.
func NewServiceWorkerSetForceUpdateOnPageLoadArgs(forceUpdateOnPageLoad bool) *ServiceWorkerSetForceUpdateOnPageLoadArgs {
	args := new(ServiceWorkerSetForceUpdateOnPageLoadArgs)
	args.ForceUpdateOnPageLoad = forceUpdateOnPageLoad
	return args
}

// ServiceWorkerDeliverPushMessageArgs represents the arguments for DeliverPushMessage in the ServiceWorker domain.
type ServiceWorkerDeliverPushMessageArgs struct {
	Origin         string `json:"origin"`         //
	RegistrationID string `json:"registrationId"` //
	Data           string `json:"data"`           //
}

// NewServiceWorkerDeliverPushMessageArgs initializes ServiceWorkerDeliverPushMessageArgs with the required arguments.
func NewServiceWorkerDeliverPushMessageArgs(origin string, registrationID string, data string) *ServiceWorkerDeliverPushMessageArgs {
	args := new(ServiceWorkerDeliverPushMessageArgs)
	args.Origin = origin
	args.RegistrationID = registrationID
	args.Data = data
	return args
}

// ServiceWorkerDispatchSyncEventArgs represents the arguments for DispatchSyncEvent in the ServiceWorker domain.
type ServiceWorkerDispatchSyncEventArgs struct {
	Origin         string `json:"origin"`         //
	RegistrationID string `json:"registrationId"` //
	Tag            string `json:"tag"`            //
	LastChance     bool   `json:"lastChance"`     //
}

// NewServiceWorkerDispatchSyncEventArgs initializes ServiceWorkerDispatchSyncEventArgs with the required arguments.
func NewServiceWorkerDispatchSyncEventArgs(origin string, registrationID string, tag string, lastChance bool) *ServiceWorkerDispatchSyncEventArgs {
	args := new(ServiceWorkerDispatchSyncEventArgs)
	args.Origin = origin
	args.RegistrationID = registrationID
	args.Tag = tag
	args.LastChance = lastChance
	return args
}

// StorageClearDataForOriginArgs represents the arguments for ClearDataForOrigin in the Storage domain.
type StorageClearDataForOriginArgs struct {
	Origin       string `json:"origin"`       // Security origin.
	StorageTypes string `json:"storageTypes"` // Comma separated origin names.
}

// NewStorageClearDataForOriginArgs initializes StorageClearDataForOriginArgs with the required arguments.
func NewStorageClearDataForOriginArgs(origin string, storageTypes string) *StorageClearDataForOriginArgs {
	args := new(StorageClearDataForOriginArgs)
	args.Origin = origin
	args.StorageTypes = storageTypes
	return args
}

// StorageGetUsageAndQuotaArgs represents the arguments for GetUsageAndQuota in the Storage domain.
type StorageGetUsageAndQuotaArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// NewStorageGetUsageAndQuotaArgs initializes StorageGetUsageAndQuotaArgs with the required arguments.
func NewStorageGetUsageAndQuotaArgs(origin string) *StorageGetUsageAndQuotaArgs {
	args := new(StorageGetUsageAndQuotaArgs)
	args.Origin = origin
	return args
}

// StorageGetUsageAndQuotaReply represents the return values for GetUsageAndQuota in the Storage domain.
type StorageGetUsageAndQuotaReply struct {
	Usage          float64                       `json:"usage"`          // Storage usage (bytes).
	Quota          float64                       `json:"quota"`          // Storage quota (bytes).
	UsageBreakdown []cdptype.StorageUsageForType `json:"usageBreakdown"` // Storage usage per type (bytes).
}

// SystemInfoGetInfoReply represents the return values for GetInfo in the SystemInfo domain.
type SystemInfoGetInfoReply struct {
	GPU          cdptype.SystemInfoGPUInfo `json:"gpu"`          // Information about the GPUs on the system.
	ModelName    string                    `json:"modelName"`    // A platform-dependent description of the model of the machine. On Mac OS, this is, for example, 'MacBookPro'. Will be the empty string if not supported.
	ModelVersion string                    `json:"modelVersion"` // A platform-dependent description of the version of the machine. On Mac OS, this is, for example, '10.1'. Will be the empty string if not supported.
	CommandLine  string                    `json:"commandLine"`  // The command line string used to launch the browser. Will be the empty string if not supported.
}

// TargetSetDiscoverTargetsArgs represents the arguments for SetDiscoverTargets in the Target domain.
type TargetSetDiscoverTargetsArgs struct {
	Discover bool `json:"discover"` // Whether to discover available targets.
}

// NewTargetSetDiscoverTargetsArgs initializes TargetSetDiscoverTargetsArgs with the required arguments.
func NewTargetSetDiscoverTargetsArgs(discover bool) *TargetSetDiscoverTargetsArgs {
	args := new(TargetSetDiscoverTargetsArgs)
	args.Discover = discover
	return args
}

// TargetSetAutoAttachArgs represents the arguments for SetAutoAttach in the Target domain.
type TargetSetAutoAttachArgs struct {
	AutoAttach             bool `json:"autoAttach"`             // Whether to auto-attach to related targets.
	WaitForDebuggerOnStart bool `json:"waitForDebuggerOnStart"` // Whether to pause new targets when attaching to them. Use Runtime.runIfWaitingForDebugger to run paused targets.
}

// NewTargetSetAutoAttachArgs initializes TargetSetAutoAttachArgs with the required arguments.
func NewTargetSetAutoAttachArgs(autoAttach bool, waitForDebuggerOnStart bool) *TargetSetAutoAttachArgs {
	args := new(TargetSetAutoAttachArgs)
	args.AutoAttach = autoAttach
	args.WaitForDebuggerOnStart = waitForDebuggerOnStart
	return args
}

// TargetSetAttachToFramesArgs represents the arguments for SetAttachToFrames in the Target domain.
type TargetSetAttachToFramesArgs struct {
	Value bool `json:"value"` // Whether to attach to frames.
}

// NewTargetSetAttachToFramesArgs initializes TargetSetAttachToFramesArgs with the required arguments.
func NewTargetSetAttachToFramesArgs(value bool) *TargetSetAttachToFramesArgs {
	args := new(TargetSetAttachToFramesArgs)
	args.Value = value
	return args
}

// TargetSetRemoteLocationsArgs represents the arguments for SetRemoteLocations in the Target domain.
type TargetSetRemoteLocationsArgs struct {
	Locations []cdptype.TargetRemoteLocation `json:"locations"` // List of remote locations.
}

// NewTargetSetRemoteLocationsArgs initializes TargetSetRemoteLocationsArgs with the required arguments.
func NewTargetSetRemoteLocationsArgs(locations []cdptype.TargetRemoteLocation) *TargetSetRemoteLocationsArgs {
	args := new(TargetSetRemoteLocationsArgs)
	args.Locations = locations
	return args
}

// TargetSendMessageToTargetArgs represents the arguments for SendMessageToTarget in the Target domain.
type TargetSendMessageToTargetArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` //
	Message  string           `json:"message"`  //
}

// NewTargetSendMessageToTargetArgs initializes TargetSendMessageToTargetArgs with the required arguments.
func NewTargetSendMessageToTargetArgs(targetID cdptype.TargetID, message string) *TargetSendMessageToTargetArgs {
	args := new(TargetSendMessageToTargetArgs)
	args.TargetID = targetID
	args.Message = message
	return args
}

// TargetGetTargetInfoArgs represents the arguments for GetTargetInfo in the Target domain.
type TargetGetTargetInfoArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// NewTargetGetTargetInfoArgs initializes TargetGetTargetInfoArgs with the required arguments.
func NewTargetGetTargetInfoArgs(targetID cdptype.TargetID) *TargetGetTargetInfoArgs {
	args := new(TargetGetTargetInfoArgs)
	args.TargetID = targetID
	return args
}

// TargetGetTargetInfoReply represents the return values for GetTargetInfo in the Target domain.
type TargetGetTargetInfoReply struct {
	TargetInfo cdptype.TargetInfo `json:"targetInfo"` //
}

// TargetActivateTargetArgs represents the arguments for ActivateTarget in the Target domain.
type TargetActivateTargetArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// NewTargetActivateTargetArgs initializes TargetActivateTargetArgs with the required arguments.
func NewTargetActivateTargetArgs(targetID cdptype.TargetID) *TargetActivateTargetArgs {
	args := new(TargetActivateTargetArgs)
	args.TargetID = targetID
	return args
}

// TargetCloseTargetArgs represents the arguments for CloseTarget in the Target domain.
type TargetCloseTargetArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// NewTargetCloseTargetArgs initializes TargetCloseTargetArgs with the required arguments.
func NewTargetCloseTargetArgs(targetID cdptype.TargetID) *TargetCloseTargetArgs {
	args := new(TargetCloseTargetArgs)
	args.TargetID = targetID
	return args
}

// TargetCloseTargetReply represents the return values for CloseTarget in the Target domain.
type TargetCloseTargetReply struct {
	Success bool `json:"success"` //
}

// TargetAttachToTargetArgs represents the arguments for AttachToTarget in the Target domain.
type TargetAttachToTargetArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// NewTargetAttachToTargetArgs initializes TargetAttachToTargetArgs with the required arguments.
func NewTargetAttachToTargetArgs(targetID cdptype.TargetID) *TargetAttachToTargetArgs {
	args := new(TargetAttachToTargetArgs)
	args.TargetID = targetID
	return args
}

// TargetAttachToTargetReply represents the return values for AttachToTarget in the Target domain.
type TargetAttachToTargetReply struct {
	Success bool `json:"success"` // Whether attach succeeded.
}

// TargetDetachFromTargetArgs represents the arguments for DetachFromTarget in the Target domain.
type TargetDetachFromTargetArgs struct {
	TargetID cdptype.TargetID `json:"targetId"` //
}

// NewTargetDetachFromTargetArgs initializes TargetDetachFromTargetArgs with the required arguments.
func NewTargetDetachFromTargetArgs(targetID cdptype.TargetID) *TargetDetachFromTargetArgs {
	args := new(TargetDetachFromTargetArgs)
	args.TargetID = targetID
	return args
}

// TargetCreateBrowserContextReply represents the return values for CreateBrowserContext in the Target domain.
type TargetCreateBrowserContextReply struct {
	BrowserContextID cdptype.TargetBrowserContextID `json:"browserContextId"` // The id of the context created.
}

// TargetDisposeBrowserContextArgs represents the arguments for DisposeBrowserContext in the Target domain.
type TargetDisposeBrowserContextArgs struct {
	BrowserContextID cdptype.TargetBrowserContextID `json:"browserContextId"` //
}

// NewTargetDisposeBrowserContextArgs initializes TargetDisposeBrowserContextArgs with the required arguments.
func NewTargetDisposeBrowserContextArgs(browserContextID cdptype.TargetBrowserContextID) *TargetDisposeBrowserContextArgs {
	args := new(TargetDisposeBrowserContextArgs)
	args.BrowserContextID = browserContextID
	return args
}

// TargetDisposeBrowserContextReply represents the return values for DisposeBrowserContext in the Target domain.
type TargetDisposeBrowserContextReply struct {
	Success bool `json:"success"` //
}

// TargetCreateTargetArgs represents the arguments for CreateTarget in the Target domain.
type TargetCreateTargetArgs struct {
	URL              string                          `json:"url"`                        // The initial URL the page will be navigated to.
	Width            *int                            `json:"width,omitempty"`            // Frame width in DIP (headless chrome only).
	Height           *int                            `json:"height,omitempty"`           // Frame height in DIP (headless chrome only).
	BrowserContextID *cdptype.TargetBrowserContextID `json:"browserContextId,omitempty"` // The browser context to create the page in (headless chrome only).
}

// NewTargetCreateTargetArgs initializes TargetCreateTargetArgs with the required arguments.
func NewTargetCreateTargetArgs(url string) *TargetCreateTargetArgs {
	args := new(TargetCreateTargetArgs)
	args.URL = url
	return args
}

// SetWidth sets the Width optional argument. Frame width in DIP (headless chrome only).
func (a *TargetCreateTargetArgs) SetWidth(width int) *TargetCreateTargetArgs {
	a.Width = &width
	return a
}

// SetHeight sets the Height optional argument. Frame height in DIP (headless chrome only).
func (a *TargetCreateTargetArgs) SetHeight(height int) *TargetCreateTargetArgs {
	a.Height = &height
	return a
}

// SetBrowserContextID sets the BrowserContextID optional argument. The browser context to create the page in (headless chrome only).
func (a *TargetCreateTargetArgs) SetBrowserContextID(browserContextID cdptype.TargetBrowserContextID) *TargetCreateTargetArgs {
	a.BrowserContextID = &browserContextID
	return a
}

// TargetCreateTargetReply represents the return values for CreateTarget in the Target domain.
type TargetCreateTargetReply struct {
	TargetID cdptype.TargetID `json:"targetId"` // The id of the page opened.
}

// TargetGetTargetsReply represents the return values for GetTargets in the Target domain.
type TargetGetTargetsReply struct {
	TargetInfos []cdptype.TargetInfo `json:"targetInfos"` // The list of targets.
}

// TetheringBindArgs represents the arguments for Bind in the Tethering domain.
type TetheringBindArgs struct {
	Port int `json:"port"` // Port number to bind.
}

// NewTetheringBindArgs initializes TetheringBindArgs with the required arguments.
func NewTetheringBindArgs(port int) *TetheringBindArgs {
	args := new(TetheringBindArgs)
	args.Port = port
	return args
}

// TetheringUnbindArgs represents the arguments for Unbind in the Tethering domain.
type TetheringUnbindArgs struct {
	Port int `json:"port"` // Port number to unbind.
}

// NewTetheringUnbindArgs initializes TetheringUnbindArgs with the required arguments.
func NewTetheringUnbindArgs(port int) *TetheringUnbindArgs {
	args := new(TetheringUnbindArgs)
	args.Port = port
	return args
}

// TracingStartArgs represents the arguments for Start in the Tracing domain.
type TracingStartArgs struct {
	Categories                   *string                     `json:"categories,omitempty"`                   // Category/tag filter
	Options                      *string                     `json:"options,omitempty"`                      // Tracing options
	BufferUsageReportingInterval *float64                    `json:"bufferUsageReportingInterval,omitempty"` // If set, the agent will issue bufferUsage events at this interval, specified in milliseconds
	TransferMode                 *string                     `json:"transferMode,omitempty"`                 // Whether to report trace events as series of dataCollected events or to save trace to a stream (defaults to ReportEvents).
	TraceConfig                  *cdptype.TracingTraceConfig `json:"traceConfig,omitempty"`                  //
}

// NewTracingStartArgs initializes TracingStartArgs with the required arguments.
func NewTracingStartArgs() *TracingStartArgs {
	args := new(TracingStartArgs)

	return args
}

// SetCategories sets the Categories optional argument. Category/tag filter
func (a *TracingStartArgs) SetCategories(categories string) *TracingStartArgs {
	a.Categories = &categories
	return a
}

// SetOptions sets the Options optional argument. Tracing options
func (a *TracingStartArgs) SetOptions(options string) *TracingStartArgs {
	a.Options = &options
	return a
}

// SetBufferUsageReportingInterval sets the BufferUsageReportingInterval optional argument. If set, the agent will issue bufferUsage events at this interval, specified in milliseconds
func (a *TracingStartArgs) SetBufferUsageReportingInterval(bufferUsageReportingInterval float64) *TracingStartArgs {
	a.BufferUsageReportingInterval = &bufferUsageReportingInterval
	return a
}

// SetTransferMode sets the TransferMode optional argument. Whether to report trace events as series of dataCollected events or to save trace to a stream (defaults to ReportEvents).
func (a *TracingStartArgs) SetTransferMode(transferMode string) *TracingStartArgs {
	a.TransferMode = &transferMode
	return a
}

// SetTraceConfig sets the TraceConfig optional argument.
func (a *TracingStartArgs) SetTraceConfig(traceConfig cdptype.TracingTraceConfig) *TracingStartArgs {
	a.TraceConfig = &traceConfig
	return a
}

// TracingGetCategoriesReply represents the return values for GetCategories in the Tracing domain.
type TracingGetCategoriesReply struct {
	Categories []string `json:"categories"` // A list of supported tracing categories.
}

// TracingRequestMemoryDumpReply represents the return values for RequestMemoryDump in the Tracing domain.
type TracingRequestMemoryDumpReply struct {
	DumpGUID string `json:"dumpGuid"` // GUID of the resulting global memory dump.
	Success  bool   `json:"success"`  // True iff the global memory dump succeeded.
}

// TracingRecordClockSyncMarkerArgs represents the arguments for RecordClockSyncMarker in the Tracing domain.
type TracingRecordClockSyncMarkerArgs struct {
	SyncID string `json:"syncId"` // The ID of this clock sync marker
}

// NewTracingRecordClockSyncMarkerArgs initializes TracingRecordClockSyncMarkerArgs with the required arguments.
func NewTracingRecordClockSyncMarkerArgs(syncID string) *TracingRecordClockSyncMarkerArgs {
	args := new(TracingRecordClockSyncMarkerArgs)
	args.SyncID = syncID
	return args
}
